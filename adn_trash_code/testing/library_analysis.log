Analyzed C:\dev\adn_trash_code\python_libs\abc.py:
Classes: ['class that has a metaclass derived from ABCMeta cannot be', 'class C(metaclass=ABCMeta):', 'class abstractclassmethod(classmethod):', 'class C(ABC):', 'class abstractstaticmethod(staticmethod):', 'class C(ABC):', 'class abstractproperty(property):', 'class C(ABC):', 'class ABCMeta(type):', 'class was created, the method will not be considered implemented until', 'class after this function is called.', 'class ABC(metaclass=ABCMeta):']
Functions: ['def abstractmethod(funcobj):', 'def my_abstract_method(self, arg1, arg2, argN):', 'def my_abstract_classmethod(cls, ...):', 'def __init__(self, callable):', 'def my_abstract_staticmethod(...):', 'def __init__(self, callable):', 'def my_abstract_property(self):', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def register(cls, subclass):', 'def __instancecheck__(cls, instance):', 'def __subclasscheck__(cls, subclass):', 'def _dump_registry(cls, file=None):', 'def _abc_registry_clear(cls):', 'def _abc_caches_clear(cls):', 'def update_abstractmethods(cls):']

Analyzed C:\dev\adn_trash_code\python_libs\antigravity.py:
Classes: []
Functions: ['def geohash(latitude, longitude, datedow):']

Analyzed C:\dev\adn_trash_code\python_libs\argparse.py:
Classes: ['class _AttributeHolder(object):', 'class HelpFormatter(object):', 'class _Section(object):', 'class RawDescriptionHelpFormatter(HelpFormatter):', 'class RawTextHelpFormatter(RawDescriptionHelpFormatter):', 'class ArgumentDefaultsHelpFormatter(HelpFormatter):', 'class MetavarTypeHelpFormatter(HelpFormatter):', 'class ArgumentError(Exception):', 'class ArgumentTypeError(Exception):', 'class Action(_AttributeHolder):', 'class BooleanOptionalAction(Action):', 'class _StoreAction(Action):', 'class _StoreConstAction(Action):', 'class _StoreTrueAction(_StoreConstAction):', 'class _StoreFalseAction(_StoreConstAction):', 'class _AppendAction(Action):', 'class _AppendConstAction(Action):', 'class _CountAction(Action):', 'class _HelpAction(Action):', 'class _VersionAction(Action):', 'class _SubParsersAction(Action):', 'class _ChoicesPseudoAction(Action):', 'class _ExtendAction(_AppendAction):', 'class FileType(object):', 'class Namespace(_AttributeHolder):', 'class _ActionsContainer(object):', 'class _ArgumentGroup(_ActionsContainer):', 'class _MutuallyExclusiveGroup(_ArgumentGroup):', 'class ArgumentParser(_AttributeHolder, _ActionsContainer):']
Functions: ['def __repr__(self):', 'def _get_kwargs(self):', 'def _get_args(self):', 'def _copy_items(items):', 'def __init__(self,', 'def _indent(self):', 'def _dedent(self):', 'def __init__(self, formatter, parent, heading=None):', 'def format_help(self):', 'def _add_item(self, func, args):', 'def start_section(self, heading):', 'def end_section(self):', 'def add_text(self, text):', 'def add_usage(self, usage, actions, groups, prefix=None):', 'def add_argument(self, action):', 'def add_arguments(self, actions):', 'def format_help(self):', 'def _join_parts(self, part_strings):', 'def _format_usage(self, usage, actions, groups, prefix):', 'def get_lines(parts, indent, prefix=None):', 'def _format_actions_usage(self, actions, groups):', 'def _get_actions_usage_parts(self, actions, groups):', 'def _format_text(self, text):', 'def _format_action(self, action):', 'def _format_action_invocation(self, action):', 'def _metavar_formatter(self, action, default_metavar):', 'def format(tuple_size):', 'def _format_args(self, action, default_metavar):', 'def _expand_help(self, action):', 'def _iter_indented_subactions(self, action):', 'def _split_lines(self, text, width):', 'def _fill_text(self, text, width, indent):', 'def _get_help_string(self, action):', 'def _get_default_metavar_for_optional(self, action):', 'def _get_default_metavar_for_positional(self, action):', 'def _fill_text(self, text, width, indent):', 'def _split_lines(self, text, width):', 'def _get_help_string(self, action):', 'def _get_default_metavar_for_optional(self, action):', 'def _get_default_metavar_for_positional(self, action):', 'def _get_action_name(argument):', 'def __init__(self, argument, message):', 'def __str__(self):', 'def __init__(self,', 'def _get_kwargs(self):', 'def format_usage(self):', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def format_usage(self):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __init__(self,', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self, name, aliases, help):', 'def __init__(self,', 'def add_parser(self, name, *, deprecated=False, **kwargs):', 'def _get_subactions(self):', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __call__(self, parser, namespace, values, option_string=None):', "def __init__(self, mode='r', bufsize=-1, encoding=None, errors=None):", 'def __call__(self, string):', 'def __repr__(self):', 'def __init__(self, **kwargs):', 'def __eq__(self, other):', 'def __contains__(self, key):', 'def __init__(self,', 'def register(self, registry_name, value, object):', 'def _registry_get(self, registry_name, value, default=None):', 'def set_defaults(self, **kwargs):', 'def get_default(self, dest):', 'def add_argument(self, *args, **kwargs):', 'def add_argument_group(self, *args, **kwargs):', 'def add_mutually_exclusive_group(self, **kwargs):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def _add_container_actions(self, container):', 'def _get_positional_kwargs(self, dest, **kwargs):', 'def _get_optional_kwargs(self, *args, **kwargs):', 'def _pop_action_class(self, kwargs, default=None):', 'def _get_handler(self):', 'def _check_conflict(self, action):', 'def _handle_conflict_error(self, action, conflicting_actions):', 'def _handle_conflict_resolve(self, action, conflicting_actions):', 'def __init__(self, container, title=None, description=None, **kwargs):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def add_argument_group(self, *args, **kwargs):', 'def __init__(self, container, required=False):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def add_mutually_exclusive_group(self, *args, **kwargs):', 'def __init__(self,', 'def identity(string):', 'def _get_kwargs(self):', 'def add_subparsers(self, **kwargs):', 'def _add_action(self, action):', 'def _get_optional_actions(self):', 'def _get_positional_actions(self):', 'def parse_args(self, args=None, namespace=None):', 'def parse_known_args(self, args=None, namespace=None):', 'def _parse_known_args2(self, args, namespace, intermixed):', 'def _parse_known_args(self, arg_strings, namespace, intermixed):', 'def take_action(action, argument_strings, option_string=None):', 'def consume_optional(start_index):', 'def consume_positionals(start_index):', 'def _read_args_from_files(self, arg_strings):', 'def convert_arg_line_to_args(self, arg_line):', 'def _match_argument(self, action, arg_strings_pattern):', 'def _match_arguments_partial(self, actions, arg_strings_pattern):', 'def _parse_optional(self, arg_string):', 'def _get_option_tuples(self, option_string):', 'def _get_nargs_pattern(self, action):', 'def parse_intermixed_args(self, args=None, namespace=None):', 'def parse_known_intermixed_args(self, args=None, namespace=None):', 'def _get_values(self, action, arg_strings):', 'def _get_value(self, action, arg_string):', 'def _check_value(self, action, value):', 'def format_usage(self):', 'def format_help(self):', 'def _get_formatter(self):', 'def print_usage(self, file=None):', 'def print_help(self, file=None):', 'def _print_message(self, message, file=None):', 'def exit(self, status=0, message=None):', 'def error(self, message):', 'def _warning(self, message):']

Analyzed C:\dev\adn_trash_code\python_libs\ast.py:
Classes: ['class NodeVisitor(object):', 'class name of the node.  So a `TryFinally` node visit function would', 'class NodeTransformer(NodeVisitor):', 'class RewriteName(NodeTransformer):', 'class _ABC(type):', 'class Num(Constant, metaclass=_ABC):', 'class Str(Constant, metaclass=_ABC):', 'class Bytes(Constant, metaclass=_ABC):', 'class NameConstant(Constant, metaclass=_ABC):', 'class Ellipsis(Constant, metaclass=_ABC):', 'class slice(AST):', 'class Index(slice):', 'class ExtSlice(slice):', 'class Suite(mod):', 'class AugLoad(expr_context):', 'class AugStore(expr_context):', 'class Param(expr_context):', 'class _Precedence:', 'class _Unparser(NodeVisitor):']
Functions: ["def parse(source, filename='<unknown>', mode='exec', *,", 'def literal_eval(node_or_string):', 'def _raise_malformed_node(node):', 'def _convert_num(node):', 'def _convert_signed_num(node):', 'def _convert(node):', 'def dump(', 'def _format(node, level=0):', 'def copy_location(new_node, old_node):', 'def fix_missing_locations(node):', 'def _fix(node, lineno, col_offset, end_lineno, end_col_offset):', 'def increment_lineno(node, n=1):', 'def iter_fields(node):', 'def iter_child_nodes(node):', 'def get_docstring(node, clean=True):', 'def _splitlines_no_ff(source, maxlines=None):', 'def _pad_whitespace(source):', 'def get_source_segment(source, node, *, padded=False):', 'def walk(node):', 'def visit(self, node):', 'def generic_visit(self, node):', 'def visit_Constant(self, node):', 'def visit_Name(self, node):', 'def generic_visit(self, node):', 'def _n_getter(self):', 'def _n_setter(self, value):', 'def _s_getter(self):', 'def _s_setter(self, value):', 'def __init__(cls, *args):', 'def __instancecheck__(cls, inst):', 'def _new(cls, *args, **kwargs):', 'def __new__(cls, *args, **kwargs):', 'def __new__(cls, value, **kwargs):', 'def __new__(cls, dims=(), **kwargs):', 'def _dims_getter(self):', 'def _dims_setter(self, value):', 'def next(self):', 'def __init__(self):', 'def interleave(self, inter, f, seq):', 'def items_view(self, traverser, items):', 'def maybe_newline(self):', 'def fill(self, text=""):', 'def write(self, *text):', 'def buffered(self, buffer = None):', 'def block(self, *, extra = None):', 'def delimit(self, start, end):', 'def delimit_if(self, start, end, condition):', 'def require_parens(self, precedence, node):', 'def get_precedence(self, node):', 'def set_precedence(self, precedence, *nodes):', 'def get_raw_docstring(self, node):', 'def get_type_comment(self, node):', 'def traverse(self, node):', 'def visit(self, node):', 'def _write_docstring_and_traverse_body(self, node):', 'def visit_Module(self, node):', 'def visit_FunctionType(self, node):', 'def visit_Expr(self, node):', 'def visit_NamedExpr(self, node):', 'def visit_Import(self, node):', 'def visit_ImportFrom(self, node):', 'def visit_Assign(self, node):', 'def visit_AugAssign(self, node):', 'def visit_AnnAssign(self, node):', 'def visit_Return(self, node):', 'def visit_Pass(self, node):', 'def visit_Break(self, node):', 'def visit_Continue(self, node):', 'def visit_Delete(self, node):', 'def visit_Assert(self, node):', 'def visit_Global(self, node):', 'def visit_Nonlocal(self, node):', 'def visit_Await(self, node):', 'def visit_Yield(self, node):', 'def visit_YieldFrom(self, node):', 'def visit_Raise(self, node):', 'def do_visit_try(self, node):', 'def visit_Try(self, node):', 'def visit_TryStar(self, node):', 'def visit_ExceptHandler(self, node):', 'def visit_ClassDef(self, node):', 'def visit_FunctionDef(self, node):', 'def visit_AsyncFunctionDef(self, node):', 'def _function_helper(self, node, fill_suffix):', 'def _type_params_helper(self, type_params):', 'def visit_TypeVar(self, node):', 'def visit_TypeVarTuple(self, node):', 'def visit_ParamSpec(self, node):', 'def visit_TypeAlias(self, node):', 'def visit_For(self, node):', 'def visit_AsyncFor(self, node):', 'def _for_helper(self, fill, node):', 'def visit_If(self, node):', 'def visit_While(self, node):', 'def visit_With(self, node):', 'def visit_AsyncWith(self, node):', 'def _str_literal_helper(', 'def escape_char(c):', 'def _write_str_avoiding_backslashes(self, string, *, quote_types=_ALL_QUOTES):', 'def visit_JoinedStr(self, node):', 'def _write_fstring_inner(self, node, is_format_spec=False):', 'def visit_FormattedValue(self, node):', 'def unparse_inner(inner):', 'def visit_Name(self, node):', 'def _write_docstring(self, node):', 'def _write_constant(self, value):', 'def visit_Constant(self, node):', 'def visit_List(self, node):', 'def visit_ListComp(self, node):', 'def visit_GeneratorExp(self, node):', 'def visit_SetComp(self, node):', 'def visit_DictComp(self, node):', 'def visit_comprehension(self, node):', 'def visit_IfExp(self, node):', 'def visit_Set(self, node):', 'def visit_Dict(self, node):', 'def write_key_value_pair(k, v):', 'def write_item(item):', 'def visit_Tuple(self, node):', 'def visit_UnaryOp(self, node):', 'def visit_BinOp(self, node):', 'def visit_Compare(self, node):', 'def visit_BoolOp(self, node):', 'def increasing_level_traverse(node):', 'def visit_Attribute(self, node):', 'def visit_Call(self, node):', 'def visit_Subscript(self, node):', 'def is_non_empty_tuple(slice_value):', 'def visit_Starred(self, node):', 'def visit_Ellipsis(self, node):', 'def visit_Slice(self, node):', 'def visit_Match(self, node):', 'def visit_arg(self, node):', 'def visit_arguments(self, node):', 'def visit_keyword(self, node):', 'def visit_Lambda(self, node):', 'def visit_alias(self, node):', 'def visit_withitem(self, node):', 'def visit_match_case(self, node):', 'def visit_MatchValue(self, node):', 'def visit_MatchSingleton(self, node):', 'def visit_MatchSequence(self, node):', 'def visit_MatchStar(self, node):', 'def visit_MatchMapping(self, node):', 'def write_key_pattern_pair(pair):', 'def visit_MatchClass(self, node):', 'def write_attr_pattern(pair):', 'def visit_MatchAs(self, node):', 'def visit_MatchOr(self, node):', 'def unparse(ast_obj):', 'def __getattr__(name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\base64.py:
Classes: []
Functions: ['def _bytes_from_decode_data(s):', 'def b64encode(s, altchars=None):', 'def b64decode(s, altchars=None, validate=False):', 'def standard_b64encode(s):', 'def standard_b64decode(s):', 'def urlsafe_b64encode(s):', 'def urlsafe_b64decode(s):', 'def _b32encode(alphabet, s):', 'def _b32decode(alphabet, s, casefold=False, map01=None):', 'def b32encode(s):', 'def b32decode(s, casefold=False, map01=None):', 'def b32hexencode(s):', 'def b32hexdecode(s, casefold=False):', 'def b16encode(s):', 'def b16decode(s, casefold=False):', 'def _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):', 'def a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False):', "def a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v'):", 'def b85encode(b, pad=False):', 'def b85decode(b):', 'def z85encode(s):', 'def z85decode(s):', 'def encode(input, output):', 'def decode(input, output):', 'def _input_type_check(s):', 'def encodebytes(s):', 'def decodebytes(s):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\bdb.py:
Classes: ['class BdbQuit(Exception):', 'class Bdb:', 'class Breakpoint:', 'class Tdb(Bdb):']
Functions: ['def __init__(self, skip=None):', 'def canonic(self, filename):', 'def reset(self):', 'def set_enterframe(self, frame):', 'def trace_dispatch(self, frame, event, arg):', 'def dispatch_line(self, frame):', 'def dispatch_call(self, frame, arg):', 'def dispatch_return(self, frame, arg):', 'def dispatch_exception(self, frame, arg):', 'def dispatch_opcode(self, frame, arg):', 'def is_skipped_module(self, module_name):', 'def stop_here(self, frame):', 'def break_here(self, frame):', 'def do_clear(self, arg):', 'def break_anywhere(self, frame):', 'def user_call(self, frame, argument_list):', 'def user_line(self, frame):', 'def user_return(self, frame, return_value):', 'def user_exception(self, frame, exc_info):', 'def user_opcode(self, frame):', 'def _set_trace_opcodes(self, trace_opcodes):', 'def _set_stopinfo(self, stopframe, returnframe, stoplineno=0, opcode=False):', 'def _set_caller_tracefunc(self, current_frame):', 'def set_until(self, frame, lineno=None):', 'def set_step(self):', 'def set_stepinstr(self):', 'def set_next(self, frame):', 'def set_return(self, frame):', 'def set_trace(self, frame=None):', 'def set_continue(self):', 'def set_quit(self):', 'def _add_to_breaks(self, filename, lineno):', 'def set_break(self, filename, lineno, temporary=False, cond=None,', 'def _load_breaks(self):', 'def _prune_breaks(self, filename, lineno):', 'def clear_break(self, filename, lineno):', 'def clear_bpbynumber(self, arg):', 'def clear_all_file_breaks(self, filename):', 'def clear_all_breaks(self):', 'def get_bpbynumber(self, arg):', 'def get_break(self, filename, lineno):', 'def get_breaks(self, filename, lineno):', 'def get_file_breaks(self, filename):', 'def get_all_breaks(self):', 'def get_stack(self, f, t):', "def format_stack_entry(self, frame_lineno, lprefix=': '):", 'def run(self, cmd, globals=None, locals=None):', 'def runeval(self, expr, globals=None, locals=None):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kwds):', 'def set_trace():', 'def __init__(self, file, line, temporary=False, cond=None, funcname=None):', 'def clearBreakpoints():', 'def deleteMe(self):', 'def enable(self):', 'def disable(self):', 'def bpprint(self, out=None):', 'def bpformat(self):', 'def __str__(self):', 'def checkfuncname(b, frame):', 'def effective(file, line, frame):', 'def user_call(self, frame, args):', 'def user_line(self, frame):', 'def user_return(self, frame, retval):', 'def user_exception(self, frame, exc_stuff):', 'def foo(n):', 'def bar(a):', 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\bisect.py:
Classes: []
Functions: ['def insort_right(a, x, lo=0, hi=None, *, key=None):', 'def bisect_right(a, x, lo=0, hi=None, *, key=None):', 'def insort_left(a, x, lo=0, hi=None, *, key=None):', 'def bisect_left(a, x, lo=0, hi=None, *, key=None):']

Analyzed C:\dev\adn_trash_code\python_libs\bz2.py:
Classes: ['class BZ2File(_compression.BaseStream):']
Functions: ['def __init__(self, filename, mode="r", *, compresslevel=9):', 'def close(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def fileno(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def peek(self, n=0):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readinto(self, b):', 'def readline(self, size=-1):', 'def readlines(self, size=-1):', 'def write(self, data):', 'def writelines(self, seq):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):', 'def open(filename, mode="rb", compresslevel=9,', 'def compress(data, compresslevel=9):', 'def decompress(data):']

Analyzed C:\dev\adn_trash_code\python_libs\calendar.py:
Classes: ['class IllegalMonthError(ValueError, IndexError):', 'class IllegalWeekdayError(ValueError):', 'class Month(IntEnum):', 'class Day(IntEnum):', 'class _localized_month:', 'class _localized_day:', 'class Calendar(object):', 'class TextCalendar(Calendar):', 'class HTMLCalendar(Calendar):', 'class different_locale:', 'class LocaleTextCalendar(TextCalendar):', 'class LocaleHTMLCalendar(HTMLCalendar):']
Functions: ['def __init__(self, month):', 'def __str__(self):', 'def __init__(self, weekday):', 'def __str__(self):', 'def __getattr__(name):', 'def __init__(self, format):', 'def __getitem__(self, i):', 'def __len__(self):', 'def __init__(self, format):', 'def __getitem__(self, i):', 'def __len__(self):', 'def isleap(year):', 'def leapdays(y1, y2):', 'def weekday(year, month, day):', 'def _validate_month(month):', 'def monthrange(year, month):', 'def _monthlen(year, month):', 'def _prevmonth(year, month):', 'def _nextmonth(year, month):', 'def __init__(self, firstweekday=0):', 'def getfirstweekday(self):', 'def setfirstweekday(self, firstweekday):', 'def iterweekdays(self):', 'def itermonthdates(self, year, month):', 'def itermonthdays(self, year, month):', 'def itermonthdays2(self, year, month):', 'def itermonthdays3(self, year, month):', 'def itermonthdays4(self, year, month):', 'def monthdatescalendar(self, year, month):', 'def monthdays2calendar(self, year, month):', 'def monthdayscalendar(self, year, month):', 'def yeardatescalendar(self, year, width=3):', 'def yeardays2calendar(self, year, width=3):', 'def yeardayscalendar(self, year, width=3):', 'def prweek(self, theweek, width):', 'def formatday(self, day, weekday, width):', 'def formatweek(self, theweek, width):', 'def formatweekday(self, day, width):', 'def formatweekheader(self, width):', 'def formatmonthname(self, theyear, themonth, width, withyear=True):', 'def prmonth(self, theyear, themonth, w=0, l=0):', 'def formatmonth(self, theyear, themonth, w=0, l=0):', 'def formatyear(self, theyear, w=2, l=1, c=6, m=3):', 'def pryear(self, theyear, w=0, l=0, c=6, m=3):', 'def formatday(self, day, weekday):', 'def formatweek(self, theweek):', 'def formatweekday(self, day):', 'def formatweekheader(self):', 'def formatmonthname(self, theyear, themonth, withyear=True):', 'def formatmonth(self, theyear, themonth, withyear=True):', 'def formatyear(self, theyear, width=3):', "def formatyearpage(self, theyear, width=3, css='calendar.css', encoding=None):", 'def __init__(self, locale):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _get_default_locale():', 'def __init__(self, firstweekday=0, locale=None):', 'def formatweekday(self, day, width):', 'def formatmonthname(self, theyear, themonth, width, withyear=True):', 'def __init__(self, firstweekday=0, locale=None):', 'def formatweekday(self, day):', 'def formatmonthname(self, theyear, themonth, withyear=True):', 'def setfirstweekday(firstweekday):', 'def format(cols, colwidth=_colwidth, spacing=_spacing):', 'def formatstring(cols, colwidth=_colwidth, spacing=_spacing):', 'def timegm(tuple):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\cmd.py:
Classes: ['class Cmd:']
Functions: ["def __init__(self, completekey='tab', stdin=None, stdout=None):", 'def cmdloop(self, intro=None):', 'def precmd(self, line):', 'def postcmd(self, stop, line):', 'def preloop(self):', 'def postloop(self):', 'def parseline(self, line):', 'def onecmd(self, line):', 'def emptyline(self):', 'def default(self, line):', 'def completedefault(self, *ignored):', 'def completenames(self, text, *ignored):', 'def complete(self, text, state):', 'def get_names(self):', 'def complete_help(self, *args):', 'def do_help(self, arg):', 'def print_topics(self, header, cmds, cmdlen, maxcol):', 'def columnize(self, list, displaywidth=80):']

Analyzed C:\dev\adn_trash_code\python_libs\code.py:
Classes: ['class InteractiveInterpreter:', 'class InteractiveConsole(InteractiveInterpreter):', 'class Quitter:']
Functions: ['def __init__(self, locals=None):', 'def runsource(self, source, filename="<input>", symbol="single"):', 'def runcode(self, code):', 'def showsyntaxerror(self, filename=None, **kwargs):', 'def showtraceback(self):', 'def _showtraceback(self, typ, value, tb, source):', 'def _excepthook(self, typ, value, tb):', 'def write(self, data):', 'def __init__(self, locals=None, filename="<console>", *, local_exit=False):', 'def resetbuffer(self):', 'def interact(self, banner=None, exitmsg=None):', 'def push(self, line, filename=None, _symbol="single"):', 'def raw_input(self, prompt=""):', 'def __init__(self, name):', 'def __repr__(self):', 'def __call__(self, code=None):', 'def interact(banner=None, readfunc=None, local=None, exitmsg=None, local_exit=False):']

Analyzed C:\dev\adn_trash_code\python_libs\codecs.py:
Classes: ['class CodecInfo(tuple):', 'class Codec:', 'class IncrementalEncoder(object):', 'class BufferedIncrementalEncoder(IncrementalEncoder):', 'class IncrementalDecoder(object):', 'class BufferedIncrementalDecoder(IncrementalDecoder):', 'class StreamWriter(Codec):', 'class StreamReader(Codec):', 'class StreamReaderWriter:', 'class StreamRecoder:']
Functions: ['def __new__(cls, encode, decode, streamreader=None, streamwriter=None,', 'def __repr__(self):', 'def __getnewargs__(self):', "def encode(self, input, errors='strict'):", "def decode(self, input, errors='strict'):", "def __init__(self, errors='strict'):", 'def encode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def _buffer_encode(self, input, errors, final):', 'def encode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def decode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def _buffer_decode(self, input, errors, final):', 'def decode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, stream, errors='strict'):", 'def write(self, object):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def __init__(self, stream, errors='strict'):", "def decode(self, input, errors='strict'):", 'def read(self, size=-1, chars=-1, firstline=False):', 'def readline(self, size=None, keepends=True):', 'def readlines(self, sizehint=None, keepends=True):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __next__(self):', 'def __iter__(self):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def __init__(self, stream, Reader, Writer, errors='strict'):", 'def read(self, size=-1):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __next__(self):', 'def __iter__(self):', 'def write(self, data):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', 'def __init__(self, stream, encode, decode, Reader, Writer,', 'def read(self, size=-1):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __next__(self):', 'def __iter__(self):', 'def write(self, data):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def open(filename, mode='r', encoding=None, errors='strict', buffering=-1):", "def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):", 'def getencoder(encoding):', 'def getdecoder(encoding):', 'def getincrementalencoder(encoding):', 'def getincrementaldecoder(encoding):', 'def getreader(encoding):', 'def getwriter(encoding):', "def iterencode(iterator, encoding, errors='strict', **kwargs):", "def iterdecode(iterator, encoding, errors='strict', **kwargs):", 'def make_identity_dict(rng):', 'def make_encoding_map(decoding_map):']

Analyzed C:\dev\adn_trash_code\python_libs\codeop.py:
Classes: ['class Compile:', 'class CommandCompiler:']
Functions: ['def _maybe_compile(compiler, source, filename, symbol):', 'def _compile(source, filename, symbol, incomplete_input=True):', 'def compile_command(source, filename="<input>", symbol="single"):', 'def __init__(self):', 'def __call__(self, source, filename, symbol, flags=0, **kwargs):', 'def __init__(self,):', 'def __call__(self, source, filename="<input>", symbol="single"):']

Analyzed C:\dev\adn_trash_code\python_libs\colorsys.py:
Classes: []
Functions: ['def rgb_to_yiq(r, g, b):', 'def yiq_to_rgb(y, i, q):', 'def rgb_to_hls(r, g, b):', 'def hls_to_rgb(h, l, s):', 'def _v(m1, m2, hue):', 'def rgb_to_hsv(r, g, b):', 'def hsv_to_rgb(h, s, v):']

Analyzed C:\dev\adn_trash_code\python_libs\compileall.py:
Classes: []
Functions: ['def _walk_dir(dir, maxlevels, quiet=0):', 'def compile_dir(dir, maxlevels=None, ddir=None, force=False,', 'def compile_file(fullname, ddir=None, force=False, rx=None, quiet=0,', 'def compile_path(skip_curdir=1, maxlevels=0, force=False, quiet=0,', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\configparser.py:
Classes: ['class Error(Exception):', 'class NoSectionError(Error):', 'class DuplicateSectionError(Error):', 'class DuplicateOptionError(Error):', 'class NoOptionError(Error):', 'class InterpolationError(Error):', 'class InterpolationMissingOptionError(InterpolationError):', 'class InterpolationSyntaxError(InterpolationError):', 'class InterpolationDepthError(InterpolationError):', 'class ParsingError(Error):', 'class MissingSectionHeaderError(ParsingError):', 'class MultilineContinuationError(ParsingError):', 'class _UnnamedSection:', 'class Interpolation:', 'class BasicInterpolation(Interpolation):', 'class ExtendedInterpolation(Interpolation):', 'class _ReadState:', 'class _Line(str):', 'class RawConfigParser(MutableMapping):', 'class ConfigParser(RawConfigParser):', 'class SectionProxy(MutableMapping):', 'class ConverterMapping(MutableMapping):']
Functions: ["def __init__(self, msg=''):", 'def __repr__(self):', 'def __init__(self, section):', 'def __init__(self, section, source=None, lineno=None):', 'def __init__(self, section, option, source=None, lineno=None):', 'def __init__(self, option, section):', 'def __init__(self, option, section, msg):', 'def __init__(self, option, section, rawval, reference):', 'def __init__(self, option, section, rawval):', 'def __init__(self, source, *args):', 'def append(self, lineno, line):', 'def combine(self, others):', "def _raise_all(exceptions: Iterable['ParsingError']):", 'def __init__(self, filename, lineno, line):', 'def __init__(self, filename, lineno, line):', 'def __repr__(self):', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def before_read(self, parser, section, option, value):', 'def before_write(self, parser, section, option, value):', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def _interpolate_some(self, parser, option, accum, rest, section, map,', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def _interpolate_some(self, parser, option, accum, rest, section, map,', 'def __init__(self):', 'def __new__(cls, val, *args, **kwargs):', 'def __init__(self, val, prefixes):', 'def clean(self):', 'def has_comments(self):', 'def _strip_inline(self):', 'def _strip_full(self):', 'def __init__(self, defaults=None, dict_type=_default_dict,', 'def defaults(self):', 'def sections(self):', 'def add_section(self, section):', 'def has_section(self, section):', 'def options(self, section):', 'def read(self, filenames, encoding=None):', 'def read_file(self, f, source=None):', "def read_string(self, string, source='<string>'):", "def read_dict(self, dictionary, source='<dict>'):", 'def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):', 'def _get(self, section, conv, option, **kwargs):', 'def _get_conv(self, section, option, conv, *, raw=False, vars=None,', 'def getint(self, section, option, *, raw=False, vars=None,', 'def getfloat(self, section, option, *, raw=False, vars=None,', 'def getboolean(self, section, option, *, raw=False, vars=None,', 'def items(self, section=_UNSET, raw=False, vars=None):', 'def popitem(self):', 'def optionxform(self, optionstr):', 'def has_option(self, section, option):', 'def set(self, section, option, value=None):', 'def write(self, fp, space_around_delimiters=True):', 'def _write_section(self, fp, section_name, section_items, delimiter, unnamed=False):', 'def remove_option(self, section, option):', 'def remove_section(self, section):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __contains__(self, key):', 'def __len__(self):', 'def __iter__(self):', 'def _read(self, fp, fpname):', 'def _read_inner(self, fp, fpname):', 'def _handle_continuation_line(self, st, line, fpname):', 'def _handle_rest(self, st, line, fpname):', 'def _handle_header(self, st, sectname, fpname):', 'def _handle_option(self, st, line, fpname):', 'def _join_multiline_values(self):', 'def _read_defaults(self, defaults):', 'def _unify_values(self, section, vars):', 'def _convert_to_boolean(self, value):', 'def _validate_value_types(self, *, section="", option="", value=""):', 'def converters(self):', 'def set(self, section, option, value=None):', 'def add_section(self, section):', 'def _read_defaults(self, defaults):', 'def __init__(self, parser, name):', 'def __repr__(self):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __contains__(self, key):', 'def __len__(self):', 'def __iter__(self):', 'def _options(self):', 'def parser(self):', 'def name(self):', 'def get(self, option, fallback=None, *, raw=False, vars=None,', 'def __init__(self, parser):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __iter__(self):', 'def __len__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\contextlib.py:
Classes: ['class AbstractContextManager(abc.ABC):', 'class AbstractAsyncContextManager(abc.ABC):', 'class ContextDecorator(object):', 'class AsyncContextDecorator(object):', 'class _GeneratorContextManagerBase:', 'class _GeneratorContextManager(', 'class _AsyncGeneratorContextManager(', 'class closing(AbstractContextManager):', 'class aclosing(AbstractAsyncContextManager):', 'class _RedirectStream(AbstractContextManager):', 'class redirect_stdout(_RedirectStream):', 'class redirect_stderr(_RedirectStream):', 'class suppress(AbstractContextManager):', 'class _BaseExitStack:', 'class ExitStack(_BaseExitStack, AbstractContextManager):', 'class AsyncExitStack(_BaseExitStack, AbstractAsyncContextManager):', 'class nullcontext(AbstractContextManager, AbstractAsyncContextManager):', 'class chdir(AbstractContextManager):']
Functions: ['def __enter__(self):', 'def __exit__(self, exc_type, exc_value, traceback):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def _recreate_cm(self):', 'def __call__(self, func):', 'def inner(*args, **kwds):', 'def _recreate_cm(self):', 'def __call__(self, func):', 'def __init__(self, func, args, kwds):', 'def _recreate_cm(self):', 'def __enter__(self):', 'def __exit__(self, typ, value, traceback):', 'def contextmanager(func):', 'def some_generator(<arguments>):', 'def helper(*args, **kwds):', 'def asynccontextmanager(func):', 'def helper(*args, **kwds):', 'def __init__(self, thing):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def __init__(self, thing):', 'def __init__(self, new_target):', 'def __enter__(self):', 'def __exit__(self, exctype, excinst, exctb):', 'def __init__(self, *exceptions):', 'def __enter__(self):', 'def __exit__(self, exctype, excinst, exctb):', 'def _create_exit_wrapper(cm, cm_exit):', 'def _create_cb_wrapper(callback, /, *args, **kwds):', 'def _exit_wrapper(exc_type, exc, tb):', 'def __init__(self):', 'def pop_all(self):', 'def push(self, exit):', 'def enter_context(self, cm):', 'def callback(self, callback, /, *args, **kwds):', 'def _push_cm_exit(self, cm, cm_exit):', 'def _push_exit_callback(self, callback, is_sync=True):', 'def __enter__(self):', 'def __exit__(self, *exc_details):', 'def _fix_exception_context(new_exc, old_exc):', 'def close(self):', 'def _create_async_exit_wrapper(cm, cm_exit):', 'def _create_async_cb_wrapper(callback, /, *args, **kwds):', 'def push_async_exit(self, exit):', 'def push_async_callback(self, callback, /, *args, **kwds):', 'def _push_async_cm_exit(self, cm, cm_exit):', 'def _fix_exception_context(new_exc, old_exc):', 'def __init__(self, enter_result=None):', 'def __enter__(self):', 'def __exit__(self, *excinfo):', 'def __init__(self, path):', 'def __enter__(self):', 'def __exit__(self, *excinfo):']

Analyzed C:\dev\adn_trash_code\python_libs\contextvars.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\copy.py:
Classes: ['class instances).', 'class Error(Exception):']
Functions: ['def copy(x):', 'def _copy_immutable(x):', 'def deepcopy(x, memo=None, _nil=[]):', 'def _deepcopy_atomic(x, memo):', 'def _deepcopy_list(x, memo, deepcopy=deepcopy):', 'def _deepcopy_tuple(x, memo, deepcopy=deepcopy):', 'def _deepcopy_dict(x, memo, deepcopy=deepcopy):', 'def _deepcopy_method(x, memo): # Copy instance methods', 'def _keep_alive(x, memo):', 'def _reconstruct(x, memo, func, args,', 'def replace(obj, /, **changes):']

Analyzed C:\dev\adn_trash_code\python_libs\copyreg.py:
Classes: ["class found there.  (This assumes classes don't modify their"]
Functions: ['def pickle(ob_type, pickle_function, constructor_ob=None):', 'def constructor(object):', 'def pickle_complex(c):', 'def pickle_union(obj):', 'def _reconstructor(cls, base, state):', 'def _reduce_ex(self, proto):', 'def __newobj__(cls, *args):', 'def __newobj_ex__(cls, args, kwargs):', 'def _slotnames(cls):', 'def add_extension(module, name, code):', 'def remove_extension(module, name, code):', 'def clear_extension_cache():']

Analyzed C:\dev\adn_trash_code\python_libs\cProfile.py:
Classes: ['class Profile(_lsprof.Profiler):']
Functions: ['def run(statement, filename=None, sort=-1):', 'def runctx(statement, globals, locals, filename=None, sort=-1):', 'def print_stats(self, sort=-1):', 'def dump_stats(self, file):', 'def create_stats(self):', 'def snapshot_stats(self):', 'def run(self, cmd):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kw):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def label(code):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\csv.py:
Classes: ['class excel:', 'class Dialect:', 'class excel(Dialect):', 'class excel_tab(excel):', 'class unix_dialect(Dialect):', 'class DictReader:', 'class DictWriter:', 'class Sniffer:', 'class dialect(Dialect):']
Functions: ['def __init__(self):', 'def _validate(self):', 'def __init__(self, f, fieldnames=None, restkey=None, restval=None,', 'def __iter__(self):', 'def fieldnames(self):', 'def fieldnames(self, value):', 'def __next__(self):', 'def __init__(self, f, fieldnames, restval="", extrasaction="raise",', 'def writeheader(self):', 'def _dict_to_list(self, rowdict):', 'def writerow(self, rowdict):', 'def writerows(self, rowdicts):', 'def __init__(self):', 'def sniff(self, sample, delimiters=None):', 'def _guess_quote_and_delimiter(self, data, delimiters):', 'def _guess_delimiter(self, data, delimiters):', 'def has_header(self, sample):']

Analyzed C:\dev\adn_trash_code\python_libs\dataclasses.py:
Classes: ['class FrozenInstanceError(AttributeError): pass', 'class _HAS_DEFAULT_FACTORY_CLASS:', 'class _MISSING_TYPE:', 'class _KW_ONLY_TYPE:', 'class _FIELD_BASE:', 'class InitVar:', 'class Field:', 'class _DataclassParams:', 'class _FuncBuilder:', 'class C:', 'class C:', 'class C(Base):', 'class C:']
Functions: ['def __repr__(self):', 'def __init__(self, name):', 'def __repr__(self):', 'def __init__(self, type):', 'def __repr__(self):', 'def __class_getitem__(cls, type):', 'def __init__(self, default, default_factory, init, repr, hash, compare,', 'def __repr__(self):', 'def __set_name__(self, owner, name):', 'def __init__(self,', 'def __repr__(self):', 'def field(*, default=MISSING, default_factory=MISSING, init=True, repr=True,', 'def _fields_in_init_order(fields):', 'def _tuple_str(obj_name, fields):', 'def __init__(self, globals):', 'def add_fn(self, name, args, body, *, locals=None, return_type=MISSING,', 'def add_fns_to_class(self, cls):', 'def _field_assign(frozen, name, value, self_name):', 'def _field_init(f, frozen, globals, self_name, slots):', 'def _init_param(f):', 'def _init_fn(fields, std_fields, kw_only_fields, frozen, has_post_init,', 'def _frozen_get_del_attr(cls, fields, func_builder):', 'def _is_classvar(a_type, typing):', 'def _is_initvar(a_type, dataclasses):', 'def _is_kw_only(a_type, dataclasses):', 'def _is_type(annotation, cls, a_module, a_type, is_type_predicate):', 'def _get_field(cls, a_name, a_type, default_kw_only):', 'def _set_new_attribute(cls, name, value):', 'def _hash_set_none(cls, fields, func_builder):', 'def _hash_add(cls, fields, func_builder):', 'def _hash_exception(cls, fields, func_builder):', 'def _process_class(cls, init, repr, eq, order, unsafe_hash, frozen,', 'def _dataclass_getstate(self):', 'def _dataclass_setstate(self, state):', 'def _get_slots(cls):', 'def _add_slots(cls, is_frozen, weakref_slot):', 'def dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False,', 'def wrap(cls):', 'def fields(class_or_instance):', 'def _is_dataclass_instance(obj):', 'def is_dataclass(obj):', 'def asdict(obj, *, dict_factory=dict):', 'def _asdict_inner(obj, dict_factory):', 'def astuple(obj, *, tuple_factory=tuple):', 'def _astuple_inner(obj, tuple_factory):', 'def make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True,', 'def exec_body_callback(ns):', 'def replace(obj, /, **changes):', 'def _replace(self, /, **changes):']

Analyzed C:\dev\adn_trash_code\python_libs\datetime.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\decimal.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\difflib.py:
Classes: ['class SequenceMatcher:', 'class Differ:', 'class HtmlDiff(object):']
Functions: ['def _calculate_ratio(matches, length):', "def __init__(self, isjunk=None, a='', b='', autojunk=True):", 'def set_seqs(self, a, b):', 'def set_seq1(self, a):', 'def set_seq2(self, b):', 'def __chain_b(self):', 'def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):', 'def get_matching_blocks(self):', 'def get_opcodes(self):', 'def get_grouped_opcodes(self, n=3):', 'def ratio(self):', 'def quick_ratio(self):', 'def real_quick_ratio(self):', 'def get_close_matches(word, possibilities, n=3, cutoff=0.6):', 'def _keep_original_ws(s, tag_s):', 'def __init__(self, linejunk=None, charjunk=None):', 'def compare(self, a, b):', 'def _dump(self, tag, x, lo, hi):', 'def _plain_replace(self, a, alo, ahi, b, blo, bhi):', 'def _fancy_replace(self, a, alo, ahi, b, blo, bhi):', 'def _fancy_helper(self, a, alo, ahi, b, blo, bhi):', 'def _qformat(self, aline, bline, atags, btags):', 'def IS_LINE_JUNK(line, pat=re.compile(r"\\s*(?:#\\s*)?$").match):', 'def IS_CHARACTER_JUNK(ch, ws=" \\t"):', 'def _format_range_unified(start, stop):', "def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',", 'def _format_range_context(start, stop):', "def context_diff(a, b, fromfile='', tofile='',", 'def _check_types(a, b, *args):', "def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',", 'def decode(s):', 'def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):', 'def _mdiff(fromlines, tolines, context=None, linejunk=None,', 'def _make_line(lines, format_key, side, num_lines=[0,0]):', 'def record_sub_info(match_object,sub_info=sub_info):', 'def _line_iterator():', 'def _line_pair_iterator():', 'def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,', "def make_file(self, fromlines, tolines, fromdesc='', todesc='',", 'def _tab_newline_replace(self,fromlines,tolines):', 'def expand_tabs(line):', 'def _split_line(self,data_list,line_num,text):', 'def _line_wrapper(self,diffs):', 'def _collect_lines(self,diffs):', 'def _format_line(self,side,flag,linenum,text):', 'def _make_prefix(self):', 'def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):', "def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,", 'def restore(delta, which):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\dis.py:
Classes: ['class _Unknown:', 'class _ExceptionTableEntry(_ExceptionTableEntryBase):', 'class Instruction(_Instruction):', 'class Formatter:', 'class ArgResolver:', 'class Bytecode:']
Functions: ['def _try_compile(source, name):', 'def dis(x=None, *, file=None, depth=None, show_caches=False, adaptive=False,', 'def distb(tb=None, *, file=None, show_caches=False, adaptive=False, show_offsets=False):', 'def pretty_flags(flags):', 'def __repr__(self):', 'def _get_code_object(x):', 'def _deoptop(op):', 'def _get_code_array(co, adaptive):', 'def code_info(x):', 'def _format_code_info(co):', 'def show_code(co, *, file=None):', 'def _get_cache_size(opname):', 'def _get_jump_target(op, arg, offset):', 'def oparg(self):', 'def baseopcode(self):', 'def baseopname(self):', 'def cache_offset(self):', 'def end_offset(self):', 'def jump_target(self):', 'def is_jump_target(self):', 'def __str__(self):', 'def __init__(self, file=None, lineno_width=0, offset_width=0, label_width=0,', 'def print_instruction(self, instr, mark_as_current=False):', 'def print_instruction_line(self, instr, mark_as_current):', 'def print_exception_table(self, exception_entries):', 'def __init__(self, co_consts=None, names=None, varname_from_oparg=None, labels_map=None):', 'def offset_from_jump_arg(self, op, arg, offset):', 'def get_label_for_offset(self, offset):', 'def get_argval_argrepr(self, op, arg, offset):', 'def get_instructions(x, *, first_line=None, show_caches=None, adaptive=False):', 'def _get_const_value(op, arg, co_consts):', 'def _get_const_info(op, arg, co_consts):', 'def _get_name_info(name_index, get_name, **extrainfo):', 'def _parse_varint(iterator):', 'def _parse_exception_table(code):', 'def _is_backward_jump(op):', 'def _get_instructions_bytes(code, linestarts=None, line_offset=0, co_positions=None,', 'def disassemble(co, lasti=-1, *, file=None, show_caches=False, adaptive=False,', 'def _disassemble_recursive(co, *, file=None, depth=None, show_caches=False, adaptive=False, show_offsets=False):', 'def _make_labels_map(original_code, exception_entries=()):', 'def _get_lineno_width(linestarts):', 'def _disassemble_bytes(code, lasti=-1, linestarts=None,', 'def print_instructions(instrs, exception_entries, formatter, lasti=-1):', 'def _disassemble_str(source, **kwargs):', 'def _unpack_opargs(code):', 'def findlabels(code):', 'def findlinestarts(code):', 'def _find_imports(co):', 'def _find_store_names(co):', 'def __init__(self, x, *, first_line=None, current_offset=None, show_caches=False, adaptive=False, show_offsets=False):', 'def __iter__(self):', 'def __repr__(self):', 'def from_traceback(cls, tb, *, show_caches=False, adaptive=False):', 'def info(self):', 'def dis(self):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\doctest.py:
Classes: ["class TestResults(namedtuple('TestResults', 'failed attempted')):", 'class _SpoofOut(StringIO):', 'class _OutputRedirectingPdb(pdb.Pdb):', 'class Example:', 'class DocTest:', 'class DocTestParser:', 'class DocTestFinder:', 'class DocTestRunner:', 'class OutputChecker:', 'class DocTestFailure(Exception):', 'class UnexpectedException(Exception):', 'class DebugRunner(DocTestRunner):', 'class doctest.Tester, then merges the results into (or creates)', 'class doctest.Tester, then merges the results into (or creates)', 'class DocTestCase(unittest.TestCase):', 'class SkipDocTestCase(DocTestCase):', 'class _DocTestSuite(unittest.TestSuite):', 'class DocFileCase(DocTestCase):', 'class _TestClass:']
Functions: ['def _test():', 'def __new__(cls, failed, attempted, *, skipped=0):', 'def __repr__(self):', 'def register_optionflag(name):', 'def _extract_future_flags(globs):', 'def _normalize_module(module, depth=2):', 'def _newline_convert(data):', 'def _load_testfile(filename, package, module_relative, encoding):', 'def _indent(s, indent=4):', 'def _exception_traceback(exc_info):', 'def getvalue(self):', 'def truncate(self, size=None):', 'def _ellipsis_match(want, got):', 'def _comment_line(line):', 'def _strip_exception_details(msg):', 'def __init__(self, out):', 'def set_trace(self, frame=None):', 'def set_continue(self):', 'def trace_dispatch(self, *args):', 'def _module_relative_path(module, test_path):', 'def __init__(self, source, want, exc_msg=None, lineno=0, indent=0,', 'def __eq__(self, other):', 'def __hash__(self):', 'def __init__(self, examples, globs, name, filename, lineno, docstring):', 'def __repr__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __lt__(self, other):', "def parse(self, string, name='<string>'):", 'def get_doctest(self, string, globs, name, filename, lineno):', "def get_examples(self, string, name='<string>'):", 'def _parse_example(self, m, name, lineno):', 'def _find_options(self, source, name, lineno):', 'def _min_indent(self, s):', 'def _check_prompt_blank(self, lines, indent, name, lineno):', 'def _check_prefix(self, lines, prefix, name, lineno):', 'def __init__(self, verbose=False, parser=DocTestParser(),', 'def find(self, obj, name=None, module=None, globs=None, extraglobs=None):', 'def _from_module(self, module, object):', 'def _is_routine(self, obj):', 'def _find(self, tests, obj, name, module, source_lines, globs, seen):', 'def _get_test(self, obj, name, module, globs, source_lines):', 'def _find_lineno(self, obj, source_lines):', 'def __init__(self, checker=None, verbose=None, optionflags=0):', 'def report_start(self, out, test, example):', 'def report_success(self, out, test, example, got):', 'def report_failure(self, out, test, example, got):', 'def report_unexpected_exception(self, out, test, example, exc_info):', 'def _failure_header(self, test, example):', 'def __run(self, test, compileflags, out):', 'def __record_outcome(self, test, failures, tries, skips):', 'def __patched_linecache_getlines(self, filename, module_globals=None):', 'def run(self, test, compileflags=None, out=None, clear_globs=True):', 'def out(s):', 'def summarize(self, verbose=None):', 'def merge(self, other):', 'def _n_items(items: list | dict) -> str:', 'def _toAscii(self, s):', 'def check_output(self, want, got, optionflags):', 'def _do_a_fancy_diff(self, want, got, optionflags):', 'def output_difference(self, example, got, optionflags):', 'def __init__(self, test, example, got):', 'def __str__(self):', 'def __init__(self, test, example, exc_info):', 'def __str__(self):', 'def run(self, test, compileflags=None, out=None, clear_globs=True):', 'def report_unexpected_exception(self, out, test, example, exc_info):', 'def report_failure(self, out, test, example, got):', 'def testmod(m=None, name=None, globs=None, verbose=None,', 'def testfile(filename, module_relative=True, name=None, package=None,', 'def run_docstring_examples(f, globs, verbose=False, name="NoName",', 'def set_unittest_reportflags(flags):', 'def __init__(self, test, optionflags=0, setUp=None, tearDown=None,', 'def setUp(self):', 'def tearDown(self):', 'def runTest(self):', 'def format_failure(self, err):', 'def debug(self):', 'def id(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def shortDescription(self):', 'def __init__(self, module):', 'def setUp(self):', 'def test_skip(self):', 'def shortDescription(self):', 'def _removeTestAtIndex(self, index):', 'def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None,', 'def id(self):', 'def __repr__(self):', 'def format_failure(self, err):', 'def DocFileTest(path, module_relative=True, package=None,', 'def DocFileSuite(*paths, **kw):', 'def script_from_examples(s):', 'def testsource(module, name):', 'def debug_src(src, pm=False, globs=None):', 'def debug_script(src, pm=False, globs=None):', 'def debug(module, name, pm=False):', 'def __init__(self, val):', 'def square(self):', 'def get(self):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\enum.py:
Classes: ['class nonmember(object):', 'class member(object):', 'class _not_given:', 'class _auto_null:', 'class auto:', 'class property(DynamicClassAttribute):', 'class _proto_member:', 'class EnumDict(dict):', 'class EnumType(type):', 'class Enum(metaclass=EnumType):', 'class ReprEnum(Enum):', 'class IntEnum(int, ReprEnum):', 'class StrEnum(str, ReprEnum):', 'class FlagBoundary(StrEnum):', 'class Flag(Enum, boundary=STRICT):', 'class IntFlag(int, ReprEnum, Flag, boundary=KEEP):', 'class EnumCheck:', 'class verify:']
Functions: ['def __init__(self, value):', 'def __init__(self, value):', 'def _is_descriptor(obj):', 'def _is_dunder(name):', 'def _is_sunder(name):', 'def _is_internal_class(cls_name, obj):', 'def _is_private(cls_name, name):', 'def _is_single_bit(num):', 'def _make_class_unpicklable(obj):', 'def _break_on_call_reduce(self, proto):', 'def _iter_bits_lsb(num):', 'def show_flag_values(value):', 'def bin(num, max_bits=None):', 'def _dedent(text):', 'def __repr__(self):', 'def __repr__(self):', 'def __init__(self, value=_auto_null):', 'def __repr__(self):', 'def __get__(self, instance, ownerclass=None):', 'def __set__(self, instance, value):', 'def __delete__(self, instance):', 'def __set_name__(self, ownerclass, name):', 'def __init__(self, value):', 'def __set_name__(self, enum_class, member_name):', 'def __init__(self, cls_name=None):', 'def __setitem__(self, key, value):', 'def member_names(self):', 'def update(self, members, **more_members):', 'def __prepare__(metacls, cls, bases, **kwds):', 'def __new__(metacls, cls, bases, classdict, *, boundary=None, _simple=False, **kwds):', 'def __bool__(cls):', 'def __call__(cls, value, names=_not_given, *values, module=None, qualname=None, type=None, start=1, boundary=None):', 'def __contains__(cls, value):', 'def __delattr__(cls, attr):', 'def __dir__(cls):', 'def __getitem__(cls, name):', 'def __iter__(cls):', 'def __len__(cls):', 'def __members__(cls):', 'def __repr__(cls):', 'def __reversed__(cls):', 'def __setattr__(cls, name, value):', 'def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1, boundary=None):', 'def _convert_(cls, name, module, filter, source=None, *, boundary=None, as_global=False):', 'def _check_for_existing_members_(mcls, class_name, bases):', 'def _get_mixins_(mcls, class_name, bases):', 'def _find_data_repr_(mcls, class_name, bases):', 'def _find_data_type_(mcls, class_name, bases):', 'def _find_new_(mcls, classdict, member_type, first_enum):', 'def _add_member_(cls, name, member):', 'def __signature__(cls):', 'def __new__(cls, value):', 'def __init__(self, *args, **kwds):', 'def _add_alias_(self, name):', 'def _add_value_alias_(self, value):', 'def _generate_next_value_(name, start, count, last_values):', 'def _missing_(cls, value):', 'def __repr__(self):', 'def __str__(self):', 'def __dir__(self):', 'def __format__(self, format_spec):', 'def __hash__(self):', 'def __reduce_ex__(self, proto):', 'def __deepcopy__(self,memo):', 'def __copy__(self):', 'def name(self):', 'def value(self):', 'def __new__(cls, *values):', 'def _generate_next_value_(name, start, count, last_values):', 'def pickle_by_global_name(self, proto):', 'def pickle_by_enum_name(self, proto):', 'def _generate_next_value_(name, start, count, last_values):', 'def _iter_member_by_value_(cls, value):', 'def _iter_member_by_def_(cls, value):', 'def _missing_(cls, value):', 'def __contains__(self, other):', 'def __iter__(self):', 'def __len__(self):', 'def __repr__(self):', 'def __str__(self):', 'def __bool__(self):', 'def _get_value(self, flag):', 'def __or__(self, other):', 'def __and__(self, other):', 'def __xor__(self, other):', 'def __invert__(self):', 'def _high_bit(value):', 'def unique(enumeration):', 'def _dataclass_repr(self):', 'def global_enum_repr(self):', 'def global_flag_repr(self):', 'def global_str(self):', 'def global_enum(cls, update_str=False):', 'def _simple_enum(etype=Enum, *, boundary=None, use_args=None):', 'def convert_class(cls):', 'def __init__(self, *checks):', 'def __call__(self, enumeration):', 'def _test_simple_enum(checked_enum, simple_enum):', 'def _old_convert_(etype, name, module, filter, source=None, *, boundary=None):']

Analyzed C:\dev\adn_trash_code\python_libs\filecmp.py:
Classes: ['class dircmp:']
Functions: ['def clear_cache():', 'def cmp(f1, f2, shallow=True):', 'def _sig(st):', 'def _do_cmp(f1, f2):', 'def __init__(self, a, b, ignore=None, hide=None, *, shallow=True): # Initialize', 'def phase0(self): # Compare everything except common subdirectories', 'def phase1(self): # Compute common names', 'def phase2(self): # Distinguish files, directories, funnies', 'def phase3(self): # Find out differences between common files', 'def phase4(self): # Find out differences between common subdirectories', 'def phase4_closure(self): # Recursively call phase4() on subdirectories', 'def report(self): # Print a report on the differences between a and b', 'def report_partial_closure(self): # Print reports on self and on subdirs', 'def report_full_closure(self): # Report on self and subdirs recursively', 'def __getattr__(self, attr):', 'def cmpfiles(a, b, common, shallow=True):', 'def _cmp(a, b, sh, abs=abs, cmp=cmp):', 'def _filter(flist, skip):', 'def demo():']

Analyzed C:\dev\adn_trash_code\python_libs\fileinput.py:
Classes: ['class FileInput:']
Functions: ['def input(files=None, inplace=False, backup="", *, mode="r", openhook=None,', 'def close():', 'def nextfile():', 'def filename():', 'def lineno():', 'def filelineno():', 'def fileno():', 'def isfirstline():', 'def isstdin():', 'def __init__(self, files=None, inplace=False, backup="", *,', 'def __del__(self):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def __iter__(self):', 'def __next__(self):', 'def nextfile(self):', 'def readline(self):', 'def _readline(self):', 'def filename(self):', 'def lineno(self):', 'def filelineno(self):', 'def fileno(self):', 'def isfirstline(self):', 'def isstdin(self):', 'def hook_compressed(filename, mode, *, encoding=None, errors=None):', 'def hook_encoded(encoding, errors=None):', 'def openhook(filename, mode):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\fnmatch.py:
Classes: []
Functions: ['def fnmatch(name, pat):', 'def _compile_pattern(pat):', 'def filter(names, pat):', 'def fnmatchcase(name, pat):', 'def translate(pat):', 'def _translate(pat, STAR, QUESTION_MARK):', 'def _join_translated_parts(inp, STAR):']

Analyzed C:\dev\adn_trash_code\python_libs\fractions.py:
Classes: ['class Fraction(numbers.Rational):', "class doesn't subclass a concrete type, there's no"]
Functions: ['def _hash_algorithm(numerator, denominator):', 'def _round_to_exponent(n, d, exponent, no_neg_zero=False):', 'def _round_to_figures(n, d, figures):', 'def __new__(cls, numerator=0, denominator=None):', 'def from_float(cls, f):', 'def from_decimal(cls, dec):', 'def _from_coprime_ints(cls, numerator, denominator, /):', 'def is_integer(self):', 'def as_integer_ratio(self):', 'def limit_denominator(self, max_denominator=1000000):', 'def numerator(a):', 'def denominator(a):', 'def __repr__(self):', 'def __str__(self):', 'def _format_general(self, match):', 'def _format_float_style(self, match):', 'def __format__(self, format_spec, /):', 'def _operator_fallbacks(monomorphic_operator, fallback_operator,', 'def __add__(self, other):', 'def __radd__(self, other):', 'def forward(a, b):', 'def reverse(b, a):', 'def _add(a, b):', 'def _sub(a, b):', 'def _mul(a, b):', 'def _div(a, b):', 'def _floordiv(a, b):', 'def _divmod(a, b):', 'def _mod(a, b):', 'def __pow__(a, b):', 'def __rpow__(b, a):', 'def __pos__(a):', 'def __neg__(a):', 'def __abs__(a):', 'def __int__(a, _index=operator.index):', 'def __trunc__(a):', 'def __floor__(a):', 'def __ceil__(a):', 'def __round__(self, ndigits=None):', 'def __hash__(self):', 'def __eq__(a, b):', 'def _richcmp(self, other, op):', 'def __lt__(a, b):', 'def __gt__(a, b):', 'def __le__(a, b):', 'def __ge__(a, b):', 'def __bool__(a):', 'def __reduce__(self):', 'def __copy__(self):', 'def __deepcopy__(self, memo):']

Analyzed C:\dev\adn_trash_code\python_libs\ftplib.py:
Classes: ['class Error(Exception): pass', 'class error_reply(Error): pass          # unexpected [123]xx reply', 'class error_temp(Error): pass           # 4xx errors', 'class error_perm(Error): pass           # 5xx errors', 'class error_proto(Error): pass          # response does not begin with [1-5]', 'class FTP:', 'class FTP_TLS(FTP):']
Functions: ["def __init__(self, host='', user='', passwd='', acct='',", 'def __enter__(self):', 'def __exit__(self, *args):', "def connect(self, host='', port=0, timeout=-999, source_address=None):", 'def getwelcome(self):', 'def set_debuglevel(self, level):', 'def set_pasv(self, val):', 'def sanitize(self, s):', 'def putline(self, line):', 'def putcmd(self, line):', 'def getline(self):', 'def getmultiline(self):', 'def getresp(self):', 'def voidresp(self):', 'def abort(self):', 'def sendcmd(self, cmd):', 'def voidcmd(self, cmd):', 'def sendport(self, host, port):', 'def sendeprt(self, host, port):', 'def makeport(self):', 'def makepasv(self):', 'def ntransfercmd(self, cmd, rest=None):', 'def transfercmd(self, cmd, rest=None):', "def login(self, user = '', passwd = '', acct = ''):", 'def retrbinary(self, cmd, callback, blocksize=8192, rest=None):', 'def retrlines(self, cmd, callback = None):', 'def storbinary(self, cmd, fp, blocksize=8192, callback=None, rest=None):', 'def storlines(self, cmd, fp, callback=None):', 'def acct(self, password):', 'def nlst(self, *args):', 'def dir(self, *args):', 'def mlsd(self, path="", facts=[]):', 'def rename(self, fromname, toname):', 'def delete(self, filename):', 'def cwd(self, dirname):', 'def size(self, filename):', 'def mkd(self, dirname):', 'def rmd(self, dirname):', 'def pwd(self):', 'def quit(self):', 'def close(self):', "def __init__(self, host='', user='', passwd='', acct='',", "def login(self, user='', passwd='', acct='', secure=True):", 'def auth(self):', 'def ccc(self):', 'def prot_p(self):', 'def prot_c(self):', 'def ntransfercmd(self, cmd, rest=None):', 'def abort(self):', 'def parse150(resp):', 'def parse227(resp):', 'def parse229(resp, peer):', 'def parse257(resp):', 'def print_line(line):', "def ftpcp(source, sourcename, target, targetname = '', type = 'I'):", 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\functools.py:
Classes: ['class K(object):', 'class partial:', 'class partialmethod(object):', 'class _HashedSeq(list):', 'class singledispatchmethod:', 'class cached_property:']
Functions: ['def update_wrapper(wrapper,', 'def wraps(wrapped,', 'def _gt_from_lt(self, other):', 'def _le_from_lt(self, other):', 'def _ge_from_lt(self, other):', 'def _ge_from_le(self, other):', 'def _lt_from_le(self, other):', 'def _gt_from_le(self, other):', 'def _lt_from_gt(self, other):', 'def _ge_from_gt(self, other):', 'def _le_from_gt(self, other):', 'def _le_from_ge(self, other):', 'def _gt_from_ge(self, other):', 'def _lt_from_ge(self, other):', 'def total_ordering(cls):', 'def cmp_to_key(mycmp):', 'def __init__(self, obj):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __ge__(self, other):', 'def reduce(function, sequence, initial=_initial_missing):', 'def __new__(cls, func, /, *args, **keywords):', 'def __call__(self, /, *args, **keywords):', 'def __repr__(self):', 'def __get__(self, obj, objtype=None):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def __init__(self, func, /, *args, **keywords):', 'def __repr__(self):', 'def _make_unbound_method(self):', 'def _method(cls_or_self, /, *args, **keywords):', 'def __get__(self, obj, cls=None):', 'def __isabstractmethod__(self):', 'def _unwrap_partial(func):', 'def _unwrap_partialmethod(func):', 'def __init__(self, tup, hash=hash):', 'def __hash__(self):', 'def _make_key(args, kwds, typed,', 'def lru_cache(maxsize=128, typed=False):', 'def decorating_function(user_function):', 'def _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo):', 'def wrapper(*args, **kwds):', 'def wrapper(*args, **kwds):', 'def wrapper(*args, **kwds):', 'def cache_info():', 'def cache_clear():', 'def cache(user_function, /):', 'def _c3_merge(sequences):', 'def _c3_mro(cls, abcs=None):', 'def _compose_mro(cls, types):', 'def is_related(typ):', 'def is_strict_base(typ):', 'def _find_impl(cls, registry):', 'def singledispatch(func):', 'def dispatch(cls):', 'def _is_union_type(cls):', 'def _is_valid_dispatch_type(cls):', 'def register(cls, func=None):', 'def wrapper(*args, **kw):', 'def __init__(self, func):', 'def register(self, cls, method=None):', 'def __get__(self, obj, cls=None):', 'def _method(*args, **kwargs):', 'def __isabstractmethod__(self):', 'def __init__(self, func):', 'def __set_name__(self, owner, name):', 'def __get__(self, instance, owner=None):']

Analyzed C:\dev\adn_trash_code\python_libs\genericpath.py:
Classes: []
Functions: ['def exists(path):', 'def lexists(path):', 'def isfile(path):', 'def isdir(s):', 'def islink(path):', 'def isjunction(path):', 'def isdevdrive(path):', 'def getsize(filename):', 'def getmtime(filename):', 'def getatime(filename):', 'def getctime(filename):', 'def commonprefix(m):', 'def samestat(s1, s2):', 'def samefile(f1, f2):', 'def sameopenfile(fp1, fp2):', 'def _splitext(p, sep, altsep, extsep):', 'def _check_arg_types(funcname, *args):']

Analyzed C:\dev\adn_trash_code\python_libs\getopt.py:
Classes: ['class GetoptError(Exception):']
Functions: ['def _(s): return s', "def __init__(self, msg, opt=''):", 'def __str__(self):', 'def getopt(args, shortopts, longopts = []):', 'def gnu_getopt(args, shortopts, longopts = []):', 'def do_longs(opts, opt, longopts, args):', 'def long_has_args(opt, longopts):', 'def do_shorts(opts, optstring, shortopts, args):', 'def short_has_arg(opt, shortopts):']

Analyzed C:\dev\adn_trash_code\python_libs\getpass.py:
Classes: ['class GetPassWarning(UserWarning): pass']
Functions: ["def unix_getpass(prompt='Password: ', stream=None):", "def win_getpass(prompt='Password: ', stream=None):", "def fallback_getpass(prompt='Password: ', stream=None):", 'def _raw_input(prompt="", stream=None, input=None):', 'def getuser():']

Analyzed C:\dev\adn_trash_code\python_libs\gettext.py:
Classes: ['class NullTranslations:', 'class GNUTranslations(NullTranslations):']
Functions: ['def _tokenize(plural):', 'def _error(value):', 'def _parse(tokens, priority=-1):', 'def _as_int(n):', 'def _as_int2(n):', 'def c2py(plural):', 'def func(n):', 'def _expand_lang(loc):', 'def __init__(self, fp=None):', 'def _parse(self, fp):', 'def add_fallback(self, fallback):', 'def gettext(self, message):', 'def ngettext(self, msgid1, msgid2, n):', 'def pgettext(self, context, message):', 'def npgettext(self, context, msgid1, msgid2, n):', 'def info(self):', 'def charset(self):', 'def install(self, names=None):', 'def _get_versions(self, version):', 'def _parse(self, fp):', 'def gettext(self, message):', 'def ngettext(self, msgid1, msgid2, n):', 'def pgettext(self, context, message):', 'def npgettext(self, context, msgid1, msgid2, n):', 'def find(domain, localedir=None, languages=None, all=False):', 'def translation(domain, localedir=None, languages=None,', 'def install(domain, localedir=None, *, names=None):', 'def textdomain(domain=None):', 'def bindtextdomain(domain, localedir=None):', 'def dgettext(domain, message):', 'def dngettext(domain, msgid1, msgid2, n):', 'def dpgettext(domain, context, message):', 'def dnpgettext(domain, context, msgid1, msgid2, n):', 'def gettext(message):', 'def ngettext(msgid1, msgid2, n):', 'def pgettext(context, message):', 'def npgettext(context, msgid1, msgid2, n):']

Analyzed C:\dev\adn_trash_code\python_libs\glob.py:
Classes: ['class _Globber:', 'class _StringGlobber(_Globber):']
Functions: ['def glob(pathname, *, root_dir=None, dir_fd=None, recursive=False,', 'def iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False,', 'def _iglob(pathname, root_dir, dir_fd, recursive, dironly,', 'def _glob1(dirname, pattern, dir_fd, dironly, include_hidden=False):', 'def _glob0(dirname, basename, dir_fd, dironly, include_hidden=False):', 'def glob0(dirname, pattern):', 'def glob1(dirname, pattern):', 'def _glob2(dirname, pattern, dir_fd, dironly, include_hidden=False):', 'def _iterdir(dirname, dir_fd, dironly):', 'def _listdir(dirname, dir_fd, dironly):', 'def _rlistdir(dirname, dir_fd, dironly, include_hidden=False):', 'def _lexists(pathname, dir_fd):', 'def _isdir(pathname, dir_fd):', 'def _join(dirname, basename):', 'def has_magic(s):', 'def _ishidden(path):', 'def _isrecursive(pattern):', 'def escape(pathname):', 'def translate(pat, *, recursive=False, include_hidden=False, seps=None):', 'def _compile_pattern(pat, sep, case_sensitive, recursive=True):', 'def __init__(self, sep, case_sensitive, case_pedantic=False, recursive=False):', 'def scandir(path):', 'def concat_path(path, text):', 'def parse_entry(entry):', 'def compile(self, pat):', 'def selector(self, parts):', 'def special_selector(self, part, parts):', 'def select_special(path, exists=False):', 'def literal_selector(self, part, parts):', 'def select_literal(path, exists=False):', 'def wildcard_selector(self, part, parts):', 'def select_wildcard(path, exists=False):', 'def recursive_selector(self, part, parts):', 'def select_recursive(path, exists=False):', 'def select_recursive_step(stack, match_pos):', 'def select_exists(self, path, exists=False):', 'def add_slash(pathname):', 'def add_slash(pathname):']

Analyzed C:\dev\adn_trash_code\python_libs\graphlib.py:
Classes: ['class _NodeInfo:', 'class CycleError(ValueError):', 'class TopologicalSorter:']
Functions: ['def __init__(self, node):', 'def __init__(self, graph=None):', 'def _get_nodeinfo(self, node):', 'def add(self, node, *predecessors):', 'def prepare(self):', 'def get_ready(self):', 'def is_active(self):', 'def __bool__(self):', 'def done(self, *nodes):', 'def _find_cycle(self):', 'def static_order(self):']

Analyzed C:\dev\adn_trash_code\python_libs\gzip.py:
Classes: ['class _PaddedFile:', 'class BadGzipFile(OSError):', 'class _WriteBufferStream(io.RawIOBase):', 'class GzipFile(_compression.BaseStream):', 'class _GzipReader(_compression.DecompressReader):']
Functions: ['def open(filename, mode="rb", compresslevel=_COMPRESS_LEVEL_BEST,', 'def write32u(output, value):', "def __init__(self, f, prepend=b''):", 'def read(self, size):', "def prepend(self, prepend=b''):", 'def seek(self, off):', 'def seekable(self):', 'def __init__(self, gzip_file):', 'def write(self, data):', 'def seekable(self):', 'def writable(self):', 'def __init__(self, filename=None, mode=None,', 'def mtime(self):', 'def __repr__(self):', 'def _init_write(self, filename):', 'def tell(self):', 'def _write_gzip_header(self, compresslevel):', 'def write(self,data):', 'def _write_raw(self, data):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def peek(self, n):', 'def closed(self):', 'def close(self):', 'def flush(self,zlib_mode=zlib.Z_SYNC_FLUSH):', 'def fileno(self):', 'def rewind(self):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def readline(self, size=-1):', 'def _read_exact(fp, n):', 'def _read_gzip_header(fp):', 'def __init__(self, fp):', 'def _init_read(self):', 'def _read_gzip_header(self):', 'def read(self, size=-1):', 'def _read_eof(self):', 'def _rewind(self):', 'def compress(data, compresslevel=_COMPRESS_LEVEL_BEST, *, mtime=None):', 'def decompress(data):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\hashlib.py:
Classes: []
Functions: ['def __get_builtin_constructor(name):', 'def __get_openssl_constructor(name):', "def __py_new(name, data=b'', **kwargs):", "def __hash_new(name, data=b'', **kwargs):", 'def file_digest(fileobj, digest, /, *, _bufsize=2**18):']

Analyzed C:\dev\adn_trash_code\python_libs\heapq.py:
Classes: []
Functions: ['def heappush(heap, item):', 'def heappop(heap):', 'def heapreplace(heap, item):', 'def heappushpop(heap, item):', 'def heapify(x):', 'def _heappop_max(heap):', 'def _heapreplace_max(heap, item):', 'def _heapify_max(x):', 'def _siftdown(heap, startpos, pos):', 'def _siftup(heap, pos):', 'def _siftdown_max(heap, startpos, pos):', 'def _siftup_max(heap, pos):', 'def merge(*iterables, key=None, reverse=False):', 'def nsmallest(n, iterable, key=None):', 'def nlargest(n, iterable, key=None):']

Analyzed C:\dev\adn_trash_code\python_libs\hmac.py:
Classes: ['class HMAC:']
Functions: ["def __init__(self, key, msg=None, digestmod=''):", 'def _init_hmac(self, key, msg, digestmod):', 'def _init_old(self, key, msg, digestmod):', 'def name(self):', 'def update(self, msg):', 'def copy(self):', 'def _current(self):', 'def digest(self):', 'def hexdigest(self):', "def new(key, msg=None, digestmod=''):", 'def digest(key, msg, digest):']

Analyzed C:\dev\adn_trash_code\python_libs\imaplib.py:
Classes: ['class IMAP4:', 'class error(Exception): pass    # Logical errors - debug required', 'class abort(error): pass        # Service errors - close and retry', 'class readonly(abort): pass     # Mailbox status changed to READ-ONLY', 'class IMAP4_SSL(IMAP4):', 'class IMAP4_stream(IMAP4):', 'class _Authenticator:']
Functions: ["def __init__(self, host='', port=IMAP4_PORT, timeout=None):", 'def _mode_ascii(self):', 'def _mode_utf8(self):', 'def _connect(self):', 'def __getattr__(self, attr):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _create_socket(self, timeout):', "def open(self, host='', port=IMAP4_PORT, timeout=None):", 'def read(self, size):', 'def readline(self):', 'def send(self, data):', 'def shutdown(self):', 'def socket(self):', 'def recent(self):', 'def response(self, code):', 'def append(self, mailbox, flags, date_time, message):', 'def authenticate(self, mechanism, authobject):', 'def capability(self):', 'def check(self):', 'def close(self):', 'def copy(self, message_set, new_mailbox):', 'def create(self, mailbox):', 'def delete(self, mailbox):', 'def deleteacl(self, mailbox, who):', 'def enable(self, capability):', 'def expunge(self):', 'def fetch(self, message_set, message_parts):', 'def getacl(self, mailbox):', 'def getannotation(self, mailbox, entry, attribute):', 'def getquota(self, root):', 'def getquotaroot(self, mailbox):', 'def list(self, directory=\'""\', pattern=\'*\'):', 'def login(self, user, password):', 'def login_cram_md5(self, user, password):', 'def _CRAM_MD5_AUTH(self, challenge):', 'def logout(self):', 'def lsub(self, directory=\'""\', pattern=\'*\'):', 'def myrights(self, mailbox):', 'def namespace(self):', 'def noop(self):', 'def partial(self, message_num, message_part, start, length):', 'def proxyauth(self, user):', 'def rename(self, oldmailbox, newmailbox):', 'def search(self, charset, *criteria):', "def select(self, mailbox='INBOX', readonly=False):", 'def setacl(self, mailbox, who, what):', 'def setannotation(self, *args):', 'def setquota(self, root, limits):', 'def sort(self, sort_criteria, charset, *search_criteria):', 'def starttls(self, ssl_context=None):', 'def status(self, mailbox, names):', 'def store(self, message_set, command, flags):', 'def subscribe(self, mailbox):', 'def thread(self, threading_algorithm, charset, *search_criteria):', 'def uid(self, command, *args):', 'def unsubscribe(self, mailbox):', 'def unselect(self):', 'def xatom(self, name, *args):', 'def _append_untagged(self, typ, dat):', 'def _check_bye(self):', 'def _command(self, name, *args):', 'def _command_complete(self, name, tag):', 'def _get_capabilities(self):', 'def _get_response(self):', 'def _get_tagged_response(self, tag, expect_bye=False):', 'def _get_line(self):', 'def _match(self, cre, s):', 'def _new_tag(self):', 'def _quote(self, arg):', 'def _simple_command(self, name, *args):', 'def _untagged_response(self, typ, dat, name):', 'def _mesg(self, s, secs=None):', 'def _dump_ur(self, untagged_resp_dict):', 'def _log(self, line):', 'def print_log(self):', "def __init__(self, host='', port=IMAP4_SSL_PORT,", 'def _create_socket(self, timeout):', "def open(self, host='', port=IMAP4_SSL_PORT, timeout=None):", 'def __init__(self, command):', 'def open(self, host=None, port=None, timeout=None):', 'def read(self, size):', 'def readline(self):', 'def send(self, data):', 'def shutdown(self):', 'def __init__(self, mechinst):', 'def process(self, data):', 'def encode(self, inp):', 'def decode(self, inp):', 'def Internaldate2tuple(resp):', 'def Int2AP(num):', 'def ParseFlags(resp):', 'def Time2Internaldate(date_time):', 'def run(cmd, args):']

Analyzed C:\dev\adn_trash_code\python_libs\inspect.py:
Classes: ['class ClassFoundException(Exception):', 'class EndOfBlock(Exception): pass', 'class BlockFinder:', 'class Traceback(_Traceback):', 'class FrameInfo(_FrameInfo):', 'class RewriteSymbolics(ast.NodeTransformer):', 'class _void:', 'class _empty:', 'class _ParameterKind(enum.IntEnum):', 'class Parameter:', 'class BoundArguments:', 'class Signature:', 'class BufferFlags(enum.IntFlag):']
Functions: ['def get_annotations(obj, *, globals=None, locals=None, eval_str=False):', 'def ismodule(object):', 'def isclass(object):', 'def ismethod(object):', 'def ismethoddescriptor(object):', 'def isdatadescriptor(object):', 'def ismemberdescriptor(object):', 'def ismemberdescriptor(object):', 'def isgetsetdescriptor(object):', 'def isgetsetdescriptor(object):', 'def isfunction(object):', 'def _has_code_flag(f, flag):', 'def isgeneratorfunction(obj):', 'def _has_coroutine_mark(f):', 'def markcoroutinefunction(func):', 'def iscoroutinefunction(obj):', 'def isasyncgenfunction(obj):', 'def isasyncgen(object):', 'def isgenerator(object):', 'def iscoroutine(object):', 'def isawaitable(object):', 'def istraceback(object):', 'def isframe(object):', 'def iscode(object):', 'def isbuiltin(object):', 'def ismethodwrapper(object):', 'def isroutine(object):', 'def isabstract(object):', 'def _getmembers(object, predicate, getter):', 'def getmembers(object, predicate=None):', 'def getmembers_static(object, predicate=None):', 'def classify_class_attrs(cls):', 'def getmro(cls):', 'def unwrap(func, *, stop=None):', 'def indentsize(line):', 'def _findclass(func):', 'def _finddoc(obj):', 'def getdoc(object):', 'def cleandoc(doc):', 'def getfile(object):', 'def getmodulename(path):', 'def getsourcefile(object):', 'def getabsfile(object, _filename=None):', 'def getmodule(object, _filename=None):', 'def findsource(object):', 'def getcomments(object):', 'def __init__(self):', 'def tokeneater(self, type, token, srowcol, erowcol, line):', 'def getblock(lines):', 'def getsourcelines(object):', 'def getsource(object):', 'def walktree(classes, children, parent):', 'def getclasstree(classes, unique=False):', 'def getargs(co):', 'def getfullargspec(func):', 'def getargvalues(frame):', 'def formatannotation(annotation, base_module=None):', 'def repl(match):', 'def formatannotationrelativeto(object):', 'def _formatannotation(annotation):', 'def formatargvalues(args, varargs, varkw, locals,', 'def convert(name, locals=locals,', 'def _missing_arguments(f_name, argnames, pos, values):', 'def _too_many(f_name, args, kwonly, varargs, defcount, given, values):', 'def getcallargs(func, /, *positional, **named):', 'def getclosurevars(func):', 'def __new__(cls, filename, lineno, function, code_context, index, *, positions=None):', 'def __repr__(self):', 'def _get_code_position_from_tb(tb):', 'def _get_code_position(code, instruction_index):', 'def getframeinfo(frame, context=1):', 'def getlineno(frame):', 'def __new__(cls, frame, filename, lineno, function, code_context, index, *, positions=None):', 'def __repr__(self):', 'def getouterframes(frame, context=1):', 'def getinnerframes(tb, context=1):', 'def currentframe():', 'def stack(context=1):', 'def trace(context=1):', 'def _check_instance(obj, attr):', 'def _check_class(klass, attr):', 'def _shadowed_dict_from_weakref_mro_tuple(*weakref_mro):', 'def _shadowed_dict(klass):', 'def getattr_static(obj, attr, default=_sentinel):', 'def getgeneratorstate(generator):', 'def getgeneratorlocals(generator):', 'def getcoroutinestate(coroutine):', 'def getcoroutinelocals(coroutine):', 'def getasyncgenstate(agen):', 'def getasyncgenlocals(agen):', 'def _signature_get_user_defined_method(cls, method_name):', 'def _signature_get_partial(wrapped_sig, partial, extra_args=()):', 'def _signature_bound_method(sig):', 'def _signature_is_builtin(obj):', 'def _signature_is_functionlike(obj):', 'def _signature_strip_non_python_syntax(signature):', 'def _signature_fromstr(cls, obj, s, skip_bound_arg=True):', 'def parse_name(node):', 'def wrap_value(s):', 'def visit_Attribute(self, node):', 'def visit_Name(self, node):', 'def visit_BinOp(self, node):', 'def p(name_node, default_node, default=empty):', 'def _signature_from_builtin(cls, func, skip_bound_arg=True):', 'def _signature_from_function(cls, func, skip_bound_arg=True,', 'def _descriptor_get(descriptor, obj):', 'def _signature_from_callable(obj, *,', 'def __new__(cls, description):', 'def __str__(self):', 'def __init__(self, name, kind, *, default=_empty, annotation=_empty):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def name(self):', 'def default(self):', 'def annotation(self):', 'def kind(self):', 'def replace(self, *, name=_void, kind=_void,', 'def __str__(self):', 'def __repr__(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __init__(self, signature, arguments):', 'def signature(self):', 'def args(self):', 'def kwargs(self):', 'def apply_defaults(self):', 'def __eq__(self, other):', 'def __setstate__(self, state):', 'def __getstate__(self):', 'def __repr__(self):', 'def __init__(self, parameters=None, *, return_annotation=_empty,', 'def from_callable(cls, obj, *,', 'def parameters(self):', 'def return_annotation(self):', 'def replace(self, *, parameters=_void, return_annotation=_void):', 'def _hash_basis(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def _bind(self, args, kwargs, *, partial=False):', 'def bind(self, /, *args, **kwargs):', 'def bind_partial(self, /, *args, **kwargs):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def __repr__(self):', 'def __str__(self):', 'def format(self, *, max_width=None):', 'def signature(obj, *, follow_wrapped=True, globals=None, locals=None, eval_str=False):', 'def _main():']

Analyzed C:\dev\adn_trash_code\python_libs\io.py:
Classes: ['class IOBase(_io._IOBase, metaclass=abc.ABCMeta):', 'class RawIOBase(_io._RawIOBase, IOBase):', 'class BufferedIOBase(_io._BufferedIOBase, IOBase):', 'class TextIOBase(_io._TextIOBase, IOBase):']
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\ipaddress.py:
Classes: ['class AddressValueError(ValueError):', 'class NetmaskValueError(ValueError):', 'class _IPAddressBase:', 'class _BaseAddress(_IPAddressBase):', 'class _BaseNetwork(_IPAddressBase):', 'class _BaseConstants:', 'class _BaseV4:', 'class IPv4Address(_BaseV4, _BaseAddress):', 'class IPv4Interface(IPv4Address):', 'class IPv4Network(_BaseV4, _BaseNetwork):', 'class _IPv4Constants:', 'class _BaseV6:', 'class IPv6Address(_BaseV6, _BaseAddress):', 'class IPv6Interface(IPv6Address):', 'class IPv6Network(_BaseV6, _BaseNetwork):', 'class _IPv6Constants:']
Functions: ['def ip_address(address):', 'def ip_network(address, strict=True):', 'def ip_interface(address):', 'def v4_int_to_packed(address):', 'def v6_int_to_packed(address):', 'def _split_optional_netmask(address):', 'def _find_address_range(addresses):', 'def _count_righthand_zero_bits(number, bits):', 'def summarize_address_range(first, last):', 'def _collapse_addresses_internal(addresses):', 'def collapse_addresses(addresses):', 'def get_mixed_type_key(obj):', 'def exploded(self):', 'def compressed(self):', 'def reverse_pointer(self):', 'def version(self):', 'def _check_int_address(self, address):', 'def _check_packed_address(self, address, expected_len):', 'def _ip_int_from_prefix(cls, prefixlen):', 'def _prefix_from_ip_int(cls, ip_int):', 'def _report_invalid_netmask(cls, netmask_str):', 'def _prefix_from_prefix_string(cls, prefixlen_str):', 'def _prefix_from_ip_string(cls, ip_str):', 'def _split_addr_prefix(cls, address):', 'def __reduce__(self):', 'def __int__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __repr__(self):', 'def __str__(self):', 'def __hash__(self):', 'def _get_address_key(self):', 'def __reduce__(self):', 'def __format__(self, fmt):', 'def __repr__(self):', 'def __str__(self):', 'def hosts(self):', 'def __iter__(self):', 'def __getitem__(self, n):', 'def __lt__(self, other):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __contains__(self, other):', 'def overlaps(self, other):', 'def broadcast_address(self):', 'def hostmask(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def num_addresses(self):', 'def _address_class(self):', 'def prefixlen(self):', 'def address_exclude(self, other):', 'def compare_networks(self, other):', 'def _get_networks_key(self):', 'def subnets(self, prefixlen_diff=1, new_prefix=None):', 'def supernet(self, prefixlen_diff=1, new_prefix=None):', 'def is_multicast(self):', 'def _is_subnet_of(a, b):', 'def subnet_of(self, other):', 'def supernet_of(self, other):', 'def is_reserved(self):', 'def is_link_local(self):', 'def is_private(self):', 'def is_global(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def _explode_shorthand_ip_string(self):', 'def _make_netmask(cls, arg):', 'def _ip_int_from_string(cls, ip_str):', 'def _parse_octet(cls, octet_str):', 'def _string_from_ip_int(cls, ip_int):', 'def _reverse_pointer(self):', 'def max_prefixlen(self):', 'def version(self):', 'def __init__(self, address):', 'def packed(self):', 'def is_reserved(self):', 'def is_private(self):', 'def is_global(self):', 'def is_multicast(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def is_link_local(self):', 'def ipv6_mapped(self):', 'def __init__(self, address):', 'def hostmask(self):', 'def __str__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def ip(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def __init__(self, address, strict=True):', 'def is_global(self):', 'def _make_netmask(cls, arg):', 'def _ip_int_from_string(cls, ip_str):', 'def _parse_hextet(cls, hextet_str):', 'def _compress_hextets(cls, hextets):', 'def _string_from_ip_int(cls, ip_int=None):', 'def _explode_shorthand_ip_string(self):', 'def _reverse_pointer(self):', 'def _split_scope_id(ip_str):', 'def max_prefixlen(self):', 'def version(self):', 'def __init__(self, address):', 'def _explode_shorthand_ip_string(self):', 'def _reverse_pointer(self):', 'def _ipv4_mapped_ipv6_to_str(self):', 'def __str__(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __reduce__(self):', 'def scope_id(self):', 'def packed(self):', 'def is_multicast(self):', 'def is_reserved(self):', 'def is_link_local(self):', 'def is_site_local(self):', 'def is_private(self):', 'def is_global(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def ipv4_mapped(self):', 'def teredo(self):', 'def sixtofour(self):', 'def __init__(self, address):', 'def hostmask(self):', 'def __str__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def ip(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def __init__(self, address, strict=True):', 'def hosts(self):', 'def is_site_local(self):']

Analyzed C:\dev\adn_trash_code\python_libs\keyword.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\linecache.py:
Classes: []
Functions: ['def clearcache():', 'def getline(filename, lineno, module_globals=None):', 'def getlines(filename, module_globals=None):', 'def checkcache(filename=None):', 'def updatecache(filename, module_globals=None):', 'def lazycache(filename, module_globals):', 'def get_lines(name=name, *args, **kwargs):', 'def _register_code(code, string, name):']

Analyzed C:\dev\adn_trash_code\python_libs\locale.py:
Classes: []
Functions: ['def _strcoll(a,b):', 'def _strxfrm(s):', 'def localeconv():', 'def setlocale(category, value=None):', 'def localeconv():', 'def _grouping_intervals(grouping):', 'def _group(s, monetary=False):', 'def _strip_padding(s, amount):', 'def _format(percent, value, grouping=False, monetary=False, *additional):', 'def _localize(formatted, grouping=False, monetary=False):', 'def format_string(f, val, grouping=False, monetary=False):', 'def currency(val, symbol=True, grouping=False, international=False):', 'def str(val):', 'def delocalize(string):', 'def localize(string, grouping=False, monetary=False):', 'def atof(string, func=float):', 'def atoi(string):', 'def _test():', 'def _replace_encoding(code, encoding):', 'def _append_modifier(code, modifier):', 'def normalize(localename):', 'def _parse_localename(localename):', 'def _build_localename(localetuple):', "def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):", "def _getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):", 'def getlocale(category=LC_CTYPE):', 'def setlocale(category, locale=None):', 'def getencoding():', 'def getpreferredencoding(do_setlocale=True):', 'def getpreferredencoding(do_setlocale=True):', 'def _print_locale():', 'def _init_categories(categories=categories):']

Analyzed C:\dev\adn_trash_code\python_libs\lzma.py:
Classes: ['class LZMAFile(_compression.BaseStream):']
Functions: ['def __init__(self, filename=None, mode="r", *,', 'def close(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def fileno(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def peek(self, size=-1):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readline(self, size=-1):', 'def write(self, data):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):', 'def open(filename, mode="rb", *,', 'def compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None):', 'def decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None):']

Analyzed C:\dev\adn_trash_code\python_libs\mailbox.py:
Classes: ['class Mailbox:', 'class Maildir(Mailbox):', 'class _singlefileMailbox(Mailbox):', 'class _mboxMMDF(_singlefileMailbox):', 'class mbox(_mboxMMDF):', 'class MMDF(_mboxMMDF):', 'class MH(Mailbox):', 'class Babyl(_singlefileMailbox):', 'class Message(email.message.Message):', 'class MaildirMessage(Message):', 'class _mboxMMDFMessage(Message):', 'class mboxMessage(_mboxMMDFMessage):', 'class MHMessage(Message):', 'class BabylMessage(Message):', 'class MMDFMessage(_mboxMMDFMessage):', 'class _ProxyFile:', 'class _PartialFile(_ProxyFile):', 'class Error(Exception):', 'class NoSuchMailboxError(Error):', 'class NotEmptyError(Error):', 'class ExternalClashError(Error):', 'class FormatError(Error):']
Functions: ['def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __delitem__(self, key):', 'def discard(self, key):', 'def __setitem__(self, key, message):', 'def get(self, key, default=None):', 'def __getitem__(self, key):', 'def get_message(self, key):', 'def get_string(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def iterkeys(self):', 'def keys(self):', 'def itervalues(self):', 'def __iter__(self):', 'def values(self):', 'def iteritems(self):', 'def items(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def clear(self):', 'def pop(self, key, default=None):', 'def popitem(self):', 'def update(self, arg=None):', 'def flush(self):', 'def lock(self):', 'def unlock(self):', 'def close(self):', 'def _string_to_bytes(self, message):', 'def _dump_message(self, message, target, mangle_from_=False):', 'def __init__(self, dirname, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def discard(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def get_info(self, key):', 'def set_info(self, key, info: str):', 'def get_flags(self, key):', 'def set_flags(self, key, flags: str):', 'def add_flag(self, key, flag: str):', 'def remove_flag(self, key, flag: str):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def flush(self):', 'def lock(self):', 'def unlock(self):', 'def close(self):', 'def list_folders(self):', 'def get_folder(self, folder):', 'def add_folder(self, folder):', 'def remove_folder(self, folder):', 'def clean(self):', 'def _create_tmp(self):', 'def _refresh(self):', 'def _lookup(self, key):', 'def next(self):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def lock(self):', 'def unlock(self):', 'def flush(self):', 'def _pre_mailbox_hook(self, f):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def close(self):', 'def _lookup(self, key=None):', 'def _append_message(self, message):', 'def get_message(self, key):', 'def get_string(self, key, from_=False):', 'def get_bytes(self, key, from_=False):', 'def get_file(self, key, from_=False):', 'def _install_message(self, message):', 'def __init__(self, path, factory=None, create=True):', 'def _post_message_hook(self, f):', 'def _generate_toc(self):', 'def __init__(self, path, factory=None, create=True):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def _generate_toc(self):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def _open_mh_sequences_file(self, text):', 'def lock(self):', 'def unlock(self):', 'def flush(self):', 'def close(self):', 'def list_folders(self):', 'def get_folder(self, folder):', 'def add_folder(self, folder):', 'def remove_folder(self, folder):', 'def get_sequences(self):', 'def set_sequences(self, sequences):', 'def pack(self):', 'def _dump_sequences(self, message, key):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def get_labels(self):', 'def _generate_toc(self):', 'def _pre_mailbox_hook(self, f):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def _install_message(self, message):', 'def __init__(self, message=None):', 'def _become_message(self, message):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_subdir(self):', 'def set_subdir(self, subdir):', 'def get_flags(self):', 'def set_flags(self, flags):', 'def add_flag(self, flag):', 'def remove_flag(self, flag):', 'def get_date(self):', 'def set_date(self, date):', 'def get_info(self):', 'def set_info(self, info):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_from(self):', 'def set_from(self, from_, time_=None):', 'def get_flags(self):', 'def set_flags(self, flags):', 'def add_flag(self, flag):', 'def remove_flag(self, flag):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_sequences(self):', 'def set_sequences(self, sequences):', 'def add_sequence(self, sequence):', 'def remove_sequence(self, sequence):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_labels(self):', 'def set_labels(self, labels):', 'def add_label(self, label):', 'def remove_label(self, label):', 'def get_visible(self):', 'def set_visible(self, visible):', 'def update_visible(self):', 'def _explain_to(self, message):', 'def __init__(self, f, pos=None):', 'def read(self, size=None):', 'def read1(self, size=None):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __iter__(self):', 'def tell(self):', 'def seek(self, offset, whence=0):', 'def close(self):', 'def _read(self, size, read_method):', 'def __enter__(self):', 'def __exit__(self, *exc):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def flush(self):', 'def closed(self):', 'def __init__(self, f, start=None, stop=None):', 'def tell(self):', 'def seek(self, offset, whence=0):', 'def _read(self, size, read_method):', 'def close(self):', 'def _lock_file(f, dotlock=True):', 'def _unlock_file(f):', 'def _create_carefully(path):', 'def _create_temporary(path):', 'def _sync_flush(f):', 'def _sync_close(f):']

Analyzed C:\dev\adn_trash_code\python_libs\mimetypes.py:
Classes: ['class MimeTypes:']
Functions: ['def __init__(self, filenames=(), strict=True):', 'def add_type(self, type, ext, strict=True):', 'def guess_type(self, url, strict=True):', 'def guess_file_type(self, path, *, strict=True):', 'def _guess_file_type(self, path, strict, splitext):', 'def guess_all_extensions(self, type, strict=True):', 'def guess_extension(self, type, strict=True):', 'def read(self, filename, strict=True):', 'def readfp(self, fp, strict=True):', 'def read_windows_registry(self, strict=True):', 'def _read_windows_registry(cls, add_type):', 'def enum_types(mimedb):', 'def guess_type(url, strict=True):', 'def guess_file_type(path, *, strict=True):', 'def guess_all_extensions(type, strict=True):', 'def guess_extension(type, strict=True):', 'def add_type(type, ext, strict=True):', 'def init(files=None):', 'def read_mime_types(file):', 'def _default_mime_types():', 'def _main():', "def usage(code, msg=''):"]

Analyzed C:\dev\adn_trash_code\python_libs\modulefinder.py:
Classes: ['class Module:', 'class ModuleFinder:']
Functions: ['def AddPackagePath(packagename, path):', 'def ReplacePackage(oldname, newname):', 'def _find_module(name, path=None):', 'def __init__(self, name, file=None, path=None):', 'def __repr__(self):', 'def __init__(self, path=None, debug=0, excludes=None, replace_paths=None):', 'def msg(self, level, str, *args):', 'def msgin(self, *args):', 'def msgout(self, *args):', 'def run_script(self, pathname):', 'def load_file(self, pathname):', 'def import_hook(self, name, caller=None, fromlist=None, level=-1):', 'def determine_parent(self, caller, level=-1):', 'def find_head_package(self, parent, name):', 'def load_tail(self, q, tail):', 'def ensure_fromlist(self, m, fromlist, recursive=0):', 'def find_all_submodules(self, m):', 'def import_module(self, partname, fqname, parent):', 'def load_module(self, fqname, fp, pathname, file_info):', 'def _add_badmodule(self, name, caller):', 'def _safe_import_hook(self, name, caller, fromlist, level=-1):', 'def scan_opcodes(self, co):', 'def scan_code(self, co, m):', 'def load_package(self, fqname, pathname):', 'def add_module(self, fqname):', 'def find_module(self, name, path, parent=None):', 'def report(self):', 'def any_missing(self):', 'def any_missing_maybe(self):', 'def replace_paths_in_code(self, co):', 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\netrc.py:
Classes: ['class NetrcParseError(Exception):', 'class _netrclex:', 'class netrc:']
Functions: ['def __init__(self, msg, filename=None, lineno=None):', 'def __str__(self):', 'def __init__(self, fp):', 'def _read_char(self):', 'def get_token(self):', 'def push_token(self, token):', 'def __init__(self, file=None):', 'def _parse(self, file, fp, default_netrc):', 'def _security_check(self, fp, default_netrc, login):', 'def authenticators(self, host):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\ntpath.py:
Classes: []
Functions: ['def _get_bothseps(path):', 'def normcase(s):', 'def normcase(s):', 'def isabs(s):', 'def join(path, *paths):', 'def splitdrive(p):', 'def splitroot(p):', 'def split(p):', 'def splitext(p):', 'def basename(p):', 'def dirname(p):', 'def ismount(path):', 'def isreserved(path):', 'def _isreservedname(name):', 'def expanduser(path):', 'def expandvars(path):', 'def normpath(path):', 'def abspath(path):', 'def abspath(path):', 'def _readlink_deep(path):', 'def _getfinalpathname_nonstrict(path):', 'def realpath(path, *, strict=False):', 'def relpath(path, start=None):', 'def commonpath(paths):', 'def isdevdrive(path):']

Analyzed C:\dev\adn_trash_code\python_libs\nturl2path.py:
Classes: []
Functions: ['def url2pathname(url):', 'def pathname2url(p):']

Analyzed C:\dev\adn_trash_code\python_libs\numbers.py:
Classes: ['class Number(metaclass=ABCMeta):', 'class Complex(Number):', 'class Real(Complex):', 'class Rational(Real):', 'class Integral(Rational):']
Functions: ['def __complex__(self):', 'def __bool__(self):', 'def real(self):', 'def imag(self):', 'def __add__(self, other):', 'def __radd__(self, other):', 'def __neg__(self):', 'def __pos__(self):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __mul__(self, other):', 'def __rmul__(self, other):', 'def __truediv__(self, other):', 'def __rtruediv__(self, other):', 'def __pow__(self, exponent):', 'def __rpow__(self, base):', 'def __abs__(self):', 'def conjugate(self):', 'def __eq__(self, other):', 'def __float__(self):', 'def __trunc__(self):', 'def __floor__(self):', 'def __ceil__(self):', 'def __round__(self, ndigits=None):', 'def __divmod__(self, other):', 'def __rdivmod__(self, other):', 'def __floordiv__(self, other):', 'def __rfloordiv__(self, other):', 'def __mod__(self, other):', 'def __rmod__(self, other):', 'def __lt__(self, other):', 'def __le__(self, other):', 'def __complex__(self):', 'def real(self):', 'def imag(self):', 'def conjugate(self):', 'def numerator(self):', 'def denominator(self):', 'def __float__(self):', 'def __int__(self):', 'def __index__(self):', 'def __pow__(self, exponent, modulus=None):', 'def __lshift__(self, other):', 'def __rlshift__(self, other):', 'def __rshift__(self, other):', 'def __rrshift__(self, other):', 'def __and__(self, other):', 'def __rand__(self, other):', 'def __xor__(self, other):', 'def __rxor__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __invert__(self):', 'def __float__(self):', 'def numerator(self):', 'def denominator(self):']

Analyzed C:\dev\adn_trash_code\python_libs\opcode.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\operator.py:
Classes: ['class attrgetter:', 'class itemgetter:', 'class methodcaller:']
Functions: ['def lt(a, b):', 'def le(a, b):', 'def eq(a, b):', 'def ne(a, b):', 'def ge(a, b):', 'def gt(a, b):', 'def not_(a):', 'def truth(a):', 'def is_(a, b):', 'def is_not(a, b):', 'def abs(a):', 'def add(a, b):', 'def and_(a, b):', 'def floordiv(a, b):', 'def index(a):', 'def inv(a):', 'def lshift(a, b):', 'def mod(a, b):', 'def mul(a, b):', 'def matmul(a, b):', 'def neg(a):', 'def or_(a, b):', 'def pos(a):', 'def pow(a, b):', 'def rshift(a, b):', 'def sub(a, b):', 'def truediv(a, b):', 'def xor(a, b):', 'def concat(a, b):', 'def contains(a, b):', 'def countOf(a, b):', 'def delitem(a, b):', 'def getitem(a, b):', 'def indexOf(a, b):', 'def setitem(a, b, c):', 'def length_hint(obj, default=0):', 'def call(obj, /, *args, **kwargs):', 'def __init__(self, attr, /, *attrs):', 'def func(obj):', 'def func(obj):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def __init__(self, item, /, *items):', 'def func(obj):', 'def func(obj):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def __init__(self, name, /, *args, **kwargs):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def iadd(a, b):', 'def iand(a, b):', 'def iconcat(a, b):', 'def ifloordiv(a, b):', 'def ilshift(a, b):', 'def imod(a, b):', 'def imul(a, b):', 'def imatmul(a, b):', 'def ior(a, b):', 'def ipow(a, b):', 'def irshift(a, b):', 'def isub(a, b):', 'def itruediv(a, b):', 'def ixor(a, b):']

Analyzed C:\dev\adn_trash_code\python_libs\optparse.py:
Classes: ['class OptParseError (Exception):', 'class OptionError (OptParseError):', 'class OptionConflictError (OptionError):', 'class OptionValueError (OptParseError):', 'class BadOptionError (OptParseError):', 'class AmbiguousOptionError (BadOptionError):', 'class HelpFormatter:', 'class IndentedHelpFormatter (HelpFormatter):', 'class TitledHelpFormatter (HelpFormatter):', 'class Option:', 'class Values:', 'class OptionContainer:', 'class OptionGroup (OptionContainer):', 'class OptionParser (OptionContainer):', 'class documentation description of the attribute']
Functions: ['def _repr(self):', 'def gettext(message):', 'def ngettext(singular, plural, n):', 'def __init__(self, msg):', 'def __str__(self):', 'def __init__(self, msg, option):', 'def __str__(self):', 'def __init__(self, opt_str):', 'def __str__(self):', 'def __init__(self, opt_str, possibilities):', 'def __str__(self):', 'def __init__(self,', 'def set_parser(self, parser):', 'def set_short_opt_delimiter(self, delim):', 'def set_long_opt_delimiter(self, delim):', 'def indent(self):', 'def dedent(self):', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def _format_text(self, text):', 'def format_description(self, description):', 'def format_epilog(self, epilog):', 'def expand_default(self, option):', 'def format_option(self, option):', 'def store_option_strings(self, parser):', 'def format_option_strings(self, option):', 'def __init__(self,', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def __init__(self,', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def _parse_num(val, type):', 'def _parse_int(val):', 'def check_builtin(option, opt, value):', 'def check_choice(option, opt, value):', 'def __init__(self, *opts, **attrs):', 'def _check_opt_strings(self, opts):', 'def _set_opt_strings(self, opts):', 'def _set_attrs(self, attrs):', 'def _check_action(self):', 'def _check_type(self):', 'def _check_choice(self):', 'def _check_dest(self):', 'def _check_const(self):', 'def _check_nargs(self):', 'def _check_callback(self):', 'def __str__(self):', 'def takes_value(self):', 'def get_opt_string(self):', 'def check_value(self, opt, value):', 'def convert_value(self, opt, value):', 'def process(self, opt, value, values, parser):', 'def take_action(self, action, dest, opt, value, values, parser):', 'def __init__(self, defaults=None):', 'def __str__(self):', 'def __eq__(self, other):', 'def _update_careful(self, dict):', 'def _update_loose(self, dict):', 'def _update(self, dict, mode):', 'def read_module(self, modname, mode="careful"):', 'def read_file(self, filename, mode="careful"):', 'def ensure_value(self, attr, value):', 'def __init__(self, option_class, conflict_handler, description):', 'def _create_option_mappings(self):', 'def _share_option_mappings(self, parser):', 'def set_conflict_handler(self, handler):', 'def set_description(self, description):', 'def get_description(self):', 'def destroy(self):', 'def _check_conflict(self, option):', 'def add_option(self, *args, **kwargs):', 'def add_options(self, option_list):', 'def get_option(self, opt_str):', 'def has_option(self, opt_str):', 'def remove_option(self, opt_str):', 'def format_option_help(self, formatter):', 'def format_description(self, formatter):', 'def format_help(self, formatter):', 'def __init__(self, parser, title, description=None):', 'def _create_option_list(self):', 'def set_title(self, title):', 'def destroy(self):', 'def format_help(self, formatter):', 'def __init__(self,', 'def destroy(self):', 'def _create_option_list(self):', 'def _add_help_option(self):', 'def _add_version_option(self):', 'def _populate_option_list(self, option_list, add_help=True):', 'def _init_parsing_state(self):', 'def set_usage(self, usage):', 'def enable_interspersed_args(self):', 'def disable_interspersed_args(self):', 'def set_process_default_values(self, process):', 'def set_default(self, dest, value):', 'def set_defaults(self, **kwargs):', 'def _get_all_options(self):', 'def get_default_values(self):', 'def add_option_group(self, *args, **kwargs):', 'def get_option_group(self, opt_str):', 'def _get_args(self, args):', 'def parse_args(self, args=None, values=None):', 'def check_values(self, values, args):', 'def _process_args(self, largs, rargs, values):', 'def _match_long_opt(self, opt):', 'def _process_long_opt(self, rargs, values):', 'def _process_short_opts(self, rargs, values):', 'def get_prog_name(self):', 'def expand_prog_name(self, s):', 'def get_description(self):', 'def exit(self, status=0, msg=None):', 'def error(self, msg):', 'def get_usage(self):', 'def print_usage(self, file=None):', 'def get_version(self):', 'def print_version(self, file=None):', 'def format_option_help(self, formatter=None):', 'def format_epilog(self, formatter):', 'def format_help(self, formatter=None):', 'def print_help(self, file=None):', 'def _match_abbrev(s, wordmap):']

Analyzed C:\dev\adn_trash_code\python_libs\os.py:
Classes: ['class _Environ(MutableMapping):', 'class _wrap_close:', 'class PathLike(abc.ABC):', 'class _AddedDllDirectory:']
Functions: ['def _exists(name):', 'def _get_exports_list(module):', 'def _add(str, fn):', 'def makedirs(name, mode=0o777, exist_ok=False):', 'def removedirs(name):', 'def renames(old, new):', 'def walk(top, topdown=True, onerror=None, followlinks=False):', 'def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):', 'def _fwalk(stack, isbytes, topdown, onerror, follow_symlinks):', 'def execl(file, *args):', 'def execle(file, *args):', 'def execlp(file, *args):', 'def execlpe(file, *args):', 'def execvp(file, args):', 'def execvpe(file, args, env):', 'def _execvpe(file, args, env=None):', 'def get_exec_path(env=None):', 'def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __iter__(self):', 'def __len__(self):', 'def __repr__(self):', 'def copy(self):', 'def setdefault(self, key, value):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def _createenviron():', 'def check_str(value):', 'def encodekey(key):', 'def encode(value):', 'def decode(value):', 'def getenv(key, default=None):', 'def _check_bytes(value):', 'def getenvb(key, default=None):', 'def _fscodec():', 'def fsencode(filename):', 'def fsdecode(filename):', 'def _spawnvef(mode, file, args, env, func):', 'def spawnv(mode, file, args):', 'def spawnve(mode, file, args, env):', 'def spawnvp(mode, file, args):', 'def spawnvpe(mode, file, args, env):', 'def spawnl(mode, file, *args):', 'def spawnle(mode, file, *args):', 'def spawnlp(mode, file, *args):', 'def spawnlpe(mode, file, *args):', 'def popen(cmd, mode="r", buffering=-1):', 'def __init__(self, stream, proc):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __getattr__(self, name):', 'def __iter__(self):', 'def fdopen(fd, mode="r", buffering=-1, encoding=None, *args, **kwargs):', 'def _fspath(path):', 'def __fspath__(self):', 'def __subclasshook__(cls, subclass):', 'def __init__(self, path, cookie, remove_dll_directory):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def add_dll_directory(path):', 'def process_cpu_count():']

Analyzed C:\dev\adn_trash_code\python_libs\pdb.py:
Classes: ['class Restart(Exception):', 'class _rstr(str):', 'class _ExecutableTarget:', 'class _ScriptTarget(_ExecutableTarget):', 'class _ModuleTarget(_ExecutableTarget):', 'class _ZipTarget(_ExecutableTarget):', 'class _PdbInteractiveConsole(code.InteractiveConsole):', 'class Pdb(bdb.Bdb, cmd.Cmd):']
Functions: ['def find_first_executable_line(code):', 'def find_function(funcname, filename):', 'def lasti2lineno(code, lasti):', 'def __repr__(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, ns, message):', 'def write(self, data):', "def __init__(self, completekey='tab', stdin=None, stdout=None, skip=None,", 'def sigint_handler(self, signum, frame):', 'def reset(self):', 'def forget(self):', 'def setup(self, f, tb):', 'def user_call(self, frame, argument_list):', 'def user_line(self, frame):', 'def bp_commands(self, frame):', 'def user_return(self, frame, return_value):', 'def user_exception(self, frame, exc_info):', 'def _cmdloop(self):', 'def _validate_file_mtime(self):', 'def _show_display(self):', 'def _get_tb_and_exceptions(self, tb_or_exc):', 'def _hold_exceptions(self, exceptions):', 'def interaction(self, frame, tb_or_exc):', 'def displayhook(self, obj):', 'def _disable_command_completion(self):', 'def _exec_in_closure(self, source, globals, locals):', 'def default(self, line):', 'def _replace_convenience_variables(self, line):', 'def precmd(self, line):', 'def onecmd(self, line):', 'def handle_command_def(self, line):', "def message(self, msg, end='\\n'):", 'def error(self, msg):', 'def set_convenience_variable(self, frame, name, value):', 'def completenames(self, text, line, begidx, endidx):', 'def _complete_location(self, text, line, begidx, endidx):', 'def _complete_bpnumber(self, text, line, begidx, endidx):', 'def _complete_expression(self, text, line, begidx, endidx):', 'def completedefault(self, text, line, begidx, endidx):', 'def _pdbcmd_print_frame_status(self, arg):', 'def do_commands(self, arg):', 'def do_break(self, arg, temporary = 0):', 'def defaultFile(self):', 'def do_tbreak(self, arg):', 'def lineinfo(self, identifier):', 'def checkline(self, filename, lineno):', 'def do_enable(self, arg):', 'def do_disable(self, arg):', 'def do_condition(self, arg):', 'def do_ignore(self, arg):', 'def do_clear(self, arg):', 'def do_where(self, arg):', 'def _select_frame(self, number):', 'def do_exceptions(self, arg):', 'def do_up(self, arg):', 'def do_down(self, arg):', 'def do_until(self, arg):', 'def do_step(self, arg):', 'def do_next(self, arg):', 'def do_run(self, arg):', 'def do_return(self, arg):', 'def do_continue(self, arg):', 'def do_jump(self, arg):', 'def do_debug(self, arg):', 'def do_quit(self, arg):', 'def do_EOF(self, arg):', 'def do_args(self, arg):', 'def do_retval(self, arg):', 'def _getval(self, arg):', 'def _getval_except(self, arg, frame=None):', 'def _error_exc(self):', 'def _msg_val_func(self, arg, func):', 'def _safe_repr(self, obj, expr):', 'def do_p(self, arg):', 'def do_pp(self, arg):', 'def do_list(self, arg):', 'def do_longlist(self, arg):', 'def do_source(self, arg):', 'def _print_lines(self, lines, start, breaks=(), frame=None):', 'def do_whatis(self, arg):', 'def do_display(self, arg):', 'def do_undisplay(self, arg):', 'def complete_undisplay(self, text, line, begidx, endidx):', 'def do_interact(self, arg):', 'def do_alias(self, arg):', 'def do_unalias(self, arg):', 'def complete_unalias(self, text, line, begidx, endidx):', 'def print_stack_trace(self):', 'def print_stack_entry(self, frame_lineno, prompt_prefix=line_prefix):', 'def do_help(self, arg):', 'def help_exec(self):', 'def help_pdb(self):', 'def lookupmodule(self, filename):', 'def _run(self, target: _ExecutableTarget):', 'def _format_exc(self, exc: BaseException):', 'def _compile_error_message(self, expr):', 'def _getsourcelines(self, obj):', 'def _help_message_from_doc(self, doc, usage_only=False):', 'def _print_invalid_arg(self, arg):', 'def run(statement, globals=None, locals=None):', 'def runeval(expression, globals=None, locals=None):', 'def runctx(statement, globals, locals):', 'def runcall(*args, **kwds):', 'def set_trace(*, header=None):', 'def post_mortem(t=None):', 'def _post_mortem(t, pdb_instance):', 'def pm():', 'def test():', 'def help():', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\pickle.py:
Classes: ['class PickleError(Exception):', 'class PicklingError(PickleError):', 'class UnpicklingError(PickleError):', 'class _Stop(Exception):', 'class _Framer:', 'class _Unframer:', 'class _Pickler:', 'class _Unpickler:']
Functions: ['def __init__(self, value):', 'def __init__(self, file_write):', 'def start_framing(self):', 'def end_framing(self):', 'def commit_frame(self, force=False):', 'def write(self, data):', 'def write_large_bytes(self, header, payload):', 'def __init__(self, file_read, file_readline, file_tell=None):', 'def readinto(self, buf):', 'def read(self, n):', 'def readline(self):', 'def load_frame(self, frame_size):', 'def _getattribute(obj, name):', 'def whichmodule(obj, name):', 'def encode_long(x):', 'def decode_long(data):', 'def __init__(self, file, protocol=None, *, fix_imports=True,', 'def clear_memo(self):', 'def dump(self, obj):', 'def memoize(self, obj):', 'def put(self, idx):', 'def get(self, i):', 'def save(self, obj, save_persistent_id=True):', 'def persistent_id(self, obj):', 'def save_pers(self, pid):', 'def save_reduce(self, func, args, state=None, listitems=None,', 'def save_none(self, obj):', 'def save_bool(self, obj):', 'def save_long(self, obj):', 'def save_float(self, obj):', 'def _save_bytes_no_memo(self, obj):', 'def save_bytes(self, obj):', 'def _save_bytearray_no_memo(self, obj):', 'def save_bytearray(self, obj):', 'def save_picklebuffer(self, obj):', 'def save_str(self, obj):', 'def save_tuple(self, obj):', 'def save_list(self, obj):', 'def _batch_appends(self, items):', 'def save_dict(self, obj):', 'def _batch_setitems(self, items):', 'def save_set(self, obj):', 'def save_frozenset(self, obj):', 'def save_global(self, obj, name=None):', 'def _save_toplevel_by_name(self, module_name, name):', 'def save_type(self, obj):', 'def __init__(self, file, *, fix_imports=True,', 'def load(self):', 'def pop_mark(self):', 'def persistent_load(self, pid):', 'def load_proto(self):', 'def load_frame(self):', 'def load_persid(self):', 'def load_binpersid(self):', 'def load_none(self):', 'def load_false(self):', 'def load_true(self):', 'def load_int(self):', 'def load_binint(self):', 'def load_binint1(self):', 'def load_binint2(self):', 'def load_long(self):', 'def load_long1(self):', 'def load_long4(self):', 'def load_float(self):', 'def load_binfloat(self):', 'def _decode_string(self, value):', 'def load_string(self):', 'def load_binstring(self):', 'def load_binbytes(self):', 'def load_unicode(self):', 'def load_binunicode(self):', 'def load_binunicode8(self):', 'def load_binbytes8(self):', 'def load_bytearray8(self):', 'def load_next_buffer(self):', 'def load_readonly_buffer(self):', 'def load_short_binstring(self):', 'def load_short_binbytes(self):', 'def load_short_binunicode(self):', 'def load_tuple(self):', 'def load_empty_tuple(self):', 'def load_tuple1(self):', 'def load_tuple2(self):', 'def load_tuple3(self):', 'def load_empty_list(self):', 'def load_empty_dictionary(self):', 'def load_empty_set(self):', 'def load_frozenset(self):', 'def load_list(self):', 'def load_dict(self):', 'def _instantiate(self, klass, args):', 'def load_inst(self):', 'def load_obj(self):', 'def load_newobj(self):', 'def load_newobj_ex(self):', 'def load_global(self):', 'def load_stack_global(self):', 'def load_ext1(self):', 'def load_ext2(self):', 'def load_ext4(self):', 'def get_extension(self, code):', 'def find_class(self, module, name):', 'def load_reduce(self):', 'def load_pop(self):', 'def load_pop_mark(self):', 'def load_dup(self):', 'def load_get(self):', 'def load_binget(self):', 'def load_long_binget(self):', 'def load_put(self):', 'def load_binput(self):', 'def load_long_binput(self):', 'def load_memoize(self):', 'def load_append(self):', 'def load_appends(self):', 'def load_setitem(self):', 'def load_setitems(self):', 'def load_additems(self):', 'def load_build(self):', 'def load_mark(self):', 'def load_stop(self):', 'def _dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None):', 'def _dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None):', 'def _load(file, *, fix_imports=True, encoding="ASCII", errors="strict",', 'def _loads(s, /, *, fix_imports=True, encoding="ASCII", errors="strict",', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\pickletools.py:
Classes: ['class ArgumentDescriptor(object):', 'class StackObject(object):', 'class OpcodeInfo(object):', 'class _Example:']
Functions: ['def __init__(self, name, n, reader, doc):', 'def read_uint1(f):', 'def read_uint2(f):', 'def read_int4(f):', 'def read_uint4(f):', 'def read_uint8(f):', "def read_stringnl(f, decode=True, stripquotes=True, *, encoding='latin-1'):", 'def read_stringnl_noescape(f):', 'def read_stringnl_noescape_pair(f):', 'def read_string1(f):', 'def read_string4(f):', 'def read_bytes1(f):', 'def read_bytes4(f):', 'def read_bytes8(f):', 'def read_bytearray8(f):', 'def read_unicodestringnl(f):', 'def read_unicodestring1(f):', 'def read_unicodestring4(f):', 'def read_unicodestring8(f):', 'def read_decimalnl_short(f):', 'def read_decimalnl_long(f):', 'def read_floatnl(f):', 'def read_float8(f):', 'def read_long1(f):', 'def read_long4(f):', 'def __init__(self, name, obtype, doc):', 'def __repr__(self):', 'def __init__(self, name, code, arg,', 'def assure_pickle_consistency(verbose=False):', 'def _genops(data, yield_end_pos=False):', 'def genops(pickle):', 'def optimize(p):', 'def dis(pickle, out=None, memo=None, indentlevel=4, annotate=0):', 'def __init__(self, value):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\pkgutil.py:
Classes: []
Functions: ['def read_code(stream):', "def walk_packages(path=None, prefix='', onerror=None):", 'def seen(p, m={}):', "def iter_modules(path=None, prefix=''):", "def iter_importer_modules(importer, prefix=''):", "def _iter_file_finder_modules(importer, prefix=''):", "def iter_zipimport_modules(importer, prefix=''):", 'def get_importer(path_item):', 'def iter_importers(fullname=""):', 'def get_loader(module_or_name):', 'def find_loader(fullname):', 'def extend_path(path, name):', 'def get_data(package, resource):', 'def resolve_name(name):']

Analyzed C:\dev\adn_trash_code\python_libs\platform.py:
Classes: ['class _Processor:', 'class uname_result(']
Functions: ['def _comparable_version(version):', "def libc_ver(executable=None, lib='', version='', chunksize=16384):", "def _norm_version(version, build=''):", "def _syscmd_ver(system='', release='', version='',", 'def _wmi_query(table, *keys):', 'def win32_is_iot():', 'def win32_edition():', 'def _win32_ver(version, csd, ptype):', "def win32_ver(release='', version='', csd='', ptype=''):", 'def _mac_ver_xml():', "def mac_ver(release='', versioninfo=('', '', ''), machine=''):", 'def ios_ver(system="", release="", model="", is_simulator=False):', 'def _java_getprop(name, default):', "def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):", 'def android_ver(release="", api_level=0, manufacturer="", model="", device="",', 'def getprop(name, default):', 'def system_alias(system, release, version):', 'def _platform(*args):', "def _node(default=''):", 'def _follow_symlinks(filepath):', "def _syscmd_file(target, default=''):", "def architecture(executable=sys.executable, bits='', linkage=''):", 'def _get_machine_win32():', 'def get(cls):', 'def get_win32():', 'def get_OpenVMS():', 'def get_ios():', 'def from_subprocess():', 'def _unknown_as_blank(val):', 'def processor(self):', 'def __iter__(self):', 'def _make(cls, iterable):', 'def __getitem__(self, key):', 'def __len__(self):', 'def __reduce__(self):', 'def uname():', 'def system():', 'def node():', 'def release():', 'def version():', 'def machine():', 'def processor():', 'def _sys_version(sys_version=None):', 'def python_implementation():', 'def python_version():', 'def python_version_tuple():', 'def python_branch():', 'def python_revision():', 'def python_build():', 'def python_compiler():', 'def platform(aliased=False, terse=False):', 'def _parse_os_release(lines):', 'def freedesktop_os_release():']

Analyzed C:\dev\adn_trash_code\python_libs\plistlib.py:
Classes: ['class UID:', 'class _PlistParser:', 'class _DumbXMLWriter:', 'class _PlistWriter(_DumbXMLWriter):', 'class InvalidFileException (ValueError):', 'class _BinaryPlistParser:', 'class _BinaryPlistWriter (object):']
Functions: ['def __init__(self, data):', 'def __index__(self):', 'def __repr__(self):', 'def __reduce__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def _encode_base64(s, maxlinelength=76):', 'def _decode_base64(s):', 'def _date_from_string(s, aware_datetime):', 'def _date_to_string(d, aware_datetime):', 'def _escape(text):', 'def __init__(self, dict_type, aware_datetime=False):', 'def parse(self, fileobj):', 'def handle_entity_decl(self, entity_name, is_parameter_entity, value, base, system_id, public_id, notation_name):', 'def handle_begin_element(self, element, attrs):', 'def handle_end_element(self, element):', 'def handle_data(self, data):', 'def add_object(self, value):', 'def get_data(self):', 'def begin_dict(self, attrs):', 'def end_dict(self):', 'def end_key(self):', 'def begin_array(self, attrs):', 'def end_array(self):', 'def end_true(self):', 'def end_false(self):', 'def end_integer(self):', 'def end_real(self):', 'def end_string(self):', 'def end_data(self):', 'def end_date(self):', 'def __init__(self, file, indent_level=0, indent="\\t"):', 'def begin_element(self, element):', 'def end_element(self, element):', 'def simple_element(self, element, value=None):', 'def writeln(self, line):', 'def __init__(', 'def write(self, value):', 'def write_value(self, value):', 'def write_bytes(self, data):', 'def write_dict(self, d):', 'def write_array(self, array):', 'def _is_fmt_xml(header):', 'def __init__(self, message="Invalid file"):', 'def __init__(self, dict_type, aware_datetime=False):', 'def parse(self, fp):', 'def _get_size(self, tokenL):', 'def _read_ints(self, n, size):', 'def _read_refs(self, n):', 'def _read_object(self, ref):', 'def _count_to_size(count):', 'def __init__(self, fp, sort_keys, skipkeys, aware_datetime=False):', 'def write(self, value):', 'def _flatten(self, value):', 'def _getrefnum(self, value):', 'def _write_size(self, token, size):', 'def _write_object(self, value):', 'def _is_fmt_binary(header):', 'def load(fp, *, fmt=None, dict_type=dict, aware_datetime=False):', 'def loads(value, *, fmt=None, dict_type=dict, aware_datetime=False):', 'def dump(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False,', 'def dumps(value, *, fmt=FMT_XML, skipkeys=False, sort_keys=True,']

Analyzed C:\dev\adn_trash_code\python_libs\poplib.py:
Classes: ['class error_proto(Exception): pass', 'class POP3:', 'class POP3_SSL(POP3):']
Functions: ['def __init__(self, host, port=POP3_PORT,', 'def _create_socket(self, timeout):', 'def _putline(self, line):', 'def _putcmd(self, line):', 'def _getline(self):', 'def _getresp(self):', 'def _getlongresp(self):', 'def _shortcmd(self, line):', 'def _longcmd(self, line):', 'def getwelcome(self):', 'def set_debuglevel(self, level):', 'def user(self, user):', 'def pass_(self, pswd):', 'def stat(self):', 'def list(self, which=None):', 'def retr(self, which):', 'def dele(self, which):', 'def noop(self):', 'def rset(self):', 'def quit(self):', 'def close(self):', 'def rpop(self, user):', 'def apop(self, user, password):', 'def top(self, which, howmuch):', 'def uidl(self, which=None):', 'def utf8(self):', 'def capa(self):', 'def _parsecap(line):', 'def stls(self, context=None):', 'def __init__(self, host, port=POP3_SSL_PORT,', 'def _create_socket(self, timeout):', 'def stls(self, context=None):']

Analyzed C:\dev\adn_trash_code\python_libs\posixpath.py:
Classes: []
Functions: ['def _get_sep(path):', 'def normcase(s):', 'def isabs(s):', 'def join(a, *p):', 'def split(p):', 'def splitext(p):', 'def splitdrive(p):', 'def splitroot(p):', 'def basename(p):', 'def dirname(p):', 'def ismount(path):', 'def expanduser(path):', 'def expandvars(path):', 'def normpath(path):', 'def abspath(path):', 'def realpath(filename, *, strict=False):', 'def relpath(path, start=None):', 'def commonpath(paths):']

Analyzed C:\dev\adn_trash_code\python_libs\pprint.py:
Classes: ['class _safe_key:', 'class PrettyPrinter:']
Functions: ['def pprint(object, stream=None, indent=1, width=80, depth=None, *,', 'def pformat(object, indent=1, width=80, depth=None, *,', 'def pp(object, *args, sort_dicts=False, **kwargs):', 'def saferepr(object):', 'def isreadable(object):', 'def isrecursive(object):', 'def __init__(self, obj):', 'def __lt__(self, other):', 'def _safe_tuple(t):', 'def __init__(self, indent=1, width=80, depth=None, stream=None, *,', 'def pprint(self, object):', 'def pformat(self, object):', 'def isrecursive(self, object):', 'def isreadable(self, object):', 'def _format(self, object, stream, indent, allowance, context, level):', 'def _pprint_dataclass(self, object, stream, indent, allowance, context, level):', 'def _pprint_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_ordered_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_list(self, object, stream, indent, allowance, context, level):', 'def _pprint_tuple(self, object, stream, indent, allowance, context, level):', 'def _pprint_set(self, object, stream, indent, allowance, context, level):', 'def _pprint_str(self, object, stream, indent, allowance, context, level):', 'def _pprint_bytes(self, object, stream, indent, allowance, context, level):', 'def _pprint_bytearray(self, object, stream, indent, allowance, context, level):', 'def _pprint_mappingproxy(self, object, stream, indent, allowance, context, level):', 'def _pprint_simplenamespace(self, object, stream, indent, allowance, context, level):', 'def _format_dict_items(self, items, stream, indent, allowance, context,', 'def _format_namespace_items(self, items, stream, indent, allowance, context, level):', 'def _format_items(self, items, stream, indent, allowance, context, level):', 'def _repr(self, object, context, level):', 'def format(self, object, context, maxlevels, level):', 'def _pprint_default_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_counter(self, object, stream, indent, allowance, context, level):', 'def _pprint_chain_map(self, object, stream, indent, allowance, context, level):', 'def _pprint_deque(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_list(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_string(self, object, stream, indent, allowance, context, level):', 'def _safe_repr(self, object, context, maxlevels, level):', 'def _recursion(object):', 'def _wrap_bytes_repr(object, width, allowance):']

Analyzed C:\dev\adn_trash_code\python_libs\profile.py:
Classes: ['class _Utils:', 'class Profile:', 'class fake_code:', 'class fake_frame:']
Functions: ['def __init__(self, profiler):', 'def run(self, statement, filename, sort):', 'def runctx(self, statement, globals, locals, filename, sort):', 'def _show(self, prof, filename, sort):', 'def run(statement, filename=None, sort=-1):', 'def runctx(statement, globals, locals, filename=None, sort=-1):', 'def __init__(self, timer=None, bias=None):', 'def get_time_timer(timer=timer, sum=sum):', 'def trace_dispatch(self, frame, event, arg):', 'def trace_dispatch_i(self, frame, event, arg):', 'def trace_dispatch_mac(self, frame, event, arg):', 'def trace_dispatch_l(self, frame, event, arg):', 'def trace_dispatch_exception(self, frame, t):', 'def trace_dispatch_call(self, frame, t):', 'def trace_dispatch_c_call (self, frame, t):', 'def trace_dispatch_return(self, frame, t):', 'def set_cmd(self, cmd):', 'def __init__(self, filename, line, name):', 'def __repr__(self):', 'def __init__(self, code, prior):', 'def simulate_call(self, name):', 'def simulate_cmd_complete(self):', 'def print_stats(self, sort=-1):', 'def dump_stats(self, file):', 'def create_stats(self):', 'def snapshot_stats(self):', 'def run(self, cmd):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kw):', 'def calibrate(self, m, verbose=0):', 'def _calibrate_inner(self, m, verbose):', 'def f1(n):', 'def f(m, f1=f1):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\pstats.py:
Classes: ['class SortKey:', 'class FunctionProfile:', 'class StatsProfile:', 'class Stats:', 'class TupleComp:', 'class ProfileBrowser(cmd.Cmd):']
Functions: ['def __new__(cls, *values):', 'def __init__(self, *args, stream=None):', 'def init(self, arg):', 'def load_stats(self, arg):', 'def get_top_level_stats(self):', 'def add(self, *arg_list):', 'def dump_stats(self, filename):', 'def get_sort_arg_defs(self):', 'def sort_stats(self, *field):', 'def reverse_order(self):', 'def strip_dirs(self):', 'def calc_callees(self):', 'def eval_print_amount(self, sel, list, msg):', 'def get_stats_profile(self):', 'def get_print_list(self, sel_list):', 'def print_stats(self, *amount):', 'def print_callees(self, *amount):', 'def print_callers(self, *amount):', 'def print_call_heading(self, name_size, column_title):', 'def print_call_line(self, name_size, source, call_dict, arrow="->"):', 'def print_title(self):', 'def print_line(self, func):  # hack: should print percentages', 'def __init__(self, comp_select_list):', 'def compare (self, left, right):', 'def func_strip_path(func_name):', 'def func_get_function_name(func):', 'def func_std_string(func_name): # match what old profile produced', 'def add_func_stats(target, source):', 'def add_callers(target, source):', 'def count_calls(callers):', 'def f8(x):', 'def __init__(self, profile=None):', 'def generic(self, fn, line):', 'def generic_help(self):', 'def do_add(self, line):', 'def help_add(self):', 'def do_callees(self, line):', 'def help_callees(self):', 'def do_callers(self, line):', 'def help_callers(self):', 'def do_EOF(self, line):', 'def help_EOF(self):', 'def do_quit(self, line):', 'def help_quit(self):', 'def do_read(self, line):', 'def help_read(self):', 'def do_reverse(self, line):', 'def help_reverse(self):', 'def do_sort(self, line):', 'def help_sort(self):', 'def complete_sort(self, text, *args):', 'def do_stats(self, line):', 'def help_stats(self):', 'def do_strip(self, line):', 'def help_strip(self):', 'def help_help(self):', 'def postcmd(self, stop, line):']

Analyzed C:\dev\adn_trash_code\python_libs\pty.py:
Classes: []
Functions: ['def openpty():', 'def master_open():', 'def _open_terminal():', 'def slave_open(tty_name):', 'def fork():', 'def _read(fd):', 'def _copy(master_fd, master_read=_read, stdin_read=_read):', 'def spawn(argv, master_read=_read, stdin_read=_read):']

Analyzed C:\dev\adn_trash_code\python_libs\pyclbr.py:
Classes: ['class _Object:', 'class Function(_Object):', 'class Class(_Object):', 'class _ModuleBrowser(ast.NodeVisitor):']
Functions: ['def __init__(self, module, name, file, lineno, end_lineno, parent):', 'def __init__(self, module, name, file, lineno,', 'def __init__(self, module, name, super_, file, lineno,', 'def _nest_function(ob, func_name, lineno, end_lineno, is_async=False):', 'def _nest_class(ob, class_name, lineno, end_lineno, super=None):', 'def readmodule(module, path=None):', 'def readmodule_ex(module, path=None):', 'def _readmodule(module, path, inpackage=None):', 'def __init__(self, module, path, file, tree, inpackage):', 'def visit_ClassDef(self, node):', 'def visit_FunctionDef(self, node, *, is_async=False):', 'def visit_AsyncFunctionDef(self, node):', 'def visit_Import(self, node):', 'def visit_ImportFrom(self, node):', 'def _create_tree(fullmodule, path, fname, source, tree, inpackage):', 'def _main():']

Analyzed C:\dev\adn_trash_code\python_libs\pydoc.py:
Classes: ['class or function within a module or module in a package.  If the', 'class ErrorDuringImport(Exception):', 'class Doc:', 'class HTMLRepr(Repr):', 'class HTMLDoc(Doc):', 'class HorizontalRule:', 'class TextRepr(Repr):', 'class TextDoc(Doc):', 'class HorizontalRule:', 'class _PlainTextDoc(TextDoc):', 'class Helper:', 'class ModuleScanner:', 'class DocHandler(http.server.BaseHTTPRequestHandler):', 'class DocServer(http.server.HTTPServer):', 'class ServerThread(threading.Thread):', 'class _HTMLDoc(HTMLDoc):', 'class BadUsage(Exception): pass']
Functions: ['def pathdirs():', 'def _findclass(func):', 'def _finddoc(obj):', 'def _getowndoc(obj):', 'def _getdoc(object):', 'def getdoc(object):', 'def splitdoc(doc):', 'def _getargspec(object):', 'def classname(object, modname):', 'def parentname(object, modname):', 'def isdata(object):', 'def replace(text, *pairs):', 'def cram(text, maxlen):', 'def stripid(text):', 'def _is_bound_method(fn):', 'def allmethods(cl):', 'def _split_list(s, predicate):', 'def visiblename(name, all=None, obj=None):', 'def classify_class_attrs(object):', 'def sort_attributes(attrs, object):', 'def ispackage(path):', 'def source_synopsis(file):', 'def synopsis(filename, cache={}):', 'def __init__(self, filename, exc_info):', 'def __str__(self):', 'def importfile(path):', 'def safeimport(path, forceload=0, cache={}):', 'def document(self, object, name=None, *args):', 'def fail(self, object, name=None, *args):', "def getdocloc(self, object, basedir=sysconfig.get_path('stdlib')):", 'def __init__(self):', 'def escape(self, text):', 'def repr(self, object):', 'def repr1(self, x, level):', 'def repr_string(self, x, level):', 'def repr_instance(self, x, level):', 'def page(self, title, contents):', "def heading(self, title, extras=''):", 'def section(self, title, cls, contents, width=6,', 'def bigsection(self, title, *args):', 'def preformat(self, text):', 'def multicolumn(self, list, format):', 'def grey(self, text): return \'<span class="grey">%s</span>\' % text', 'def namelink(self, name, *dicts):', 'def classlink(self, object, modname):', 'def parentlink(self, object, modname):', 'def modulelink(self, object):', 'def modpkglink(self, modpkginfo):', 'def filelink(self, url, path):', 'def markup(self, text, escape=None, funcs={}, classes={}, methods={}):', 'def formattree(self, tree, modname, parent=None):', 'def docmodule(self, object, name=None, mod=None, *ignored):', 'def docclass(self, object, name=None, mod=None, funcs={}, classes={},', 'def __init__(self):', 'def maybe(self):', 'def spill(msg, attrs, predicate):', 'def spilldescriptors(msg, attrs, predicate):', 'def spilldata(msg, attrs, predicate):', 'def formatvalue(self, object):', 'def docroutine(self, object, name=None, mod=None,', 'def docdata(self, object, name=None, mod=None, cl=None, *ignored):', 'def docother(self, object, name=None, mod=None, *ignored):', 'def index(self, dir, shadowed=None):', 'def __init__(self):', 'def repr1(self, x, level):', 'def repr_string(self, x, level):', 'def repr_instance(self, x, level):', 'def bold(self, text):', "def indent(self, text, prefix='    '):", 'def section(self, title, contents):', "def formattree(self, tree, modname, parent=None, prefix=''):", 'def docmodule(self, object, name=None, mod=None, *ignored):', 'def docclass(self, object, name=None, mod=None, *ignored):', 'def makename(c, m=object.__module__):', 'def __init__(self):', 'def maybe(self):', 'def spill(msg, attrs, predicate):', 'def spilldescriptors(msg, attrs, predicate):', 'def spilldata(msg, attrs, predicate):', 'def formatvalue(self, object):', 'def docroutine(self, object, name=None, mod=None, cl=None, homecls=None):', 'def docdata(self, object, name=None, mod=None, cl=None, *ignored):', 'def docother(self, object, name=None, mod=None, parent=None, *ignored,', 'def bold(self, text):', "def pager(text, title=''):", 'def describe(thing):', 'def locate(path, forceload=0):', 'def resolve(thing, forceload=0):', "def render_doc(thing, title='Python Library Documentation: %s', forceload=0,", "def doc(thing, title='Python Library Documentation: %s', forceload=0,", 'def writedoc(thing, forceload=0):', "def writedocs(dir, pkgpath='', done=None):", 'def __init__(self, input=None, output=None):', 'def input(self):', 'def output(self):', 'def __repr__(self):', 'def __call__(self, request=_GoInteractive):', 'def interact(self):', 'def getline(self, prompt):', 'def help(self, request, is_cli=False):', 'def intro(self):', 'def list(self, items, columns=4, width=80):', 'def listkeywords(self):', 'def listsymbols(self):', 'def listtopics(self):', "def showtopic(self, topic, more_xrefs=''):", "def _gettopic(self, topic, more_xrefs=''):", 'def showsymbol(self, symbol):', "def listmodules(self, key=''):", 'def callback(path, modname, desc, modules=modules):', 'def onerror(modname):', 'def run(self, callback, key=None, completer=None, onerror=None):', 'def apropos(key):', 'def callback(path, modname, desc):', 'def onerror(modname):', 'def _start_server(urlhandler, hostname, port):', 'def do_GET(self):', 'def log_message(self, *args):', 'def __init__(self, host, port, callback):', 'def serve_until_quit(self):', 'def server_activate(self):', 'def __init__(self, urlhandler, host, port):', 'def run(self):', 'def ready(self, server):', 'def stop(self):', 'def _url_handler(url, content_type="text/html"):', 'def page(self, title, contents):', 'def html_navbar():', 'def html_index():', 'def bltinlink(name):', 'def html_search(key):', 'def callback(path, modname, desc):', 'def onerror(modname):', 'def bltinlink(name):', 'def html_topics():', 'def bltinlink(name):', 'def html_keywords():', 'def bltinlink(name):', 'def html_topicpage(topic):', 'def bltinlink(name):', 'def html_getobj(url):', 'def html_error(url, exc):', 'def get_html_page(url):', "def browse(port=0, *, open_browser=True, hostname='localhost'):", 'def ispath(x):', 'def _get_revised_path(given_path, argv0):', 'def _adjust_cli_sys_path():', 'def cli():']

Analyzed C:\dev\adn_trash_code\python_libs\py_compile.py:
Classes: ['class PyCompileError(Exception):', 'class PycInvalidationMode(enum.Enum):']
Functions: ["def __init__(self, exc_type, exc_value, file, msg=''):", 'def __str__(self):', 'def _get_default_invalidation_mode():', 'def compile(file, cfile=None, dfile=None, doraise=False, optimize=-1,', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\queue.py:
Classes: ['class Empty(Exception):', 'class Full(Exception):', 'class ShutDown(Exception):', 'class Queue:', 'class PriorityQueue(Queue):', 'class LifoQueue(Queue):', 'class _PySimpleQueue:']
Functions: ['def __init__(self, maxsize=0):', 'def task_done(self):', 'def join(self):', 'def qsize(self):', 'def empty(self):', 'def full(self):', 'def put(self, item, block=True, timeout=None):', 'def get(self, block=True, timeout=None):', 'def put_nowait(self, item):', 'def get_nowait(self):', 'def shutdown(self, immediate=False):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def __init__(self):', 'def put(self, item, block=True, timeout=None):', 'def get(self, block=True, timeout=None):', 'def put_nowait(self, item):', 'def get_nowait(self):', 'def empty(self):', 'def qsize(self):']

Analyzed C:\dev\adn_trash_code\python_libs\quopri.py:
Classes: []
Functions: ['def needsquoting(c, quotetabs, header):', 'def quote(c):', 'def encode(input, output, quotetabs, header=False):', "def write(s, output=output, lineEnd=b'\\n'):", 'def encodestring(s, quotetabs=False, header=False):', 'def decode(input, output, header=False):', 'def decodestring(s, header=False):', 'def ishex(c):', 'def unhex(s):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\random.py:
Classes: ['class Random(_random.Random):', 'class SystemRandom(Random):']
Functions: ['def __init__(self, x=None):', 'def seed(self, a=None, version=2):', 'def getstate(self):', 'def setstate(self, state):', 'def __getstate__(self):  # for pickle', 'def __setstate__(self, state):  # for pickle', 'def __reduce__(self):', 'def __init_subclass__(cls, /, **kwargs):', 'def _randbelow_with_getrandbits(self, n):', 'def _randbelow_without_getrandbits(self, n, maxsize=1<<BPF):', 'def randbytes(self, n):', 'def randrange(self, start, stop=None, step=_ONE):', 'def randint(self, a, b):', 'def choice(self, seq):', 'def shuffle(self, x):', 'def sample(self, population, k, *, counts=None):', 'def choices(self, population, weights=None, *, cum_weights=None, k=1):', 'def uniform(self, a, b):', 'def triangular(self, low=0.0, high=1.0, mode=None):', 'def normalvariate(self, mu=0.0, sigma=1.0):', 'def gauss(self, mu=0.0, sigma=1.0):', 'def lognormvariate(self, mu, sigma):', 'def expovariate(self, lambd=1.0):', 'def vonmisesvariate(self, mu, kappa):', 'def gammavariate(self, alpha, beta):', 'def betavariate(self, alpha, beta):', 'def paretovariate(self, alpha):', 'def weibullvariate(self, alpha, beta):', 'def binomialvariate(self, n=1, p=0.5):', 'def random(self):', 'def getrandbits(self, k):', 'def randbytes(self, n):', 'def seed(self, *args, **kwds):', 'def _notimplemented(self, *args, **kwds):', 'def _test_generator(n, func, args):', 'def _test(N=10_000):', 'def _parse_args(arg_list: list[str] | None):', 'def main(arg_list: list[str] | None = None) -> int | str:']

Analyzed C:\dev\adn_trash_code\python_libs\reprlib.py:
Classes: ['class Repr:']
Functions: ["def recursive_repr(fillvalue='...'):", 'def decorating_function(user_function):', 'def wrapper(self):', 'def __init__(', 'def repr(self, x):', 'def repr1(self, x, level):', 'def _join(self, pieces, level):', "def _repr_iterable(self, x, level, left, right, maxiter, trail=''):", 'def repr_tuple(self, x, level):', 'def repr_list(self, x, level):', 'def repr_array(self, x, level):', 'def repr_set(self, x, level):', 'def repr_frozenset(self, x, level):', 'def repr_deque(self, x, level):', 'def repr_dict(self, x, level):', 'def repr_str(self, x, level):', 'def repr_int(self, x, level):', 'def repr_instance(self, x, level):', 'def _possibly_sorted(x):']

Analyzed C:\dev\adn_trash_code\python_libs\rlcompleter.py:
Classes: ['class Completer:']
Functions: ['def __init__(self, namespace = None):', 'def complete(self, text, state):', 'def _callable_postfix(self, val, word):', 'def global_matches(self, text):', 'def attr_matches(self, text):', 'def get_class_members(klass):']

Analyzed C:\dev\adn_trash_code\python_libs\runpy.py:
Classes: ['class _TempModule(object):', 'class _ModifiedArgv0(object):', 'class _Error(Exception):']
Functions: ['def __init__(self, mod_name):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self, value):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _run_code(code, run_globals, init_globals=None,', 'def _run_module_code(code, init_globals=None,', 'def _get_module_details(mod_name, error=ImportError):', 'def _run_module_as_main(mod_name, alter_argv=True):', 'def run_module(mod_name, init_globals=None,', 'def _get_main_module_details(error=ImportError):', 'def _get_code_from_file(fname):', 'def run_path(path_name, init_globals=None, run_name=None):']

Analyzed C:\dev\adn_trash_code\python_libs\sched.py:
Classes: ['class scheduler:']
Functions: ['def __init__(self, timefunc=_time, delayfunc=time.sleep):', 'def enterabs(self, time, priority, action, argument=(), kwargs=_sentinel):', 'def enter(self, delay, priority, action, argument=(), kwargs=_sentinel):', 'def cancel(self, event):', 'def empty(self):', 'def run(self, blocking=True):', 'def queue(self):']

Analyzed C:\dev\adn_trash_code\python_libs\secrets.py:
Classes: []
Functions: ['def randbelow(exclusive_upper_bound):', 'def token_bytes(nbytes=None):', 'def token_hex(nbytes=None):', 'def token_urlsafe(nbytes=None):']

Analyzed C:\dev\adn_trash_code\python_libs\selectors.py:
Classes: ['class _SelectorMapping(Mapping):', 'class BaseSelector(metaclass=ABCMeta):', 'class _BaseSelectorImpl(BaseSelector):', 'class SelectSelector(_BaseSelectorImpl):', 'class _PollLikeSelector(_BaseSelectorImpl):', 'class PollSelector(_PollLikeSelector):', 'class EpollSelector(_PollLikeSelector):', 'class DevpollSelector(_PollLikeSelector):', 'class KqueueSelector(_BaseSelectorImpl):']
Functions: ['def _fileobj_to_fd(fileobj):', 'def __init__(self, selector):', 'def __len__(self):', 'def get(self, fileobj, default=None):', 'def __getitem__(self, fileobj):', 'def __iter__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def select(self, timeout=None):', 'def close(self):', 'def get_key(self, fileobj):', 'def get_map(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self):', 'def _fileobj_lookup(self, fileobj):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def close(self):', 'def get_map(self):', 'def __init__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def _select(self, r, w, _, timeout=None):', 'def select(self, timeout=None):', 'def __init__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def select(self, timeout=None):', 'def fileno(self):', 'def select(self, timeout=None):', 'def close(self):', 'def fileno(self):', 'def close(self):', 'def __init__(self):', 'def fileno(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def select(self, timeout=None):', 'def close(self):', 'def _can_use(method):']

Analyzed C:\dev\adn_trash_code\python_libs\shelve.py:
Classes: ['class _ClosedDict(collections.abc.MutableMapping):', 'class Shelf(collections.abc.MutableMapping):', 'class BsdDbShelf(Shelf):', 'class DbfilenameShelf(Shelf):']
Functions: ['def closed(self, *args):', 'def __repr__(self):', 'def __init__(self, dict, protocol=None, writeback=False,', 'def __iter__(self):', 'def __len__(self):', 'def __contains__(self, key):', 'def get(self, key, default=None):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def close(self):', 'def __del__(self):', 'def sync(self):', 'def __init__(self, dict, protocol=None, writeback=False,', 'def set_location(self, key):', 'def next(self):', 'def previous(self):', 'def first(self):', 'def last(self):', "def __init__(self, filename, flag='c', protocol=None, writeback=False):", 'def clear(self):', "def open(filename, flag='c', protocol=None, writeback=False):"]

Analyzed C:\dev\adn_trash_code\python_libs\shlex.py:
Classes: ['class shlex:']
Functions: ['def __init__(self, instream=None, infile=None, posix=False,', 'def punctuation_chars(self):', 'def push_token(self, tok):', 'def push_source(self, newstream, newfile=None):', 'def pop_source(self):', 'def get_token(self):', 'def read_token(self):', 'def sourcehook(self, newfile):', 'def error_leader(self, infile=None, lineno=None):', 'def __iter__(self):', 'def __next__(self):', 'def split(s, comments=False, posix=True):', 'def join(split_command):', 'def quote(s):', 'def _print_tokens(lexer):']

Analyzed C:\dev\adn_trash_code\python_libs\shutil.py:
Classes: ['class Error(OSError):', 'class SameFileError(Error):', 'class SpecialFileError(OSError):', 'class ExecError(OSError):', 'class ReadError(OSError):', 'class RegistryError(Exception):', 'class _GiveupOnFastCopy(Exception):']
Functions: ['def _fastcopy_fcopyfile(fsrc, fdst, flags):', 'def _fastcopy_sendfile(fsrc, fdst):', 'def _copyfileobj_readinto(fsrc, fdst, length=COPY_BUFSIZE):', 'def copyfileobj(fsrc, fdst, length=0):', 'def _samefile(src, dst):', 'def _stat(fn):', 'def _islink(fn):', 'def copyfile(src, dst, *, follow_symlinks=True):', 'def copymode(src, dst, *, follow_symlinks=True):', 'def chmod_func(*args):', 'def _copyxattr(src, dst, *, follow_symlinks=True):', 'def _copyxattr(*args, **kwargs):', 'def copystat(src, dst, *, follow_symlinks=True):', 'def _nop(*args, ns=None, follow_symlinks=None):', 'def lookup(name):', 'def lookup(name):', 'def copy(src, dst, *, follow_symlinks=True):', 'def copy2(src, dst, *, follow_symlinks=True):', 'def ignore_patterns(*patterns):', 'def _ignore_patterns(path, names):', 'def _copytree(entries, src, dst, symlinks, ignore, copy_function,', 'def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,', 'def _rmtree_islink(st):', 'def _rmtree_islink(st):', 'def _rmtree_unsafe(path, onexc):', 'def onerror(err):', 'def _rmtree_safe_fd(stack, onexc):', 'def rmtree(path, ignore_errors=False, onerror=None, *, onexc=None, dir_fd=None):', 'def onexc(*args):', 'def onexc(*args):', 'def onexc(*args):', 'def onexc(*args):', 'def _basename(path):', 'def move(src, dst, copy_function=copy2):', 'def _destinsrc(src, dst):', 'def _is_immutable(src):', 'def _get_gid(name):', 'def _get_uid(name):', 'def _make_tarball(base_name, base_dir, compress="gzip", verbose=0, dry_run=0,', 'def _set_uid_gid(tarinfo):', 'def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0,', 'def get_archive_formats():', "def register_archive_format(name, function, extra_args=None, description=''):", 'def unregister_archive_format(name):', 'def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,', 'def get_unpack_formats():', 'def _check_unpack_options(extensions, function, extra_args):', 'def register_unpack_format(name, extensions, function, extra_args=None,', 'def unregister_unpack_format(name):', 'def _ensure_directory(path):', 'def _unpack_zipfile(filename, extract_dir):', 'def _unpack_tarfile(filename, extract_dir, *, filter=None):', 'def _find_unpack_format(filename):', 'def unpack_archive(filename, extract_dir=None, format=None, *, filter=None):', 'def disk_usage(path):', 'def disk_usage(path):', 'def chown(path, user=None, group=None, *, dir_fd=None, follow_symlinks=True):', 'def get_terminal_size(fallback=(80, 24)):', 'def _access_check(fn, mode):', 'def _win_path_needs_curdir(cmd, mode):', 'def which(cmd, mode=os.F_OK | os.X_OK, path=None):']

Analyzed C:\dev\adn_trash_code\python_libs\signal.py:
Classes: []
Functions: ['def _int_to_enum(value, enum_klass):', 'def _enum_to_int(value):', 'def _wraps(wrapped):', 'def decorator(wrapper):', 'def signal(signalnum, handler):', 'def getsignal(signalnum):', 'def pthread_sigmask(how, mask):', 'def sigpending():', 'def sigwait(sigset):', 'def valid_signals():']

Analyzed C:\dev\adn_trash_code\python_libs\site.py:
Classes: []
Functions: ['def _trace(message):', 'def makepath(*paths):', 'def abs_paths():', 'def removeduppaths():', 'def _init_pathinfo():', 'def addpackage(sitedir, name, known_paths):', 'def addsitedir(sitedir, known_paths=None):', 'def check_enableusersite():', 'def _get_implementation():', 'def _getuserbase():', 'def joinuser(*args):', 'def _get_path(userbase):', 'def getuserbase():', 'def getusersitepackages():', 'def addusersitepackages(known_paths):', 'def getsitepackages(prefixes=None):', 'def addsitepackages(known_paths, prefixes=None):', 'def setquit():', 'def setcopyright():', 'def sethelper():', 'def gethistoryfile():', 'def enablerlcompleter():', 'def register_readline():', 'def write_history():', 'def venv(known_paths):', 'def execsitecustomize():', 'def execusercustomize():', 'def main():', 'def _script():', 'def exists(path):']

Analyzed C:\dev\adn_trash_code\python_libs\smtplib.py:
Classes: ['class SMTPException(OSError):', 'class SMTPNotSupportedError(SMTPException):', 'class SMTPServerDisconnected(SMTPException):', 'class SMTPResponseException(SMTPException):', 'class SMTPSenderRefused(SMTPResponseException):', 'class SMTPRecipientsRefused(SMTPException):', 'class SMTPDataError(SMTPResponseException):', 'class SMTPConnectError(SMTPResponseException):', 'class SMTPHeloError(SMTPResponseException):', 'class SMTPAuthenticationError(SMTPResponseException):', 'class SMTP:', 'class SMTP_SSL(SMTP):', 'class LMTP(SMTP):']
Functions: ['def __init__(self, code, msg):', 'def __init__(self, code, msg, sender):', 'def __init__(self, recipients):', 'def quoteaddr(addrstring):', 'def _addr_only(addrstring):', 'def quotedata(data):', 'def _quote_periods(bindata):', 'def _fix_eols(data):', "def __init__(self, host='', port=0, local_hostname=None,", 'def __enter__(self):', 'def __exit__(self, *args):', 'def set_debuglevel(self, debuglevel):', 'def _print_debug(self, *args):', 'def _get_socket(self, host, port, timeout):', "def connect(self, host='localhost', port=0, source_address=None):", 'def send(self, s):', 'def putcmd(self, cmd, args=""):', 'def getreply(self):', 'def docmd(self, cmd, args=""):', "def helo(self, name=''):", "def ehlo(self, name=''):", 'def has_extn(self, opt):', "def help(self, args=''):", 'def rset(self):', 'def _rset(self):', 'def noop(self):', 'def mail(self, sender, options=()):', 'def rcpt(self, recip, options=()):', 'def data(self, msg):', 'def verify(self, address):', 'def expn(self, address):', 'def ehlo_or_helo_if_needed(self):', 'def auth(self, mechanism, authobject, *, initial_response_ok=True):', 'def auth_cram_md5(self, challenge=None):', 'def auth_plain(self, challenge=None):', 'def auth_login(self, challenge=None):', 'def login(self, user, password, *, initial_response_ok=True):', 'def starttls(self, *, context=None):', 'def sendmail(self, from_addr, to_addrs, msg, mail_options=(),', 'def send_message(self, msg, from_addr=None, to_addrs=None,', 'def close(self):', 'def quit(self):', "def __init__(self, host='', port=0, local_hostname=None,", 'def _get_socket(self, host, port, timeout):', "def __init__(self, host='', port=LMTP_PORT, local_hostname=None,", "def connect(self, host='localhost', port=0, source_address=None):", 'def prompt(prompt):']

Analyzed C:\dev\adn_trash_code\python_libs\socket.py:
Classes: ['class _GiveupOnSendfile(Exception): pass', 'class socket(_socket.socket):', 'class SocketIO(io.RawIOBase):']
Functions: ['def _intenum_converter(value, enum_klass):', 'def __init__(self, family=-1, type=-1, proto=-1, fileno=None):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def __getstate__(self):', 'def dup(self):', 'def accept(self):', 'def makefile(self, mode="r", buffering=None, *,', 'def _sendfile_use_sendfile(self, file, offset=0, count=None):', 'def _sendfile_use_sendfile(self, file, offset=0, count=None):', 'def _sendfile_use_send(self, file, offset=0, count=None):', 'def _check_sendfile_params(self, file, offset, count):', 'def sendfile(self, file, offset=0, count=None):', 'def _decref_socketios(self):', 'def _real_close(self, _ss=_socket.socket):', 'def close(self):', 'def detach(self):', 'def family(self):', 'def type(self):', 'def get_inheritable(self):', 'def set_inheritable(self, inheritable):', 'def get_inheritable(self):', 'def set_inheritable(self, inheritable):', 'def fromfd(fd, family, type, proto=0):', 'def send_fds(sock, buffers, fds, flags=0, address=None):', 'def recv_fds(sock, bufsize, maxfds, flags=0):', 'def fromshare(info):', 'def _fallback_socketpair(family=AF_INET, type=SOCK_STREAM, proto=0):', 'def socketpair(family=None, type=SOCK_STREAM, proto=0):', 'def __init__(self, sock, mode):', 'def readinto(self, b):', 'def write(self, b):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def fileno(self):', 'def name(self):', 'def mode(self):', 'def close(self):', "def getfqdn(name=''):", 'def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,', 'def has_dualstack_ipv6():', 'def create_server(address, *, family=AF_INET, backlog=None, reuse_port=False,', 'def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):']

Analyzed C:\dev\adn_trash_code\python_libs\socketserver.py:
Classes: ['class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass', 'class will essentially render the service "deaf" while one request is', 'class BaseServer:', 'class TCPServer(BaseServer):', 'class UDPServer(TCPServer):', 'class ForkingMixIn:', 'class _Threads(list):', 'class _NoThreads:', 'class ThreadingMixIn:', 'class ForkingUDPServer(ForkingMixIn, UDPServer): pass', 'class ForkingTCPServer(ForkingMixIn, TCPServer): pass', 'class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass', 'class ThreadingTCPServer(ThreadingMixIn, TCPServer): pass', 'class UnixStreamServer(TCPServer):', 'class UnixDatagramServer(UDPServer):', 'class ThreadingUnixStreamServer(ThreadingMixIn, UnixStreamServer): pass', 'class ThreadingUnixDatagramServer(ThreadingMixIn, UnixDatagramServer): pass', 'class ForkingUnixStreamServer(ForkingMixIn, UnixStreamServer): pass', 'class ForkingUnixDatagramServer(ForkingMixIn, UnixDatagramServer): pass', 'class BaseRequestHandler:', 'class StreamRequestHandler(BaseRequestHandler):', 'class _SocketWriter(BufferedIOBase):', 'class DatagramRequestHandler(BaseRequestHandler):']
Functions: ['def __init__(self, server_address, RequestHandlerClass):', 'def server_activate(self):', 'def serve_forever(self, poll_interval=0.5):', 'def shutdown(self):', 'def service_actions(self):', 'def handle_request(self):', 'def _handle_request_noblock(self):', 'def handle_timeout(self):', 'def verify_request(self, request, client_address):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def finish_request(self, request, client_address):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def handle_error(self, request, client_address):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self, server_address, RequestHandlerClass, bind_and_activate=True):', 'def server_bind(self):', 'def server_activate(self):', 'def server_close(self):', 'def fileno(self):', 'def get_request(self):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def get_request(self):', 'def server_activate(self):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def collect_children(self, *, blocking=False):', 'def handle_timeout(self):', 'def service_actions(self):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def append(self, thread):', 'def pop_all(self):', 'def join(self):', 'def reap(self):', 'def append(self, thread):', 'def join(self):', 'def process_request_thread(self, request, client_address):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def __init__(self, request, client_address, server):', 'def setup(self):', 'def handle(self):', 'def finish(self):', 'def setup(self):', 'def finish(self):', 'def __init__(self, sock):', 'def writable(self):', 'def write(self, b):', 'def fileno(self):', 'def setup(self):', 'def finish(self):']

Analyzed C:\dev\adn_trash_code\python_libs\sre_compile.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\sre_constants.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\sre_parse.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\ssl.py:
Classes: ['class TLSVersion:', 'class _TLSContentType:', 'class _TLSAlertType:', 'class _TLSMessageType:', 'class _ASN1Object(namedtuple("_ASN1Object", "nid shortname longname oid")):', 'class Purpose(_ASN1Object, _Enum):', 'class SSLContext(_SSLContext):', 'class SSLObject:', 'class SSLSocket(socket):']
Functions: ['def _dnsname_match(dn, hostname):', 'def _inet_paton(ipname):', 'def _ipaddress_match(cert_ipaddress, host_ip):', 'def get_default_verify_paths():', 'def __new__(cls, oid):', 'def fromnid(cls, nid):', 'def fromname(cls, name):', 'def __new__(cls, protocol=None, *args, **kwargs):', 'def _encode_hostname(self, hostname):', 'def wrap_socket(self, sock, server_side=False,', 'def wrap_bio(self, incoming, outgoing, server_side=False,', 'def set_npn_protocols(self, npn_protocols):', 'def set_servername_callback(self, server_name_callback):', 'def shim_cb(sslobj, servername, sslctx):', 'def set_alpn_protocols(self, alpn_protocols):', 'def _load_windows_store_certs(self, storename, purpose):', 'def load_default_certs(self, purpose=Purpose.SERVER_AUTH):', 'def minimum_version(self):', 'def minimum_version(self, value):', 'def maximum_version(self):', 'def maximum_version(self, value):', 'def options(self):', 'def options(self, value):', 'def hostname_checks_common_name(self):', 'def hostname_checks_common_name(self, value):', 'def hostname_checks_common_name(self):', 'def _msg_callback(self):', 'def msg_cb(conn, direction, version, content_type, msg_type, data):', 'def _msg_callback(self, callback):', 'def inner(conn, direction, version, content_type, msg_type, data):', 'def protocol(self):', 'def verify_flags(self):', 'def verify_flags(self, value):', 'def verify_mode(self):', 'def verify_mode(self, value):', 'def create_default_context(purpose=Purpose.SERVER_AUTH, *, cafile=None,', 'def _create_unverified_context(protocol=None, *, cert_reqs=CERT_NONE,', 'def __init__(self, *args, **kwargs):', 'def _create(cls, incoming, outgoing, server_side=False,', 'def context(self):', 'def context(self, ctx):', 'def session(self):', 'def session(self, session):', 'def session_reused(self):', 'def server_side(self):', 'def server_hostname(self):', 'def read(self, len=1024, buffer=None):', 'def write(self, data):', 'def getpeercert(self, binary_form=False):', 'def get_verified_chain(self):', 'def get_unverified_chain(self):', 'def selected_npn_protocol(self):', 'def selected_alpn_protocol(self):', 'def cipher(self):', 'def shared_ciphers(self):', 'def compression(self):', 'def pending(self):', 'def do_handshake(self):', 'def unwrap(self):', 'def get_channel_binding(self, cb_type="tls-unique"):', 'def version(self):', 'def verify_client_post_handshake(self):', 'def _sslcopydoc(func):', 'def __init__(self, *args, **kwargs):', 'def _create(cls, sock, server_side=False, do_handshake_on_connect=True,', 'def context(self):', 'def context(self, ctx):', 'def session(self):', 'def session(self, session):', 'def session_reused(self):', 'def dup(self):', 'def _checkClosed(self, msg=None):', 'def _check_connected(self):', 'def read(self, len=1024, buffer=None):', 'def write(self, data):', 'def getpeercert(self, binary_form=False):', 'def get_verified_chain(self):', 'def get_unverified_chain(self):', 'def selected_npn_protocol(self):', 'def selected_alpn_protocol(self):', 'def cipher(self):', 'def shared_ciphers(self):', 'def compression(self):', 'def send(self, data, flags=0):', 'def sendto(self, data, flags_or_addr, addr=None):', 'def sendmsg(self, *args, **kwargs):', 'def sendall(self, data, flags=0):', 'def sendfile(self, file, offset=0, count=None):', 'def recv(self, buflen=1024, flags=0):', 'def recv_into(self, buffer, nbytes=None, flags=0):', 'def recvfrom(self, buflen=1024, flags=0):', 'def recvfrom_into(self, buffer, nbytes=None, flags=0):', 'def recvmsg(self, *args, **kwargs):', 'def recvmsg_into(self, *args, **kwargs):', 'def pending(self):', 'def shutdown(self, how):', 'def unwrap(self):', 'def verify_client_post_handshake(self):', 'def _real_close(self):', 'def do_handshake(self, block=False):', 'def _real_connect(self, addr, connect_ex):', 'def connect(self, addr):', 'def connect_ex(self, addr):', 'def accept(self):', 'def get_channel_binding(self, cb_type="tls-unique"):', 'def version(self):', 'def cert_time_to_seconds(cert_time):', 'def DER_cert_to_PEM_cert(der_cert_bytes):', 'def PEM_cert_to_DER_cert(pem_cert_string):', 'def get_server_certificate(addr, ssl_version=PROTOCOL_TLS_CLIENT,', 'def get_protocol_name(protocol_code):']

Analyzed C:\dev\adn_trash_code\python_libs\stat.py:
Classes: []
Functions: ['def S_IMODE(mode):', 'def S_IFMT(mode):', 'def S_ISDIR(mode):', 'def S_ISCHR(mode):', 'def S_ISBLK(mode):', 'def S_ISREG(mode):', 'def S_ISFIFO(mode):', 'def S_ISLNK(mode):', 'def S_ISSOCK(mode):', 'def S_ISDOOR(mode):', 'def S_ISPORT(mode):', 'def S_ISWHT(mode):', 'def filemode(mode):']

Analyzed C:\dev\adn_trash_code\python_libs\statistics.py:
Classes: ['class StatisticsError(ValueError):', 'class NormalDist:']
Functions: ['def _sum(data):', 'def _ss(data, c=None):', 'def _isfinite(x):', 'def _coerce(T, S):', 'def _exact_ratio(x):', 'def _convert(value, T):', "def _fail_neg(values, errmsg='negative value'):", "def _rank(data, /, *, key=None, reverse=False, ties='average', start=1) -> list[float]:", 'def _integer_sqrt_of_frac_rto(n: int, m: int) -> int:', 'def _float_sqrt_of_frac(n: int, m: int) -> float:', 'def _decimal_sqrt_of_frac(n: int, m: int) -> Decimal:', 'def mean(data):', 'def fmean(data, weights=None):', 'def count(iterable):', 'def geometric_mean(data):', 'def count_positive(iterable):', 'def harmonic_mean(data, weights=None):', 'def median(data):', 'def median_low(data):', 'def median_high(data):', 'def median_grouped(data, interval=1.0):', 'def mode(data):', 'def multimode(data):', "def kde(data, h, kernel='normal', *, cumulative=False):", 'def pdf(x):', 'def cdf(x):', 'def pdf(x):', 'def cdf(x):', "def quantiles(data, *, n=4, method='exclusive'):", 'def variance(data, xbar=None):', 'def pvariance(data, mu=None):', 'def stdev(data, xbar=None):', 'def pstdev(data, mu=None):', 'def _mean_stdev(data):', 'def _sqrtprod(x: float, y: float) -> float:', 'def covariance(x, y, /):', "def correlation(x, y, /, *, method='linear'):", 'def linear_regression(x, y, /, *, proportional=False):', 'def _normal_dist_inv_cdf(p, mu, sigma):', 'def __init__(self, mu=0.0, sigma=1.0):', 'def from_samples(cls, data):', 'def samples(self, n, *, seed=None):', 'def pdf(self, x):', 'def cdf(self, x):', 'def inv_cdf(self, p):', 'def quantiles(self, n=4):', 'def overlap(self, other):', 'def zscore(self, x):', 'def mean(self):', 'def median(self):', 'def mode(self):', 'def stdev(self):', 'def variance(self):', 'def __add__(x1, x2):', 'def __sub__(x1, x2):', 'def __mul__(x1, x2):', 'def __truediv__(x1, x2):', 'def __pos__(x1):', 'def __neg__(x1):', 'def __rsub__(x1, x2):', 'def __eq__(x1, x2):', 'def __hash__(self):', 'def __repr__(self):', 'def __getstate__(self):', 'def __setstate__(self, state):', 'def _newton_raphson(f_inv_estimate, f, f_prime, tolerance=1e-12):', 'def f_inv(y):', 'def _quartic_invcdf_estimate(p):', 'def _triweight_invcdf_estimate(p):', "def kde_random(data, h, kernel='normal', *, seed=None):", 'def rand():']

Analyzed C:\dev\adn_trash_code\python_libs\string.py:
Classes: ['class Template:', 'class Formatter:']
Functions: ['def capwords(s, sep=None):', 'def __init_subclass__(cls):', 'def __init__(self, template):', 'def _invalid(self, mo):', 'def substitute(self, mapping=_sentinel_dict, /, **kws):', 'def convert(mo):', 'def safe_substitute(self, mapping=_sentinel_dict, /, **kws):', 'def convert(mo):', 'def is_valid(self):', 'def get_identifiers(self):', 'def format(self, format_string, /, *args, **kwargs):', 'def vformat(self, format_string, args, kwargs):', 'def _vformat(self, format_string, args, kwargs, used_args, recursion_depth,', 'def get_value(self, key, args, kwargs):', 'def check_unused_args(self, used_args, args, kwargs):', 'def format_field(self, value, format_spec):', 'def convert_field(self, value, conversion):', 'def parse(self, format_string):', 'def get_field(self, field_name, args, kwargs):']

Analyzed C:\dev\adn_trash_code\python_libs\stringprep.py:
Classes: []
Functions: ['def in_table_a1(code):', 'def in_table_b1(code):', 'def map_table_b3(code):', 'def map_table_b2(a):', 'def in_table_c11(code):', 'def in_table_c12(code):', 'def in_table_c11_c12(code):', 'def in_table_c21(code):', 'def in_table_c22(code):', 'def in_table_c21_c22(code):', 'def in_table_c3(code):', 'def in_table_c4(code):', 'def in_table_c5(code):', 'def in_table_c6(code):', 'def in_table_c7(code):', 'def in_table_c8(code):', 'def in_table_c9(code):', 'def in_table_d1(code):', 'def in_table_d2(code):']

Analyzed C:\dev\adn_trash_code\python_libs\struct.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\subprocess.py:
Classes: ['class _del_safe:', 'class _del_safe:', 'class SubprocessError(Exception): pass', 'class CalledProcessError(SubprocessError):', 'class TimeoutExpired(SubprocessError):', 'class STARTUPINFO:', 'class Handle(int):', 'class CompletedProcess(object):', 'class Popen:']
Functions: ['def __init__(self, returncode, cmd, output=None, stderr=None):', 'def __str__(self):', 'def stdout(self):', 'def stdout(self, value):', 'def __init__(self, cmd, timeout, output=None, stderr=None):', 'def __str__(self):', 'def stdout(self):', 'def stdout(self, value):', 'def __init__(self, *, dwFlags=0, hStdInput=None, hStdOutput=None,', 'def copy(self):', 'def Close(self, CloseHandle=_winapi.CloseHandle):', 'def Detach(self):', 'def __repr__(self):', 'def _cleanup():', 'def _cleanup():', 'def _optim_args_from_interpreter_flags():', 'def _args_from_interpreter_flags():', 'def _text_encoding():', 'def call(*popenargs, timeout=None, **kwargs):', 'def check_call(*popenargs, **kwargs):', 'def check_output(*popenargs, timeout=None, **kwargs):', 'def __init__(self, args, returncode, stdout=None, stderr=None):', 'def __repr__(self):', 'def check_returncode(self):', 'def run(*popenargs,', 'def list2cmdline(seq):', 'def getstatusoutput(cmd, *, encoding=None, errors=None):', 'def getoutput(cmd, *, encoding=None, errors=None):', 'def _use_posix_spawn():', 'def __init__(self, args, bufsize=-1, executable=None,', 'def __repr__(self):', 'def universal_newlines(self):', 'def universal_newlines(self, universal_newlines):', 'def _translate_newlines(self, data, encoding, errors):', 'def __enter__(self):', 'def __exit__(self, exc_type, value, traceback):', 'def __del__(self, _maxsize=sys.maxsize, _warn=warnings.warn):', 'def _get_devnull(self):', 'def _stdin_write(self, input):', 'def communicate(self, input=None, timeout=None):', 'def poll(self):', 'def _remaining_time(self, endtime):', 'def _check_timeout(self, endtime, orig_timeout, stdout_seq, stderr_seq,', 'def wait(self, timeout=None):', 'def _close_pipe_fds(self,', 'def _on_error_fd_closer(self):', 'def _get_handles(self, stdin, stdout, stderr):', 'def _make_inheritable(self, handle):', 'def _filter_handle_list(self, handle_list):', 'def _execute_child(self, args, executable, preexec_fn, close_fds,', 'def _internal_poll(self, _deadstate=None,', 'def _wait(self, timeout):', 'def _readerthread(self, fh, buffer):', 'def _communicate(self, input, endtime, orig_timeout):', 'def send_signal(self, sig):', 'def terminate(self):', 'def _get_handles(self, stdin, stdout, stderr):', 'def _posix_spawn(self, args, executable, env, restore_signals, close_fds,', 'def _execute_child(self, args, executable, preexec_fn, close_fds,', 'def _handle_exitstatus(self, sts, _del_safe=_del_safe):', 'def _internal_poll(self, _deadstate=None, _del_safe=_del_safe):', 'def _try_wait(self, wait_flags):', 'def _wait(self, timeout):', 'def _communicate(self, input, endtime, orig_timeout):', 'def _save_input(self, input):', 'def send_signal(self, sig):', 'def terminate(self):', 'def kill(self):']

Analyzed C:\dev\adn_trash_code\python_libs\symtable.py:
Classes: ['class SymbolTableFactory:', 'class SymbolTableType(StrEnum):', 'class SymbolTable:', 'class Function(SymbolTable):', 'class Class(SymbolTable):', 'class Symbol:']
Functions: ['def symtable(code, filename, compile_type):', 'def __init__(self):', 'def new(self, table, filename):', 'def __call__(self, table, filename):', 'def __init__(self, raw_table, filename):', 'def __repr__(self):', 'def get_type(self):', 'def get_id(self):', 'def get_name(self):', 'def get_lineno(self):', 'def is_optimized(self):', 'def is_nested(self):', 'def has_children(self):', 'def get_identifiers(self):', 'def lookup(self, name):', 'def get_symbols(self):', 'def __check_children(self, name):', 'def get_children(self):', 'def __idents_matching(self, test_func):', 'def get_parameters(self):', 'def get_locals(self):', 'def get_globals(self):', 'def get_nonlocals(self):', 'def get_frees(self):', 'def get_methods(self):', 'def is_local_symbol(ident):', 'def __init__(self, name, flags, namespaces=None, *, module_scope=False):', 'def __repr__(self):', 'def _scope_str(self):', 'def _flags_str(self):', 'def get_name(self):', 'def is_referenced(self):', 'def is_parameter(self):', 'def is_global(self):', 'def is_nonlocal(self):', 'def is_declared_global(self):', 'def is_local(self):', 'def is_annotated(self):', 'def is_free(self):', 'def is_imported(self):', 'def is_assigned(self):', 'def is_namespace(self):', 'def get_namespaces(self):', 'def get_namespace(self):', 'def main(args):', 'def print_symbols(table, level=0):']

Analyzed C:\dev\adn_trash_code\python_libs\tabnanny.py:
Classes: ['class NannyNag(Exception):', 'class Whitespace:']
Functions: ['def errprint(*args):', 'def main():', 'def __init__(self, lineno, msg, line):', 'def get_lineno(self):', 'def get_msg(self):', 'def get_line(self):', 'def check(file):', 'def __init__(self, ws):', 'def longest_run_of_spaces(self):', 'def indent_level(self, tabsize):', 'def equal(self, other):', 'def not_equal_witness(self, other):', 'def less(self, other):', 'def not_less_witness(self, other):', 'def format_witnesses(w):', 'def process_tokens(tokens):', 'def _process_tokens(tokens):']

Analyzed C:\dev\adn_trash_code\python_libs\tarfile.py:
Classes: ['class TarError(Exception):', 'class ExtractError(TarError):', 'class ReadError(TarError):', 'class CompressionError(TarError):', 'class StreamError(TarError):', 'class HeaderError(TarError):', 'class EmptyHeaderError(HeaderError):', 'class TruncatedHeaderError(HeaderError):', 'class EOFHeaderError(HeaderError):', 'class InvalidHeaderError(HeaderError):', 'class SubsequentHeaderError(HeaderError):', 'class _LowLevelFile:', 'class _Stream:', 'class _StreamProxy(object):', 'class _FileInFile(object):', 'class ExFileObject(io.BufferedReader):', 'class FilterError(TarError):', 'class AbsolutePathError(FilterError):', 'class OutsideDestinationError(FilterError):', 'class SpecialFileError(FilterError):', 'class AbsoluteLinkError(FilterError):', 'class LinkOutsideDestinationError(FilterError):', 'class TarInfo(object):', 'class TarFile(object):']
Functions: ['def stn(s, length, encoding, errors):', 'def nts(s, encoding, errors):', 'def nti(s):', 'def itn(n, digits=8, format=DEFAULT_FORMAT):', 'def calc_chksums(buf):', 'def copyfileobj(src, dst, length=None, exception=OSError, bufsize=None):', 'def _safe_print(s):', 'def __init__(self, name, mode):', 'def close(self):', 'def read(self, size):', 'def write(self, s):', 'def __init__(self, name, mode, comptype, fileobj, bufsize,', 'def __del__(self):', 'def _init_write_gz(self, compresslevel):', 'def write(self, s):', 'def __write(self, s):', 'def close(self):', 'def _init_read_gz(self):', 'def tell(self):', 'def seek(self, pos=0):', 'def read(self, size):', 'def _read(self, size):', 'def __read(self, size):', 'def __init__(self, fileobj):', 'def read(self, size):', 'def getcomptype(self):', 'def close(self):', 'def __init__(self, fileobj, offset, size, name, blockinfo=None):', 'def flush(self):', 'def mode(self):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def tell(self):', 'def seek(self, position, whence=io.SEEK_SET):', 'def read(self, size=None):', 'def readinto(self, b):', 'def close(self):', 'def __init__(self, tarfile, tarinfo):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo, path):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo, path):', 'def _get_filtered_attrs(member, dest_path, for_data=True):', 'def fully_trusted_filter(member, dest_path):', 'def tar_filter(member, dest_path):', 'def data_filter(member, dest_path):', 'def __init__(self, name=""):', 'def tarfile(self):', 'def tarfile(self, tarfile):', 'def path(self):', 'def path(self, name):', 'def linkpath(self):', 'def linkpath(self, linkname):', 'def __repr__(self):', 'def replace(self, *,', 'def get_info(self):', 'def tobuf(self, format=DEFAULT_FORMAT, encoding=ENCODING, errors="surrogateescape"):', 'def create_ustar_header(self, info, encoding, errors):', 'def create_gnu_header(self, info, encoding, errors):', 'def create_pax_header(self, info, encoding):', 'def create_pax_global_header(cls, pax_headers):', 'def _posix_split_name(self, name, encoding, errors):', 'def _create_header(info, format, encoding, errors):', 'def _create_payload(payload):', 'def _create_gnu_long_header(cls, name, type, encoding, errors):', 'def _create_pax_generic_header(cls, pax_headers, type, encoding):', 'def frombuf(cls, buf, encoding, errors):', 'def fromtarfile(cls, tarfile):', 'def _proc_member(self, tarfile):', 'def _proc_builtin(self, tarfile):', 'def _proc_gnulong(self, tarfile):', 'def _proc_sparse(self, tarfile):', 'def _proc_pax(self, tarfile):', 'def _proc_gnusparse_00(self, next, raw_headers):', 'def _proc_gnusparse_01(self, next, pax_headers):', 'def _proc_gnusparse_10(self, next, pax_headers, tarfile):', 'def _apply_pax_info(self, pax_headers, encoding, errors):', 'def _decode_pax_field(self, value, encoding, fallback_encoding, fallback_errors):', 'def _block(self, count):', 'def isreg(self):', 'def isfile(self):', 'def isdir(self):', 'def issym(self):', 'def islnk(self):', 'def ischr(self):', 'def isblk(self):', 'def isfifo(self):', 'def issparse(self):', 'def isdev(self):', 'def __init__(self, name=None, mode="r", fileobj=None, format=None,', 'def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):', 'def not_compressed(comptype):', 'def taropen(cls, name, mode="r", fileobj=None, **kwargs):', 'def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):', 'def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):', 'def xzopen(cls, name, mode="r", fileobj=None, preset=None, **kwargs):', 'def close(self):', 'def getmember(self, name):', 'def getmembers(self):', 'def getnames(self):', 'def gettarinfo(self, name=None, arcname=None, fileobj=None):', 'def list(self, verbose=True, *, members=None):', 'def add(self, name, arcname=None, recursive=True, *, filter=None):', 'def addfile(self, tarinfo, fileobj=None):', 'def _get_filter_function(self, filter):', 'def extractall(self, path=".", members=None, *, numeric_owner=False,', 'def extract(self, member, path="", set_attrs=True, *, numeric_owner=False,', 'def _get_extract_tarinfo(self, member, filter_function, path):', 'def _extract_one(self, tarinfo, path, set_attrs, numeric_owner):', 'def _handle_nonfatal_error(self, e):', 'def _handle_fatal_error(self, e):', 'def extractfile(self, member):', 'def _extract_member(self, tarinfo, targetpath, set_attrs=True,', 'def makedir(self, tarinfo, targetpath):', 'def makefile(self, tarinfo, targetpath):', 'def makeunknown(self, tarinfo, targetpath):', 'def makefifo(self, tarinfo, targetpath):', 'def makedev(self, tarinfo, targetpath):', 'def makelink(self, tarinfo, targetpath):', 'def chown(self, tarinfo, targetpath, numeric_owner):', 'def chmod(self, tarinfo, targetpath):', 'def utime(self, tarinfo, targetpath):', 'def next(self):', 'def _getmember(self, name, tarinfo=None, normalize=False):', 'def _load(self):', 'def _check(self, mode=None):', 'def _find_link_target(self, tarinfo):', 'def __iter__(self):', 'def _dbg(self, level, msg):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def is_tarfile(name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\tempfile.py:
Classes: ['class _RandomNameSequence:', 'class _TemporaryFileCloser:', 'class _TemporaryFileWrapper:', 'class SpooledTemporaryFile(_io.IOBase):', 'class TemporaryDirectory:']
Functions: ['def _exists(fn):', 'def _infer_return_type(*args):', 'def _sanitize_params(prefix, suffix, dir):', 'def rng(self):', 'def __iter__(self):', 'def __next__(self):', 'def _candidate_tempdir_list():', 'def _get_default_tempdir():', 'def _get_candidate_names():', 'def _mkstemp_inner(dir, pre, suf, flags, output_type):', 'def _dont_follow_symlinks(func, path, *args):', 'def _resetperms(path):', 'def gettempprefix():', 'def gettempprefixb():', 'def _gettempdir():', 'def gettempdir():', 'def gettempdirb():', 'def mkstemp(suffix=None, prefix=None, dir=None, text=False):', 'def mkdtemp(suffix=None, prefix=None, dir=None):', 'def mktemp(suffix="", prefix=template, dir=None):', 'def __init__(self, file, name, delete=True, delete_on_close=True):', "def cleanup(self, windows=(_os.name == 'nt'), unlink=_os.unlink):", 'def close(self):', 'def __del__(self):', 'def __init__(self, file, name, delete=True, delete_on_close=True):', 'def __getattr__(self, name):', 'def func_wrapper(*args, **kwargs):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def close(self):', 'def __iter__(self):', "def NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,", 'def opener(*args):', "def TemporaryFile(mode='w+b', buffering=-1, encoding=None,", 'def opener(*args):', 'def opener(*args):', "def __init__(self, max_size=0, mode='w+b', buffering=-1,", 'def _check(self, file):', 'def rollover(self):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def __iter__(self):', 'def __del__(self):', 'def close(self):', 'def closed(self):', 'def encoding(self):', 'def errors(self):', 'def fileno(self):', 'def flush(self):', 'def isatty(self):', 'def mode(self):', 'def name(self):', 'def newlines(self):', 'def readable(self):', 'def read(self, *args):', 'def read1(self, *args):', 'def readinto(self, b):', 'def readinto1(self, b):', 'def readline(self, *args):', 'def readlines(self, *args):', 'def seekable(self):', 'def seek(self, *args):', 'def tell(self):', 'def truncate(self, size=None):', 'def writable(self):', 'def write(self, s):', 'def writelines(self, iterable):', 'def detach(self):', 'def __init__(self, suffix=None, prefix=None, dir=None,', 'def _rmtree(cls, name, ignore_errors=False, repeated=False):', 'def onexc(func, path, exc):', 'def _cleanup(cls, name, warn_message, ignore_errors=False, delete=True):', 'def __repr__(self):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def cleanup(self):']

Analyzed C:\dev\adn_trash_code\python_libs\textwrap.py:
Classes: ['class TextWrapper:']
Functions: ['def __init__(self,', 'def _munge_whitespace(self, text):', 'def _split(self, text):', 'def _fix_sentence_endings(self, chunks):', 'def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):', 'def _wrap_chunks(self, chunks):', 'def _split_chunks(self, text):', 'def wrap(self, text):', 'def fill(self, text):', 'def wrap(text, width=70, **kwargs):', 'def fill(text, width=70, **kwargs):', 'def shorten(text, width, **kwargs):', 'def dedent(text):', 'def indent(text, prefix, predicate=None):']

Analyzed C:\dev\adn_trash_code\python_libs\this.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\threading.py:
Classes: ['class _RLock:', 'class Condition:', 'class Semaphore:', 'class BoundedSemaphore(Semaphore):', 'class Event:', 'class Barrier:', 'class BrokenBarrierError(RuntimeError):', 'class Thread:', 'class is implemented.', 'class Timer(Thread):', 'class _MainThread(Thread):', 'class _DeleteDummyThreadOnDel:', 'class _DummyThread(Thread):']
Functions: ['def setprofile(func):', 'def setprofile_all_threads(func):', 'def getprofile():', 'def settrace(func):', 'def settrace_all_threads(func):', 'def gettrace():', 'def RLock(*args, **kwargs):', 'def __init__(self):', 'def __repr__(self):', 'def _at_fork_reinit(self):', 'def acquire(self, blocking=True, timeout=-1):', 'def release(self):', 'def __exit__(self, t, v, tb):', 'def _acquire_restore(self, state):', 'def _release_save(self):', 'def _is_owned(self):', 'def _recursion_count(self):', 'def __init__(self, lock=None):', 'def _at_fork_reinit(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def _release_save(self):', 'def _acquire_restore(self, x):', 'def _is_owned(self):', 'def wait(self, timeout=None):', 'def wait_for(self, predicate, timeout=None):', 'def notify(self, n=1):', 'def notify_all(self):', 'def notifyAll(self):', 'def __init__(self, value=1):', 'def __repr__(self):', 'def acquire(self, blocking=True, timeout=None):', 'def release(self, n=1):', 'def __exit__(self, t, v, tb):', 'def __init__(self, value=1):', 'def __repr__(self):', 'def release(self, n=1):', 'def __init__(self):', 'def __repr__(self):', 'def _at_fork_reinit(self):', 'def is_set(self):', 'def isSet(self):', 'def set(self):', 'def clear(self):', 'def wait(self, timeout=None):', 'def __init__(self, parties, action=None, timeout=None):', 'def __repr__(self):', 'def wait(self, timeout=None):', 'def _enter(self):', 'def _release(self):', 'def _wait(self, timeout):', 'def _exit(self):', 'def reset(self):', 'def abort(self):', 'def _break(self):', 'def parties(self):', 'def n_waiting(self):', 'def broken(self):', 'def _newname(name_template):', 'def __init__(self, group=None, target=None, name=None,', 'def _after_fork(self, new_ident=None):', 'def __repr__(self):', 'def start(self):', 'def run(self):', 'def _bootstrap(self):', 'def _set_ident(self):', 'def _set_native_id(self):', 'def _bootstrap_inner(self):', 'def _delete(self):', 'def join(self, timeout=None):', 'def name(self):', 'def name(self, name):', 'def ident(self):', 'def native_id(self):', 'def is_alive(self):', 'def daemon(self):', 'def daemon(self, daemonic):', 'def isDaemon(self):', 'def setDaemon(self, daemonic):', 'def getName(self):', 'def setName(self, name):', 'def ExceptHookArgs(args):', 'def excepthook(args, /):', 'def _make_invoke_excepthook():', 'def invoke_excepthook(thread):', 'def __init__(self, interval, function, args=None, kwargs=None):', 'def cancel(self):', 'def run(self):', 'def __init__(self):', 'def __init__(self, dummy_thread):', 'def __del__(self):', 'def __init__(self):', 'def is_alive(self):', 'def join(self, timeout=None):', 'def _after_fork(self, new_ident=None):', 'def current_thread():', 'def currentThread():', 'def active_count():', 'def activeCount():', 'def _enumerate():', 'def enumerate():', 'def _register_atexit(func, *arg, **kwargs):', 'def _shutdown():', 'def main_thread():', 'def _after_fork():']

Analyzed C:\dev\adn_trash_code\python_libs\timeit.py:
Classes: ['class Timer:']
Functions: ['def inner(_it, _timer{init}):', 'def reindent(src, indent):', 'def __init__(self, stmt="pass", setup="pass", timer=default_timer,', 'def print_exc(self, file=None):', 'def timeit(self, number=default_number):', 'def repeat(self, repeat=default_repeat, number=default_number):', 'def autorange(self, callback=None):', 'def timeit(stmt="pass", setup="pass", timer=default_timer,', 'def repeat(stmt="pass", setup="pass", timer=default_timer,', 'def main(args=None, *, _wrap_timer=None):', 'def callback(number, time_taken):', 'def format_time(dt):']

Analyzed C:\dev\adn_trash_code\python_libs\token.py:
Classes: []
Functions: ['def ISTERMINAL(x):', 'def ISNONTERMINAL(x):', 'def ISEOF(x):']

Analyzed C:\dev\adn_trash_code\python_libs\tokenize.py:
Classes: ["class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):", 'class TokenError(Exception): pass', 'class Untokenizer:']
Functions: ['def __repr__(self):', 'def exact_type(self):', "def group(*choices): return '(' + '|'.join(choices) + ')'", "def any(*choices): return group(*choices) + '*'", "def maybe(*choices): return group(*choices) + '?'", 'def _all_string_prefixes():', 'def _compile(expr):', 'def __init__(self):', 'def add_whitespace(self, start):', 'def add_backslash_continuation(self, start):', 'def escape_brackets(self, token):', 'def untokenize(self, iterable):', 'def compat(self, token, iterable):', 'def untokenize(iterable):', 'def _get_normal_name(orig_enc):', 'def detect_encoding(readline):', 'def read_or_stop():', 'def find_cookie(line):', 'def open(filename):', 'def tokenize(readline):', 'def generate_tokens(readline):', 'def main():', 'def perror(message):', 'def error(message, filename=None, location=None):', 'def _transform_msg(msg):', 'def _generate_tokens_from_c_tokenizer(source, encoding=None, extra_tokens=False):']

Analyzed C:\dev\adn_trash_code\python_libs\trace.py:
Classes: ['class _Ignore:', 'class CoverageResults:', 'class Trace:']
Functions: ['def __init__(self, modules=None, dirs=None):', 'def names(self, filename, modulename):', 'def _modname(path):', 'def _fullmodname(path):', 'def __init__(self, counts=None, calledfuncs=None, infile=None,', 'def is_ignored_filename(self, filename):', 'def update(self, other):', 'def write_results(self, show_missing=True, summary=False, coverdir=None, *,', 'def write_results_file(self, path, lines, lnotab, lines_hit, encoding=None):', 'def _find_lines_from_code(code, strs):', 'def _find_lines(code, strs):', 'def _find_strings(filename, encoding=None):', 'def _find_executable_linenos(filename):', 'def __init__(self, count=1, trace=1, countfuncs=0, countcallers=0,', 'def run(self, cmd):', 'def runctx(self, cmd, globals=None, locals=None):', 'def runfunc(self, func, /, *args, **kw):', 'def file_module_function_of(self, frame):', 'def globaltrace_trackcallers(self, frame, why, arg):', 'def globaltrace_countfuncs(self, frame, why, arg):', 'def globaltrace_lt(self, frame, why, arg):', 'def localtrace_trace_and_count(self, frame, why, arg):', 'def localtrace_trace(self, frame, why, arg):', 'def localtrace_count(self, frame, why, arg):', 'def results(self):', 'def main():', 'def parse_ignore_dir(s):']

Analyzed C:\dev\adn_trash_code\python_libs\traceback.py:
Classes: ['class _Sentinel:', 'class FrameSummary:', 'class StackSummary(list):', 'class _ExceptionPrintContext:', 'class TracebackException:']
Functions: ['def print_list(extracted_list, file=None):', 'def format_list(extracted_list):', 'def print_tb(tb, limit=None, file=None):', 'def format_tb(tb, limit=None):', 'def extract_tb(tb, limit=None):', 'def __repr__(self):', 'def _parse_value_tb(exc, value, tb):', 'def print_exception(exc, /, value=_sentinel, tb=_sentinel, limit=None, \\', 'def _print_exception_bltin(exc, /):', 'def format_exception(exc, /, value=_sentinel, tb=_sentinel, limit=None, \\', 'def format_exception_only(exc, /, value=_sentinel, *, show_group=False, **kwargs):', 'def _format_final_exc_line(etype, value, *, insert_final_newline=True, colorize=False):', 'def _safe_string(value, what, func=str):', 'def print_exc(limit=None, file=None, chain=True):', 'def format_exc(limit=None, chain=True):', 'def print_last(limit=None, file=None, chain=True):', 'def print_stack(f=None, limit=None, file=None):', 'def format_stack(f=None, limit=None):', 'def extract_stack(f=None, limit=None):', 'def clear_frames(tb):', 'def __init__(self, filename, lineno, name, *, lookup_line=True,', 'def __eq__(self, other):', 'def __getitem__(self, pos):', 'def __iter__(self):', 'def __repr__(self):', 'def __len__(self):', 'def _set_lines(self):', 'def _original_lines(self):', 'def _dedented_lines(self):', 'def line(self):', 'def walk_stack(f):', 'def walk_tb(tb):', 'def _walk_tb_with_full_positions(tb):', 'def _get_code_position(code, instruction_index):', 'def extract(klass, frame_gen, *, limit=None, lookup_lines=True,', 'def extended_frame_gen():', 'def _extract_from_extended_frame_gen(klass, frame_gen, *, limit=None,', 'def from_list(klass, a_list):', 'def format_frame_summary(self, frame_summary, **kwargs):', 'def output_line(lineno):', 'def _should_show_carets(self, start_offset, end_offset, all_lines, anchors):', 'def _spawns_full_line(value):', 'def format(self, **kwargs):', 'def _byte_offset_to_character_offset(str, offset):', 'def _extract_caret_anchors_from_line_segment(segment):', 'def normalize(lineno, offset):', 'def next_valid_char(lineno, col):', 'def increment(lineno, col):', 'def nextline(lineno, col):', 'def increment_until(lineno, col, stop):', 'def setup_positions(expr, force_valid=True):', 'def _display_width(line, offset=None):', 'def __init__(self):', 'def indent(self):', 'def emit(self, text_gen, margin_char=None):', 'def __init__(self, exc_type, exc_value, exc_traceback, *, limit=None,', 'def from_exception(cls, exc, *args, **kwargs):', 'def exc_type(self):', 'def exc_type_str(self):', 'def _load_lines(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def format_exception_only(self, *, show_group=False, _depth=0, **kwargs):', 'def _format_syntax_error(self, stype, **kwargs):', 'def format(self, *, chain=True, _ctx=None, **kwargs):', 'def print(self, *, file=None, chain=True, **kwargs):', 'def _substitution_cost(ch_a, ch_b):', 'def _compute_suggestion_error(exc_value, tb, wrong_name):', 'def _levenshtein_distance(a, b, max_cost):']

Analyzed C:\dev\adn_trash_code\python_libs\tracemalloc.py:
Classes: ['class Statistic:', 'class StatisticDiff:', 'class Frame:', 'class Traceback(Sequence):', 'class Trace:', 'class _Traces(Sequence):', 'class BaseFilter:', 'class Filter(BaseFilter):', 'class DomainFilter(BaseFilter):', 'class Snapshot:']
Functions: ['def _format_size(size, sign):', 'def __init__(self, traceback, size, count):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def _sort_key(self):', 'def __init__(self, traceback, size, size_diff, count, count_diff):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def _sort_key(self):', 'def _compare_grouped_stats(old_group, new_group):', 'def __init__(self, frame):', 'def filename(self):', 'def lineno(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def __str__(self):', 'def __repr__(self):', 'def __init__(self, frames, total_nframe=None):', 'def total_nframe(self):', 'def __len__(self):', 'def __getitem__(self, index):', 'def __contains__(self, frame):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def format(self, limit=None, most_recent_first=False):', 'def get_object_traceback(obj):', 'def __init__(self, trace):', 'def domain(self):', 'def size(self):', 'def traceback(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __str__(self):', 'def __repr__(self):', 'def __init__(self, traces):', 'def __len__(self):', 'def __getitem__(self, index):', 'def __contains__(self, trace):', 'def __eq__(self, other):', 'def __repr__(self):', 'def _normalize_filename(filename):', 'def __init__(self, inclusive):', 'def _match(self, trace):', 'def __init__(self, inclusive, filename_pattern,', 'def filename_pattern(self):', 'def _match_frame_impl(self, filename, lineno):', 'def _match_frame(self, filename, lineno):', 'def _match_traceback(self, traceback):', 'def _match(self, trace):', 'def __init__(self, inclusive, domain):', 'def domain(self):', 'def _match(self, trace):', 'def __init__(self, traces, traceback_limit):', 'def dump(self, filename):', 'def load(filename):', 'def _filter_trace(self, include_filters, exclude_filters, trace):', 'def filter_traces(self, filters):', 'def _group_by(self, key_type, cumulative):', 'def statistics(self, key_type, cumulative=False):', 'def compare_to(self, old_snapshot, key_type, cumulative=False):', 'def take_snapshot():']

Analyzed C:\dev\adn_trash_code\python_libs\tty.py:
Classes: []
Functions: ['def cfmakeraw(mode):', 'def cfmakecbreak(mode):', 'def setraw(fd, when=TCSAFLUSH):', 'def setcbreak(fd, when=TCSAFLUSH):']

Analyzed C:\dev\adn_trash_code\python_libs\turtle.py:
Classes: ['class Vec2D(tuple):', 'class ScrolledCanvas(TK.Frame):', 'class _Root(TK.Tk):', 'class TurtleScreenBase(object):', 'class Terminator (Exception):', 'class TurtleGraphicsError(Exception):', 'class Shape(object):', 'class Tbuffer(object):', 'class TurtleScreen(TurtleScreenBase):', 'class TNavigator(object):', 'class TPen(object):', 'class _TurtleImage(object):', 'class RawTurtle(TPen, TNavigator):', 'class _Screen(TurtleScreen):', 'class Turtle(RawTurtle):']
Functions: ['def config_dict(filename):', 'def readconfig(cfgdict):', 'def __new__(cls, x, y):', 'def __add__(self, other):', 'def __mul__(self, other):', 'def __rmul__(self, other):', 'def __sub__(self, other):', 'def __neg__(self):', 'def __abs__(self):', 'def rotate(self, angle):', 'def __getnewargs__(self):', 'def __repr__(self):', 'def __methodDict(cls, _dict):', 'def __methods(cls):', 'def __forwardmethods(fromClass, toClass, toPart, exclude = ()):', 'def __init__(self, master, width=500, height=350,', 'def reset(self, canvwidth=None, canvheight=None, bg = None):', 'def adjustScrolls(self):', 'def onResize(self, event):', 'def bbox(self, *args):', 'def cget(self, *args, **kwargs):', 'def config(self, *args, **kwargs):', 'def bind(self, *args, **kwargs):', 'def unbind(self, *args, **kwargs):', 'def focus_force(self):', 'def __init__(self):', 'def setupcanvas(self, width, height, cwidth, cheight):', 'def _getcanvas(self):', 'def set_geometry(self, width, height, startx, starty):', 'def ondestroy(self, destroy):', 'def win_width(self):', 'def win_height(self):', 'def _blankimage(self):', 'def _image(self, filename):', 'def __init__(self, cv):', 'def _createpoly(self):', 'def _drawpoly(self, polyitem, coordlist, fill=None,', 'def _createline(self):', 'def _drawline(self, lineitem, coordlist=None,', 'def _delete(self, item):', 'def _update(self):', 'def _delay(self, delay):', 'def _iscolorstring(self, color):', 'def _bgcolor(self, color=None):', 'def _write(self, pos, txt, align, font, pencolor):', 'def _onclick(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _onrelease(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _ondrag(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _onscreenclick(self, fun, num=1, add=None):', 'def eventfun(event):', 'def _onkeyrelease(self, fun, key):', 'def eventfun(event):', 'def _onkeypress(self, fun, key=None):', 'def eventfun(event):', 'def _listen(self):', 'def _ontimer(self, fun, t):', 'def _createimage(self, image):', 'def _drawimage(self, item, pos, image):', 'def _setbgpic(self, item, image):', 'def _type(self, item):', 'def _pointlist(self, item):', 'def _setscrollregion(self, srx1, sry1, srx2, sry2):', 'def _rescale(self, xscalefactor, yscalefactor):', 'def _resize(self, canvwidth=None, canvheight=None, bg=None):', 'def _window_size(self):', 'def mainloop(self):', 'def textinput(self, title, prompt):', 'def numinput(self, title, prompt, default=None, minval=None, maxval=None):', 'def __init__(self, type_, data=None):', 'def addcomponent(self, poly, fill, outline=None):', 'def __init__(self, bufsize=10):', 'def reset(self, bufsize=None):', 'def push(self, item):', 'def pop(self):', 'def nr_of_items(self):', 'def __repr__(self):', 'def __init__(self, cv, mode=_CFG["mode"],', 'def clear(self):', 'def mode(self, mode=None):', 'def setworldcoordinates(self, llx, lly, urx, ury):', 'def register_shape(self, name, shape=None):', 'def _colorstr(self, color):', 'def _color(self, cstr):', 'def colormode(self, cmode=None):', 'def reset(self):', 'def turtles(self):', 'def bgcolor(self, *args):', 'def tracer(self, n=None, delay=None):', 'def delay(self, delay=None):', 'def _incrementudc(self):', 'def update(self):', 'def window_width(self):', 'def window_height(self):', 'def getcanvas(self):', 'def getshapes(self):', 'def onclick(self, fun, btn=1, add=None):', 'def onkey(self, fun, key):', 'def onkeypress(self, fun, key=None):', 'def listen(self, xdummy=None, ydummy=None):', 'def ontimer(self, fun, t=0):', 'def bgpic(self, picname=None):', 'def screensize(self, canvwidth=None, canvheight=None, bg=None):', 'def __init__(self, mode=DEFAULT_MODE):', 'def reset(self):', 'def _setmode(self, mode=None):', 'def _setDegreesPerAU(self, fullcircle):', 'def degrees(self, fullcircle=360.0):', 'def radians(self):', 'def _go(self, distance):', 'def _rotate(self, angle):', 'def _goto(self, end):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def forward(self, distance):', 'def back(self, distance):', 'def right(self, angle):', 'def left(self, angle):', 'def pos(self):', 'def xcor(self):', 'def ycor(self):', 'def goto(self, x, y=None):', 'def home(self):', 'def setx(self, x):', 'def sety(self, y):', 'def distance(self, x, y=None):', 'def towards(self, x, y=None):', 'def heading(self):', 'def setheading(self, to_angle):', 'def circle(self, radius, extent = None, steps = None):', 'def speed(self, s=0):', 'def _tracer(self, a=None, b=None):', 'def _delay(self, n=None):', 'def __init__(self, resizemode=_CFG["resizemode"]):', 'def _reset(self, pencolor=_CFG["pencolor"],', 'def resizemode(self, rmode=None):', 'def pensize(self, width=None):', 'def penup(self):', 'def pendown(self):', 'def isdown(self):', 'def speed(self, speed=None):', 'def color(self, *args):', 'def pencolor(self, *args):', 'def fillcolor(self, *args):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def showturtle(self):', 'def hideturtle(self):', 'def isvisible(self):', 'def pen(self, pen=None, **pendict):', 'def _newLine(self, usePos = True):', 'def _update(self, count=True, forced=False):', 'def _color(self, args):', 'def _colorstr(self, args):', 'def __init__(self, screen, shapeIndex):', 'def _setshape(self, shapeIndex):', 'def __init__(self, canvas=None,', 'def reset(self):', 'def setundobuffer(self, size):', 'def undobufferentries(self):', 'def _clear(self):', 'def clear(self):', 'def _update_data(self):', 'def _update(self):', 'def _tracer(self, flag=None, delay=None):', 'def _color(self, args):', 'def _colorstr(self, args):', 'def _cc(self, args):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def clone(self):', 'def shape(self, name=None):', 'def shapesize(self, stretch_wid=None, stretch_len=None, outline=None):', 'def shearfactor(self, shear=None):', 'def tiltangle(self, angle=None):', 'def tilt(self, angle):', 'def shapetransform(self, t11=None, t12=None, t21=None, t22=None):', 'def _polytrafo(self, poly):', 'def get_shapepoly(self):', 'def _getshapepoly(self, polygon, compound=False):', 'def _drawturtle(self):', 'def stamp(self):', 'def _clearstamp(self, stampid):', 'def clearstamp(self, stampid):', 'def clearstamps(self, n=None):', 'def _goto(self, end):', 'def _undogoto(self, entry):', 'def _rotate(self, angle):', 'def _newLine(self, usePos=True):', 'def filling(self):', 'def begin_fill(self):', 'def end_fill(self):', 'def dot(self, size=None, *color):', 'def _write(self, txt, align, font):', 'def write(self, arg, move=False, align="left", font=("Arial", 8, "normal")):', 'def begin_poly(self):', 'def end_poly(self):', 'def get_poly(self):', 'def getscreen(self):', 'def getturtle(self):', 'def _delay(self, delay=None):', 'def onclick(self, fun, btn=1, add=None):', 'def onrelease(self, fun, btn=1, add=None):', 'def ondrag(self, fun, btn=1, add=None):', 'def _undo(self, action, data):', 'def undo(self):', 'def Screen():', 'def __init__(self):', 'def setup(self, width=_CFG["width"], height=_CFG["height"],', 'def title(self, titlestring):', 'def _destroy(self):', 'def bye(self):', 'def exitonclick(self):', 'def exitGracefully(x, y):', 'def __init__(self,', 'def write_docstringdict(filename="turtle_docstringdict"):', 'def read_docstrings(lang):', 'def getmethparlist(ob):', 'def _turtle_docrevise(docstr):', 'def _screen_docrevise(docstr):', 'def {name}{paramslist}:', 'def _make_global_funcs(functions, cls, obj, init, docrevise):', 'def switchpen():', 'def demo1():', 'def demo2():', 'def baba(xdummy, ydummy):']

Analyzed C:\dev\adn_trash_code\python_libs\types.py:
Classes: ['class _C:', 'class Foo(Generic[T]): ...', 'class Bar(Foo[int], float): ...', 'class Baz(list[str]): ...', 'class DynamicClassAttribute:', 'class _GeneratorWrapper:']
Functions: ['def _f(): pass', 'def _cell_factory():', 'def f():', 'def _g():', 'def _m(self): pass', 'def new_class(name, bases=(), kwds=None, exec_body=None):', 'def resolve_bases(bases):', 'def prepare_class(name, bases=(), kwds=None):', 'def _calculate_meta(meta, bases):', 'def get_original_bases(cls, /):', 'def __init__(self, fget=None, fset=None, fdel=None, doc=None):', 'def __get__(self, instance, ownerclass=None):', 'def __set__(self, instance, value):', 'def __delete__(self, instance):', 'def getter(self, fget):', 'def setter(self, fset):', 'def deleter(self, fdel):', 'def __init__(self, gen):', 'def send(self, val):', 'def throw(self, tp, *rest):', 'def close(self):', 'def gi_code(self):', 'def gi_frame(self):', 'def gi_running(self):', 'def gi_yieldfrom(self):', 'def __next__(self):', 'def __iter__(self):', 'def coroutine(func):', 'def wrapped(*args, **kwargs):', 'def __getattr__(name):']

Analyzed C:\dev\adn_trash_code\python_libs\typing.py:
Classes: ['class _Sentinel:', 'class _Final:', 'class _NotIterable:', 'class _SpecialForm(_Final, _NotIterable, _root=True):', 'class _TypedCacheSpecialForm(_SpecialForm, _root=True):', 'class _AnyMeta(type):', 'class Any(metaclass=_AnyMeta):', 'class Foo:', 'class Starship:', 'class Connection:', 'class FastConnector(Connection):', 'class Parent: pass', 'class Child(Parent): pass', 'class Unrelated: pass', 'class ForwardRef(_Final, _root=True):', 'class _BaseGenericAlias(_Final, _root=True):', 'class _GenericAlias(_BaseGenericAlias, _root=True):', 'class _SpecialGenericAlias(_NotIterable, _BaseGenericAlias, _root=True):', 'class _DeprecatedGenericAlias(_SpecialGenericAlias, _root=True):', 'class _CallableGenericAlias(_NotIterable, _GenericAlias, _root=True):', 'class _CallableType(_SpecialGenericAlias, _root=True):', 'class _TupleType(_SpecialGenericAlias, _root=True):', 'class _UnionGenericAlias(_NotIterable, _GenericAlias, _root=True):', 'class _LiteralGenericAlias(_GenericAlias, _root=True):', 'class _ConcatenateGenericAlias(_GenericAlias, _root=True):', 'class Bar(Generic[Unpack[Ts]]): ...', 'class Bar(Generic[*Ts]): ...', 'class Bar[*Ts]: ...', 'class Movie(TypedDict):', 'class _UnpackGenericAlias(_GenericAlias, _root=True):', 'class _TypingEllipsis:', 'class _ProtocolMeta(ABCMeta):', 'class Protocol(Generic, metaclass=_ProtocolMeta):', 'class Proto(Protocol):', 'class C:', 'class GenProto[T](Protocol):', 'class _AnnotatedAlias(_NotIterable, _GenericAlias, _root=True):', 'class Closable(Protocol):', 'class Base:', 'class Sub(Base):', 'class Leaf:', 'class Other(Leaf):  # Error reported by type checker', 'class User: ...  # Abstract base for User classes', 'class BasicUser(User): ...', 'class ProUser(User): ...', 'class TeamUser(User): ...', 'class SupportsInt(Protocol):', 'class SupportsFloat(Protocol):', 'class SupportsComplex(Protocol):', 'class SupportsBytes(Protocol):', 'class SupportsIndex(Protocol):', 'class SupportsAbs[T](Protocol):', 'class SupportsRound[T](Protocol):', 'class NamedTupleMeta(type):', 'class Employee(NamedTuple):', 'class _TypedDictMeta(type):', 'class Point2D(TypedDict, total=False):', 'class body be required.', 'class Point2D(TypedDict):', 'class DatabaseUser(TypedDict):', 'class Movie(TypedDict, total=False):', 'class Movie(TypedDict):', 'class Movie(TypedDict):', 'class NewType:', 'class Dummy:', 'class IO(Generic[AnyStr]):', 'class BinaryIO(IO[bytes]):', 'class TextIO(IO[str]):', 'class _IdentityCallable(Protocol):', 'class CustomerModel:', 'class ModelBase: ...', 'class CustomerModel(ModelBase):', 'class ModelMeta(type): ...', 'class ModelBase(metaclass=ModelMeta): ...', 'class CustomerModel(ModelBase):', 'class Base:', 'class Child(Base):']
Functions: ['def _type_convert(arg, module=None, *, allow_special_forms=False):', 'def _type_check(arg, msg, is_argument=True, module=None, *, allow_special_forms=False):', 'def _is_param_expr(arg):', 'def _should_unflatten_callable_args(typ, args):', 'def _type_repr(obj):', 'def _collect_type_parameters(args, *, enforce_default_ordering: bool = True):', 'def _check_generic_specialization(cls, arguments):', 'def _unpack_args(*args):', 'def _deduplicate(params, *, unhashable_fallback=False):', 'def _deduplicate_unhashable(unhashable_params):', 'def _compare_args_orderless(first_args, second_args):', 'def _remove_dups_flatten(parameters):', 'def _flatten_literal_params(parameters):', 'def _tp_cache(func=None, /, *, typed=False):', 'def decorator(func):', 'def inner(*args, **kwds):', 'def _deprecation_warning_for_no_type_params_passed(funcname: str) -> None:', 'def __repr__(self):', 'def _eval_type(t, globalns, localns, type_params=_sentinel, *, recursive_guard=frozenset()):', 'def __init_subclass__(cls, /, *args, **kwds):', 'def __iter__(self): raise TypeError()', 'def __init__(self, getitem):', 'def __getattr__(self, item):', 'def __mro_entries__(self, bases):', 'def __repr__(self):', 'def __reduce__(self):', 'def __call__(self, *args, **kwds):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __getitem__(self, parameters):', 'def __getitem__(self, parameters):', 'def __instancecheck__(self, obj):', 'def __repr__(self):', 'def __new__(cls, *args, **kwargs):', 'def NoReturn(self, parameters):', 'def stop() -> NoReturn:', 'def Never(self, parameters):', 'def never_call_me(arg: Never) -> None:', 'def int_or_str(arg: int | str) -> None:', 'def Self(self, parameters):', 'def return_self(self) -> Self:', 'def LiteralString(self, parameters):', 'def run_query(sql: LiteralString) -> None:', 'def caller(arbitrary_string: str, literal_string: LiteralString) -> None:', 'def ClassVar(self, parameters):', 'def Final(self, parameters):', 'def Union(self, parameters):', 'def _make_union(left, right):', 'def Optional(self, parameters):', 'def Literal(self, *parameters):', 'def validate_simple(data: Any) -> Literal[True]:  # always returns True', 'def open_helper(file: str, mode: MODE) -> str:', 'def TypeAlias(self, parameters):', 'def Concatenate(self, parameters):', 'def TypeGuard(self, parameters):', 'def is_str_list(val: list[object]) -> TypeGuard[list[str]]:', 'def func1(val: list[object]):', 'def TypeIs(self, parameters):', 'def is_parent(val: object) -> TypeIs[Parent]:', 'def run(arg: Child | Unrelated):', 'def __init__(self, arg, is_argument=True, module=None, *, is_class=False):', 'def _evaluate(self, globalns, localns, type_params=_sentinel, *, recursive_guard):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __repr__(self):', 'def _is_unpacked_typevartuple(x: Any) -> bool:', 'def _is_typevar_like(x: Any) -> bool:', 'def _typevar_subst(self, arg):', 'def _typevartuple_prepare_subst(self, alias, args):', 'def _paramspec_subst(self, arg):', 'def _paramspec_prepare_subst(self, alias, args):', 'def _generic_class_getitem(cls, args):', 'def _generic_init_subclass(cls, *args, **kwargs):', 'def _is_dunder(attr):', 'def __init__(self, origin, *, inst=True, name=None):', 'def __call__(self, *args, **kwargs):', 'def __mro_entries__(self, bases):', 'def __getattr__(self, attr):', 'def __setattr__(self, attr, val):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __dir__(self):', 'def __init__(self, origin, args, *, inst=True, name=None):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __or__(self, right):', 'def __ror__(self, left):', 'def __getitem__(self, args):', 'def _determine_new_args(self, args):', 'def _make_substitution(self, args, new_arg_by_param):', 'def copy_with(self, args):', 'def __repr__(self):', 'def __reduce__(self):', 'def __mro_entries__(self, bases):', 'def __iter__(self):', 'def __init__(self, origin, nparams, *, inst=True, name=None, defaults=()):', 'def __getitem__(self, params):', 'def copy_with(self, params):', 'def __repr__(self):', 'def __subclasscheck__(self, cls):', 'def __reduce__(self):', 'def __or__(self, right):', 'def __ror__(self, left):', 'def __init__(', 'def __instancecheck__(self, inst):', 'def __repr__(self):', 'def __reduce__(self):', 'def copy_with(self, params):', 'def __getitem__(self, params):', 'def __getitem_inner__(self, params):', 'def __getitem__(self, params):', 'def copy_with(self, params):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __reduce__(self):', 'def _value_and_type_iter(parameters):', 'def __eq__(self, other):', 'def __hash__(self):', 'def copy_with(self, params):', 'def Unpack(self, parameters):', 'def foo(**kwargs: Unpack[Movie]): ...', 'def __repr__(self):', 'def __getitem__(self, args):', 'def __typing_unpacked_tuple_args__(self):', 'def __typing_is_unpacked_typevartuple__(self):', 'def _get_protocol_attrs(cls):', 'def _no_init_or_replace_init(self, *args, **kwargs):', "def _caller(depth=1, default='__main__'):", 'def _allow_reckless_class_checks(depth=2):', 'def _lazy_load_getattr_static():', 'def _pickle_psargs(psargs):', 'def _pickle_pskwargs(pskwargs):', 'def _type_check_issubclass_arg_1(arg):', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def __init__(cls, *args, **kwargs):', 'def __subclasscheck__(cls, other):', 'def __instancecheck__(cls, instance):', 'def _proto_hook(cls, other):', 'def meth(self) -> int:', 'def meth(self) -> int:', 'def func(x: Proto) -> int:', 'def meth(self) -> T:', 'def __init_subclass__(cls, *args, **kwargs):', 'def __init__(self, origin, metadata):', 'def copy_with(self, params):', 'def __repr__(self):', 'def __reduce__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __getattr__(self, attr):', 'def __mro_entries__(self, bases):', 'def Annotated(self, *params):', 'def runtime_checkable(cls):', 'def close(self): ...', 'def cast(typ, val):', 'def assert_type(val, typ, /):', 'def greet(name: str) -> None:', 'def get_type_hints(obj, globalns=None, localns=None, include_extras=False):', 'def _strip_annotations(t):', 'def get_origin(tp):', 'def get_args(tp):', 'def is_typeddict(tp):', 'def assert_never(arg: Never, /) -> Never:', 'def int_or_str(arg: int | str) -> None:', 'def no_type_check(arg):', 'def no_type_check_decorator(decorator):', 'def wrapped_decorator(*args, **kwds):', 'def _overload_dummy(*args, **kwds):', 'def overload(func):', 'def utf8(value: None) -> None: ...', 'def utf8(value: bytes) -> bytes: ...', 'def utf8(value: str) -> bytes: ...', 'def utf8(value: None) -> None: ...', 'def utf8(value: bytes) -> bytes: ...', 'def utf8(value: str) -> bytes: ...', 'def utf8(value):', 'def get_overloads(func):', 'def clear_overloads():', 'def final(f):', 'def done(self) -> None:', 'def done(self) -> None:  # Error reported by type checker', 'def new_user[U](user_class: Type[U]) -> U:', 'def __int__(self) -> int:', 'def __float__(self) -> float:', 'def __complex__(self) -> complex:', 'def __bytes__(self) -> bytes:', 'def __index__(self) -> int:', 'def __abs__(self) -> T:', 'def __round__(self, ndigits: int = 0) -> T:', 'def _make_nmtuple(name, types, module, defaults = ()):', 'def __new__(cls, typename, bases, ns):', 'def NamedTuple(typename, fields=_sentinel, /, **kwargs):', 'def _namedtuple_mro_entries(bases):', 'def _get_typeddict_qualifiers(annotation_type):', 'def __new__(cls, name, bases, ns, total=True):', 'def __subclasscheck__(cls, other):', 'def TypedDict(typename, fields=_sentinel, /, *, total=True):', 'def Required(self, parameters):', 'def NotRequired(self, parameters):', 'def ReadOnly(self, parameters):', 'def mutate_movie(m: Movie) -> None:', 'def name_by_id(user_id: UserId) -> str:', 'def __init__(self, name, tp):', 'def __mro_entries__(self, bases):', 'def __init_subclass__(cls):', 'def __repr__(self):', 'def __reduce__(self):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def mode(self) -> str:', 'def name(self) -> str:', 'def close(self) -> None:', 'def closed(self) -> bool:', 'def fileno(self) -> int:', 'def flush(self) -> None:', 'def isatty(self) -> bool:', 'def read(self, n: int = -1) -> AnyStr:', 'def readable(self) -> bool:', 'def readline(self, limit: int = -1) -> AnyStr:', 'def readlines(self, hint: int = -1) -> List[AnyStr]:', 'def seek(self, offset: int, whence: int = 0) -> int:', 'def seekable(self) -> bool:', 'def tell(self) -> int:', 'def truncate(self, size: int = None) -> int:', 'def writable(self) -> bool:', 'def write(self, s: AnyStr) -> int:', 'def writelines(self, lines: List[AnyStr]) -> None:', "def __enter__(self) -> 'IO[AnyStr]':", 'def __exit__(self, type, value, traceback) -> None:', 'def write(self, s: Union[bytes, bytearray]) -> int:', "def __enter__(self) -> 'BinaryIO':", 'def buffer(self) -> BinaryIO:', 'def encoding(self) -> str:', 'def errors(self) -> Optional[str]:', 'def line_buffering(self) -> bool:', 'def newlines(self) -> Any:', "def __enter__(self) -> 'TextIO':", 'def reveal_type[T](obj: T, /) -> T:', 'def __call__[T](self, arg: T, /) -> T:', 'def dataclass_transform(', 'def create_model[T](cls: type[T]) -> type[T]:', 'def decorator(cls_or_fn):', 'def override[F: _Func](method: F, /) -> F:', 'def method(self) -> None:', 'def method(self) -> None:', 'def is_protocol(tp: type, /) -> bool:', 'def get_protocol_members(tp: type, /) -> frozenset[str]:', 'def __getattr__(attr):']

Analyzed C:\dev\adn_trash_code\python_libs\uuid.py:
Classes: ['class SafeUUID:', 'class UUID:']
Functions: ['def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,', 'def __getstate__(self):', 'def __setstate__(self, state):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __le__(self, other):', 'def __ge__(self, other):', 'def __hash__(self):', 'def __int__(self):', 'def __repr__(self):', 'def __setattr__(self, name, value):', 'def __str__(self):', 'def bytes(self):', 'def bytes_le(self):', 'def fields(self):', 'def time_low(self):', 'def time_mid(self):', 'def time_hi_version(self):', 'def clock_seq_hi_variant(self):', 'def clock_seq_low(self):', 'def time(self):', 'def clock_seq(self):', 'def node(self):', 'def hex(self):', 'def urn(self):', 'def variant(self):', 'def version(self):', 'def _get_command_stdout(command, *args):', 'def _is_universal(mac):', 'def _find_mac_near_keyword(command, args, keywords, get_word_index):', 'def _parse_mac(word):', 'def _find_mac_under_heading(command, args, heading):', 'def _ifconfig_getnode():', 'def _ip_getnode():', 'def _arp_getnode():', 'def _lanscan_getnode():', 'def _netstat_getnode():', 'def _unix_getnode():', 'def _windll_getnode():', 'def _random_getnode():', 'def getnode():', 'def uuid1(node=None, clock_seq=None):', 'def uuid3(namespace, name):', 'def uuid4():', 'def uuid5(namespace, name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\warnings.py:
Classes: ['class _OptionError(Exception):', 'class WarningMessage(object):', 'class catch_warnings(object):', 'class deprecated:', 'class A:']
Functions: ['def showwarning(message, category, filename, lineno, file=None, line=None):', 'def formatwarning(message, category, filename, lineno, line=None):', 'def _showwarnmsg_impl(msg):', 'def _formatwarnmsg_impl(msg):', 'def _showwarnmsg(msg):', 'def _formatwarnmsg(msg):', 'def filterwarnings(action, message="", category=Warning, module="", lineno=0,', 'def simplefilter(action, category=Warning, lineno=0, append=False):', 'def _add_filter(*item, append):', 'def resetwarnings():', 'def _processoptions(args):', 'def _setoption(arg):', 'def _getaction(action):', 'def _getcategory(category):', 'def _is_internal_filename(filename):', 'def _is_filename_to_skip(filename, skip_file_prefixes):', 'def _is_internal_frame(frame):', 'def _next_external_frame(frame, skip_file_prefixes):', 'def warn(message, category=None, stacklevel=1, source=None,', 'def warn_explicit(message, category, filename, lineno,', 'def __init__(self, message, category, filename, lineno, file=None,', 'def __str__(self):', 'def __init__(self, *, record=False, module=None,', 'def __repr__(self):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def f():', 'def g(x: int) -> int: ...', 'def g(x: str) -> int: ...', 'def __init__(', 'def __call__(self, arg, /):', 'def __new__(cls, *args, **kwargs):', 'def __init_subclass__(*args, **kwargs):', 'def __init_subclass__(*args, **kwargs):', 'def wrapper(*args, **kwargs):', 'def _deprecated(name, message=_DEPRECATED_MSG, *, remove, _version=sys.version_info):', 'def _warn_unawaited_coroutine(coro):', 'def extract():', 'def _filters_mutated():']

Analyzed C:\dev\adn_trash_code\python_libs\wave.py:
Classes: ['class Error(Exception):', 'class _Chunk:', 'class Wave_read:', 'class Wave_write:']
Functions: ['def _byteswap(data, width):', 'def __init__(self, file, align=True, bigendian=True, inclheader=False):', 'def getname(self):', 'def close(self):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def read(self, size=-1):', 'def skip(self):', 'def initfp(self, file):', 'def __init__(self, f):', 'def __del__(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def getfp(self):', 'def rewind(self):', 'def close(self):', 'def tell(self):', 'def getnchannels(self):', 'def getnframes(self):', 'def getsampwidth(self):', 'def getframerate(self):', 'def getcomptype(self):', 'def getcompname(self):', 'def getparams(self):', 'def getmarkers(self):', 'def getmark(self, id):', 'def setpos(self, pos):', 'def readframes(self, nframes):', 'def _read_fmt_chunk(self, chunk):', 'def __init__(self, f):', 'def initfp(self, file):', 'def __del__(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def setnchannels(self, nchannels):', 'def getnchannels(self):', 'def setsampwidth(self, sampwidth):', 'def getsampwidth(self):', 'def setframerate(self, framerate):', 'def getframerate(self):', 'def setnframes(self, nframes):', 'def getnframes(self):', 'def setcomptype(self, comptype, compname):', 'def getcomptype(self):', 'def getcompname(self):', 'def setparams(self, params):', 'def getparams(self):', 'def setmark(self, id, pos, name):', 'def getmark(self, id):', 'def getmarkers(self):', 'def tell(self):', 'def writeframesraw(self, data):', 'def writeframes(self, data):', 'def close(self):', 'def _ensure_header_written(self, datasize):', 'def _write_header(self, initlength):', 'def _patchheader(self):', 'def open(f, mode=None):']

Analyzed C:\dev\adn_trash_code\python_libs\weakref.py:
Classes: ['class WeakMethod(ref):', 'class WeakValueDictionary(_collections_abc.MutableMapping):', 'class KeyedRef(ref):', 'class WeakKeyDictionary(_collections_abc.MutableMapping):', 'class finalize:', 'class _Info:']
Functions: ['def __new__(cls, meth, callback=None):', 'def _cb(arg):', 'def __call__(self):', 'def __eq__(self, other):', 'def __ne__(self, other):', 'def __init__(self, other=(), /, **kw):', 'def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):', 'def _commit_removals(self, _atomic_removal=_remove_dead_weakref):', 'def __getitem__(self, key):', 'def __delitem__(self, key):', 'def __len__(self):', 'def __contains__(self, key):', 'def __repr__(self):', 'def __setitem__(self, key, value):', 'def copy(self):', 'def __deepcopy__(self, memo):', 'def get(self, key, default=None):', 'def items(self):', 'def keys(self):', 'def itervaluerefs(self):', 'def values(self):', 'def popitem(self):', 'def pop(self, key, *args):', 'def setdefault(self, key, default=None):', 'def update(self, other=None, /, **kwargs):', 'def valuerefs(self):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __new__(type, ob, callback, key):', 'def __init__(self, ob, callback, key):', 'def __init__(self, dict=None):', 'def remove(k, selfref=ref(self)):', 'def _commit_removals(self):', 'def _scrub_removals(self):', 'def __delitem__(self, key):', 'def __getitem__(self, key):', 'def __len__(self):', 'def __repr__(self):', 'def __setitem__(self, key, value):', 'def copy(self):', 'def __deepcopy__(self, memo):', 'def get(self, key, default=None):', 'def __contains__(self, key):', 'def items(self):', 'def keys(self):', 'def values(self):', 'def keyrefs(self):', 'def popitem(self):', 'def pop(self, key, *args):', 'def setdefault(self, key, default=None):', 'def update(self, dict=None, /, **kwargs):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __init__(self, obj, func, /, *args, **kwargs):', 'def __call__(self, _=None):', 'def detach(self):', 'def peek(self):', 'def alive(self):', 'def atexit(self):', 'def atexit(self, value):', 'def __repr__(self):', 'def _select_for_exit(cls):', 'def _exitfunc(cls):']

Analyzed C:\dev\adn_trash_code\python_libs\webbrowser.py:
Classes: ['class Error(Exception):', 'class BaseBrowser:', 'class GenericBrowser(BaseBrowser):', 'class BackgroundBrowser(GenericBrowser):', 'class UnixBrowser(BaseBrowser):', 'class Mozilla(UnixBrowser):', 'class Epiphany(UnixBrowser):', 'class Chrome(UnixBrowser):', 'class Opera(UnixBrowser):', 'class Elinks(UnixBrowser):', 'class Konqueror(BaseBrowser):', 'class Edge(UnixBrowser):', 'class WindowsDefault(BaseBrowser):', 'class MacOSXOSAScript(BaseBrowser):', 'class IOSBrowser(BaseBrowser):']
Functions: ['def register(name, klass, instance=None, *, preferred=False):', 'def get(using=None):', 'def open(url, new=0, autoraise=True):', 'def open_new(url):', 'def open_new_tab(url):', 'def _synthesize(browser, *, preferred=False):', 'def __init__(self, name=""):', 'def open(self, url, new=0, autoraise=True):', 'def open_new(self, url):', 'def open_new_tab(self, url):', 'def __init__(self, name):', 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def _invoke(self, args, remote, autoraise, url=None):', 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def register_X_browsers():', 'def register_standard_browsers():', 'def open(self, url, new=0, autoraise=True):', "def __init__(self, name='default'):", 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def parse_args(arg_list: list[str] | None):', 'def main(arg_list: list[str] | None = None):']

Analyzed C:\dev\adn_trash_code\python_libs\zipapp.py:
Classes: ['class ZipAppError(ValueError):']
Functions: ['def _maybe_open(archive, mode):', 'def _write_file_prefix(f, interpreter):', 'def _copy_archive(archive, new_archive, interpreter=None):', 'def create_archive(source, target=None, interpreter=None, main=None,', 'def get_interpreter(archive):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\zipimport.py:
Classes: ['class ZipImportError(ImportError):', 'class zipimporter(_bootstrap_external._LoaderBasics):']
Functions: ['def __init__(self, path):', 'def find_spec(self, fullname, target=None):', 'def get_code(self, fullname):', 'def get_data(self, pathname):', 'def get_filename(self, fullname):', 'def get_source(self, fullname):', 'def is_package(self, fullname):', 'def load_module(self, fullname):', 'def get_resource_reader(self, fullname):', 'def _get_files(self):', 'def invalidate_caches(self):', 'def __repr__(self):', 'def _get_module_path(self, fullname):', 'def _is_dir(self, path):', 'def _get_module_info(self, fullname):', 'def _read_directory(archive):', 'def _get_decompress_func():', 'def _get_data(archive, toc_entry):', 'def _eq_mtime(t1, t2):', 'def _unmarshal_code(self, pathname, fullpath, fullname, data):', 'def _normalize_line_endings(source):', 'def _compile_source(pathname, source):', 'def _parse_dostime(d, t):', 'def _get_mtime_and_size_of_source(self, path):', 'def _get_pyc_source(self, path):', 'def _get_module_code(self, fullname):']

Analyzed C:\dev\adn_trash_code\python_libs\_aix_support.py:
Classes: []
Functions: ['def _read_cmd_output(commandstring, capture_stderr=False):', 'def _aix_tag(vrtl, bd):', 'def _aix_vrtl(vrmf):', 'def _aix_bos_rte():', 'def aix_platform():', 'def _aix_bgt():', 'def aix_buildtag():']

Analyzed C:\dev\adn_trash_code\python_libs\_android_support.py:
Classes: ['class TextLogStream(io.TextIOWrapper):', 'class BinaryLogStream(io.RawIOBase):', 'class Logcat:']
Functions: ['def init_streams(android_log_write, stdout_prio, stderr_prio):', 'def __init__(self, prio, tag, fileno=None, **kwargs):', 'def __repr__(self):', 'def write(self, s):', 'def _write_chunk(self, s):', 'def flush(self):', 'def line_buffering(self):', 'def __init__(self, prio, tag, fileno=None):', 'def __repr__(self):', 'def writable(self):', 'def write(self, b):', 'def fileno(self):', 'def __init__(self, android_log_write):', 'def write(self, prio, tag, message):']

Analyzed C:\dev\adn_trash_code\python_libs\_apple_support.py:
Classes: ['class SystemLog(io.TextIOWrapper):', 'class LogStream(io.RawIOBase):']
Functions: ['def init_streams(log_write, stdout_level, stderr_level):', 'def __init__(self, log_write, level, **kwargs):', 'def __repr__(self):', 'def write(self, s):', 'def __init__(self, log_write, level):', 'def __repr__(self):', 'def writable(self):', 'def write(self, b):']

Analyzed C:\dev\adn_trash_code\python_libs\_collections_abc.py:
Classes: ['class Hashable(metaclass=ABCMeta):', 'class Awaitable(metaclass=ABCMeta):', 'class Coroutine(Awaitable):', 'class AsyncIterable(metaclass=ABCMeta):', 'class AsyncIterator(AsyncIterable):', 'class AsyncGenerator(AsyncIterator):', 'class Iterable(metaclass=ABCMeta):', 'class Iterator(Iterable):', 'class Reversible(Iterable):', 'class Generator(Iterator):', 'class Sized(metaclass=ABCMeta):', 'class Container(metaclass=ABCMeta):', 'class Collection(Sized, Iterable, Container):', 'class Buffer(metaclass=ABCMeta):', 'class _CallableGenericAlias(GenericAlias):', 'class Callable(metaclass=ABCMeta):', 'class Set(Collection):', 'class MutableSet(Set):', 'class Mapping(Collection):', 'class MappingView(Sized):', 'class KeysView(MappingView, Set):', 'class ItemsView(MappingView, Set):', 'class ValuesView(MappingView, Collection):', 'class MutableMapping(Mapping):', 'class Sequence(Reversible, Collection):', 'class _DeprecateByteStringMeta(ABCMeta):', 'class ByteString(Sequence, metaclass=_DeprecateByteStringMeta):', 'class MutableSequence(Sequence):']
Functions: ['def _f(): pass', 'def _get_framelocalsproxy():', 'def _check_methods(C, *methods):', 'def __hash__(self):', 'def __subclasshook__(cls, C):', 'def __await__(self):', 'def __subclasshook__(cls, C):', 'def send(self, value):', 'def throw(self, typ, val=None, tb=None):', 'def close(self):', 'def __subclasshook__(cls, C):', 'def __aiter__(self):', 'def __subclasshook__(cls, C):', 'def __aiter__(self):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def __iter__(self):', 'def __subclasshook__(cls, C):', 'def __next__(self):', 'def __iter__(self):', 'def __subclasshook__(cls, C):', 'def __reversed__(self):', 'def __subclasshook__(cls, C):', 'def __next__(self):', 'def send(self, value):', 'def throw(self, typ, val=None, tb=None):', 'def close(self):', 'def __subclasshook__(cls, C):', 'def __len__(self):', 'def __subclasshook__(cls, C):', 'def __contains__(self, x):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def __buffer__(self, flags: int, /) -> memoryview:', 'def __subclasshook__(cls, C):', 'def __new__(cls, origin, args):', 'def __repr__(self):', 'def __reduce__(self):', 'def __getitem__(self, item):', 'def _is_param_expr(obj):', 'def _type_repr(obj):', 'def __call__(self, *args, **kwds):', 'def __subclasshook__(cls, C):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __ge__(self, other):', 'def __eq__(self, other):', 'def _from_iterable(cls, it):', 'def __and__(self, other):', 'def isdisjoint(self, other):', 'def __or__(self, other):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __xor__(self, other):', 'def _hash(self):', 'def add(self, value):', 'def discard(self, value):', 'def remove(self, value):', 'def pop(self):', 'def clear(self):', 'def __ior__(self, it):', 'def __iand__(self, it):', 'def __ixor__(self, it):', 'def __isub__(self, it):', 'def __getitem__(self, key):', 'def get(self, key, default=None):', 'def __contains__(self, key):', 'def keys(self):', 'def items(self):', 'def values(self):', 'def __eq__(self, other):', 'def __init__(self, mapping):', 'def __len__(self):', 'def __repr__(self):', 'def _from_iterable(cls, it):', 'def __contains__(self, key):', 'def __iter__(self):', 'def _from_iterable(cls, it):', 'def __contains__(self, item):', 'def __iter__(self):', 'def __contains__(self, value):', 'def __iter__(self):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def pop(self, key, default=__marker):', 'def popitem(self):', 'def clear(self):', 'def update(self, other=(), /, **kwds):', 'def setdefault(self, key, default=None):', 'def __getitem__(self, index):', 'def __iter__(self):', 'def __contains__(self, value):', 'def __reversed__(self):', 'def index(self, value, start=0, stop=None):', 'def count(self, value):', 'def __new__(cls, name, bases, namespace, **kwargs):', 'def __instancecheck__(cls, instance):', 'def __setitem__(self, index, value):', 'def __delitem__(self, index):', 'def insert(self, index, value):', 'def append(self, value):', 'def clear(self):', 'def reverse(self):', 'def extend(self, values):', 'def pop(self, index=-1):', 'def remove(self, value):', 'def __iadd__(self, values):']

Analyzed C:\dev\adn_trash_code\python_libs\_colorize.py:
Classes: ['class ANSIColors:']
Functions: ['def get_colors(colorize: bool = False, *, file=None) -> ANSIColors:', 'def can_colorize(*, file=None) -> bool:']

Analyzed C:\dev\adn_trash_code\python_libs\_compat_pickle.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\_compression.py:
Classes: ['class BaseStream(io.BufferedIOBase):', 'class DecompressReader(io.RawIOBase):']
Functions: ['def _check_not_closed(self):', 'def _check_can_read(self):', 'def _check_can_write(self):', 'def _check_can_seek(self):', 'def readable(self):', 'def __init__(self, fp, decomp_factory, trailing_error=(), **decomp_args):', 'def close(self):', 'def seekable(self):', 'def readinto(self, b):', 'def read(self, size=-1):', 'def readall(self):', 'def _rewind(self):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):']

Analyzed C:\dev\adn_trash_code\python_libs\_ios_support.py:
Classes: []
Functions: ['def get_platform_ios():']

Analyzed C:\dev\adn_trash_code\python_libs\_markupbase.py:
Classes: ['class ParserBase:']
Functions: ['def __init__(self):', 'def reset(self):', 'def getpos(self):', 'def updatepos(self, i, j):', 'def parse_declaration(self, i):', 'def parse_marked_section(self, i, report=1):', 'def parse_comment(self, i, report=1):', 'def _parse_doctype_subset(self, i, declstartpos):', 'def _parse_doctype_element(self, i, declstartpos):', 'def _parse_doctype_attlist(self, i, declstartpos):', 'def _parse_doctype_notation(self, i, declstartpos):', 'def _parse_doctype_entity(self, i, declstartpos):', 'def _scan_name(self, i, declstartpos):', 'def unknown_decl(self, data):']

Analyzed C:\dev\adn_trash_code\python_libs\_opcode_metadata.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\_osx_support.py:
Classes: []
Functions: ['def _find_executable(executable, path=None):', 'def _read_output(commandstring, capture_stderr=False):', 'def _find_build_tool(toolname):', 'def _get_system_version():', 'def _get_system_version_tuple():', 'def _remove_original_values(_config_vars):', 'def _save_modified_value(_config_vars, cv, newvalue):', 'def _default_sysroot(cc):', 'def _supports_universal_builds():', 'def _supports_arm64_builds():', 'def _find_appropriate_compiler(_config_vars):', 'def _remove_universal_flags(_config_vars):', 'def _remove_unsupported_archs(_config_vars):', 'def _override_all_archs(_config_vars):', 'def _check_for_unavailable_sdk(_config_vars):', 'def compiler_fixup(compiler_so, cc_args):', 'def customize_config_vars(_config_vars):', 'def customize_compiler(_config_vars):', 'def get_platform_osx(_config_vars, osname, release, machine):']

Analyzed C:\dev\adn_trash_code\python_libs\_pydatetime.py:
Classes: ['class timedelta:', 'class date:', 'class tzinfo:', 'class IsoCalendarDate(tuple):', 'class time:', 'class datetime(date):', 'class timezone(tzinfo):']
Functions: ['def _cmp(x, y):', 'def _get_class_module(self):', 'def _is_leap(year):', 'def _days_before_year(year):', 'def _days_in_month(year, month):', 'def _days_before_month(year, month):', 'def _ymd2ord(year, month, day):', 'def _ord2ymd(n):', 'def _build_struct_time(y, m, d, hh, mm, ss, dstflag):', "def _format_time(hh, mm, ss, us, timespec='auto'):", "def _format_offset(off, sep=':'):", 'def _wrap_strftime(object, format, timetuple):', 'def _is_ascii_digit(c):', 'def _find_isoformat_datetime_separator(dtstr):', 'def _parse_isoformat_date(dtstr):', 'def _parse_hh_mm_ss_ff(tstr):', 'def _parse_isoformat_time(tstr):', 'def _isoweek_to_gregorian(year, week, day):', 'def _check_tzname(name):', 'def _check_utc_offset(name, offset):', 'def _check_date_fields(year, month, day):', 'def _check_time_fields(hour, minute, second, microsecond, fold):', 'def _check_tzinfo_arg(tz):', 'def _divide_and_round(a, b):', 'def __new__(cls, days=0, seconds=0, microseconds=0,', 'def __repr__(self):', 'def __str__(self):', 'def plural(n):', 'def total_seconds(self):', 'def days(self):', 'def seconds(self):', 'def microseconds(self):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __neg__(self):', 'def __pos__(self):', 'def __abs__(self):', 'def __mul__(self, other):', 'def _to_microseconds(self):', 'def __floordiv__(self, other):', 'def __truediv__(self, other):', 'def __mod__(self, other):', 'def __divmod__(self, other):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other):', 'def __hash__(self):', 'def __bool__(self):', 'def _getstate(self):', 'def __reduce__(self):', 'def __new__(cls, year, month=None, day=None):', 'def fromtimestamp(cls, t):', 'def today(cls):', 'def fromordinal(cls, n):', 'def fromisoformat(cls, date_string):', 'def fromisocalendar(cls, year, week, day):', 'def __repr__(self):', 'def ctime(self):', 'def strftime(self, format):', 'def __format__(self, fmt):', 'def isoformat(self):', 'def year(self):', 'def month(self):', 'def day(self):', 'def timetuple(self):', 'def toordinal(self):', 'def replace(self, year=None, month=None, day=None):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other):', 'def __hash__(self):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def weekday(self):', 'def isoweekday(self):', 'def isocalendar(self):', 'def _getstate(self):', 'def __setstate(self, string):', 'def __reduce__(self):', 'def tzname(self, dt):', 'def utcoffset(self, dt):', 'def dst(self, dt):', 'def fromutc(self, dt):', 'def __reduce__(self):', 'def __new__(cls, year, week, weekday, /):', 'def year(self):', 'def week(self):', 'def weekday(self):', 'def __reduce__(self):', 'def __repr__(self):', 'def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0):', 'def hour(self):', 'def minute(self):', 'def second(self):', 'def microsecond(self):', 'def tzinfo(self):', 'def fold(self):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other, allow_mixed=False):', 'def __hash__(self):', 'def _tzstr(self):', 'def __repr__(self):', "def isoformat(self, timespec='auto'):", 'def fromisoformat(cls, time_string):', 'def strftime(self, format):', 'def __format__(self, fmt):', 'def utcoffset(self):', 'def tzname(self):', 'def dst(self):', 'def replace(self, hour=None, minute=None, second=None, microsecond=None,', 'def _getstate(self, protocol=3):', 'def __setstate(self, string, tzinfo):', 'def __reduce_ex__(self, protocol):', 'def __reduce__(self):', 'def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,', 'def hour(self):', 'def minute(self):', 'def second(self):', 'def microsecond(self):', 'def tzinfo(self):', 'def fold(self):', 'def _fromtimestamp(cls, t, utc, tz):', 'def fromtimestamp(cls, timestamp, tz=None):', 'def utcfromtimestamp(cls, t):', 'def now(cls, tz=None):', 'def utcnow(cls):', 'def combine(cls, date, time, tzinfo=True):', 'def fromisoformat(cls, date_string):', 'def timetuple(self):', 'def _mktime(self):', 'def local(u):', 'def timestamp(self):', 'def utctimetuple(self):', 'def date(self):', 'def time(self):', 'def timetz(self):', 'def replace(self, year=None, month=None, day=None, hour=None,', 'def _local_timezone(self):', 'def astimezone(self, tz=None):', 'def ctime(self):', "def isoformat(self, sep='T', timespec='auto'):", 'def __repr__(self):', 'def __str__(self):', 'def strptime(cls, date_string, format):', 'def utcoffset(self):', 'def tzname(self):', 'def dst(self):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other, allow_mixed=False):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __hash__(self):', 'def _getstate(self, protocol=3):', 'def __setstate(self, string, tzinfo):', 'def __reduce_ex__(self, protocol):', 'def __reduce__(self):', 'def _isoweek1monday(year):', 'def __new__(cls, offset, name=_Omitted):', 'def __init_subclass__(cls):', 'def _create(cls, offset, name=None):', 'def __getinitargs__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def __str__(self):', 'def utcoffset(self, dt):', 'def tzname(self, dt):', 'def dst(self, dt):', 'def fromutc(self, dt):', 'def _name_from_offset(delta):']

Analyzed C:\dev\adn_trash_code\python_libs\_pydecimal.py:
Classes: ['class DecimalException(ArithmeticError):', 'class Clamped(DecimalException):', 'class InvalidOperation(DecimalException):', 'class ConversionSyntax(InvalidOperation):', 'class DivisionByZero(DecimalException, ZeroDivisionError):', 'class DivisionImpossible(InvalidOperation):', 'class DivisionUndefined(InvalidOperation, ZeroDivisionError):', 'class Inexact(DecimalException):', 'class InvalidContext(InvalidOperation):', 'class Rounded(DecimalException):', 'class Subnormal(DecimalException):', 'class Overflow(Inexact, Rounded):', 'class Underflow(Inexact, Rounded, Subnormal):', 'class FloatOperation(DecimalException, TypeError):', 'class Decimal(object):', 'class _ContextManager(object):', 'class Context(object):', 'class _WorkRep(object):', 'class _Log10Memoize(object):']
Functions: ['def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, sign, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, sign, *args):', 'def getcontext():', 'def setcontext(context):', 'def localcontext(ctx=None, **kwargs):', 'def sin(x):', 'def sin(x):', 'def __new__(cls, value="0", context=None):', 'def from_float(cls, f):', 'def _isnan(self):', 'def _isinfinity(self):', 'def _check_nans(self, other=None, context=None):', 'def _compare_check_nans(self, other, context):', 'def __bool__(self):', 'def _cmp(self, other):', 'def __eq__(self, other, context=None):', 'def __lt__(self, other, context=None):', 'def __le__(self, other, context=None):', 'def __gt__(self, other, context=None):', 'def __ge__(self, other, context=None):', 'def compare(self, other, context=None):', 'def __hash__(self):', 'def as_tuple(self):', 'def as_integer_ratio(self):', 'def __repr__(self):', 'def __str__(self, eng=False, context=None):', 'def to_eng_string(self, context=None):', 'def __neg__(self, context=None):', 'def __pos__(self, context=None):', 'def __abs__(self, round=True, context=None):', 'def __add__(self, other, context=None):', 'def __sub__(self, other, context=None):', 'def __rsub__(self, other, context=None):', 'def __mul__(self, other, context=None):', 'def __truediv__(self, other, context=None):', 'def _divide(self, other, context):', 'def __rtruediv__(self, other, context=None):', 'def __divmod__(self, other, context=None):', 'def __rdivmod__(self, other, context=None):', 'def __mod__(self, other, context=None):', 'def __rmod__(self, other, context=None):', 'def remainder_near(self, other, context=None):', 'def __floordiv__(self, other, context=None):', 'def __rfloordiv__(self, other, context=None):', 'def __float__(self):', 'def __int__(self):', 'def real(self):', 'def imag(self):', 'def conjugate(self):', 'def __complex__(self):', 'def _fix_nan(self, context):', 'def _fix(self, context):', 'def _round_down(self, prec):', 'def _round_up(self, prec):', 'def _round_half_up(self, prec):', 'def _round_half_down(self, prec):', 'def _round_half_even(self, prec):', 'def _round_ceiling(self, prec):', 'def _round_floor(self, prec):', 'def _round_05up(self, prec):', 'def __round__(self, n=None):', 'def __floor__(self):', 'def __ceil__(self):', 'def fma(self, other, third, context=None):', 'def _power_modulo(self, other, modulo, context=None):', 'def _power_exact(self, other, p):', 'def __pow__(self, other, modulo=None, context=None):', 'def __rpow__(self, other, context=None):', 'def normalize(self, context=None):', 'def quantize(self, exp, rounding=None, context=None):', 'def same_quantum(self, other, context=None):', 'def _rescale(self, exp, rounding):', 'def _round(self, places, rounding):', 'def to_integral_exact(self, rounding=None, context=None):', 'def to_integral_value(self, rounding=None, context=None):', 'def sqrt(self, context=None):', 'def max(self, other, context=None):', 'def min(self, other, context=None):', 'def _isinteger(self):', 'def _iseven(self):', 'def adjusted(self):', 'def canonical(self):', 'def compare_signal(self, other, context=None):', 'def compare_total(self, other, context=None):', 'def compare_total_mag(self, other, context=None):', 'def copy_abs(self):', 'def copy_negate(self):', 'def copy_sign(self, other, context=None):', 'def exp(self, context=None):', 'def is_canonical(self):', 'def is_finite(self):', 'def is_infinite(self):', 'def is_nan(self):', 'def is_normal(self, context=None):', 'def is_qnan(self):', 'def is_signed(self):', 'def is_snan(self):', 'def is_subnormal(self, context=None):', 'def is_zero(self):', 'def _ln_exp_bound(self):', 'def ln(self, context=None):', 'def _log10_exp_bound(self):', 'def log10(self, context=None):', 'def logb(self, context=None):', 'def _islogical(self):', 'def _fill_logical(self, context, opa, opb):', 'def logical_and(self, other, context=None):', 'def logical_invert(self, context=None):', 'def logical_or(self, other, context=None):', 'def logical_xor(self, other, context=None):', 'def max_mag(self, other, context=None):', 'def min_mag(self, other, context=None):', 'def next_minus(self, context=None):', 'def next_plus(self, context=None):', 'def next_toward(self, other, context=None):', 'def number_class(self, context=None):', 'def radix(self):', 'def rotate(self, other, context=None):', 'def scaleb(self, other, context=None):', 'def shift(self, other, context=None):', 'def __reduce__(self):', 'def __copy__(self):', 'def __deepcopy__(self, memo):', 'def __format__(self, specifier, context=None, _localeconv=None):', 'def _dec_from_triple(sign, coefficient, exponent, special=False):', 'def __init__(self, new_context):', 'def __enter__(self):', 'def __exit__(self, t, v, tb):', 'def __init__(self, prec=None, rounding=None, Emin=None, Emax=None,', 'def _set_integer_check(self, name, value, vmin, vmax):', 'def _set_signal_dict(self, name, d):', 'def __setattr__(self, name, value):', 'def __delattr__(self, name):', 'def __reduce__(self):', 'def __repr__(self):', 'def clear_flags(self):', 'def clear_traps(self):', 'def _shallow_copy(self):', 'def copy(self):', 'def _raise_error(self, condition, explanation = None, *args):', 'def _ignore_all_flags(self):', 'def _ignore_flags(self, *flags):', 'def _regard_flags(self, *flags):', 'def Etiny(self):', 'def Etop(self):', 'def _set_rounding(self, type):', "def create_decimal(self, num='0'):", 'def create_decimal_from_float(self, f):', 'def abs(self, a):', 'def add(self, a, b):', 'def _apply(self, a):', 'def canonical(self, a):', 'def compare(self, a, b):', 'def compare_signal(self, a, b):', 'def compare_total(self, a, b):', 'def compare_total_mag(self, a, b):', 'def copy_abs(self, a):', 'def copy_decimal(self, a):', 'def copy_negate(self, a):', 'def copy_sign(self, a, b):', 'def divide(self, a, b):', 'def divide_int(self, a, b):', 'def divmod(self, a, b):', 'def exp(self, a):', 'def fma(self, a, b, c):', 'def is_canonical(self, a):', 'def is_finite(self, a):', 'def is_infinite(self, a):', 'def is_nan(self, a):', 'def is_normal(self, a):', 'def is_qnan(self, a):', 'def is_signed(self, a):', 'def is_snan(self, a):', 'def is_subnormal(self, a):', 'def is_zero(self, a):', 'def ln(self, a):', 'def log10(self, a):', 'def logb(self, a):', 'def logical_and(self, a, b):', 'def logical_invert(self, a):', 'def logical_or(self, a, b):', 'def logical_xor(self, a, b):', 'def max(self, a, b):', 'def max_mag(self, a, b):', 'def min(self, a, b):', 'def min_mag(self, a, b):', 'def minus(self, a):', 'def multiply(self, a, b):', 'def next_minus(self, a):', 'def next_plus(self, a):', 'def next_toward(self, a, b):', 'def normalize(self, a):', 'def number_class(self, a):', 'def plus(self, a):', 'def power(self, a, b, modulo=None):', 'def quantize(self, a, b):', 'def radix(self):', 'def remainder(self, a, b):', 'def remainder_near(self, a, b):', 'def rotate(self, a, b):', 'def same_quantum(self, a, b):', 'def scaleb (self, a, b):', 'def shift(self, a, b):', 'def sqrt(self, a):', 'def subtract(self, a, b):', 'def to_eng_string(self, a):', 'def to_sci_string(self, a):', 'def to_integral_exact(self, a):', 'def to_integral_value(self, a):', 'def __init__(self, value=None):', 'def __repr__(self):', 'def _normalize(op1, op2, prec = 0):', 'def _decimal_lshift_exact(n, e):', 'def _sqrt_nearest(n, a):', 'def _rshift_nearest(x, shift):', 'def _div_nearest(a, b):', 'def _ilog(x, M, L = 8):', 'def _dlog10(c, e, p):', 'def _dlog(c, e, p):', 'def __init__(self):', 'def getdigits(self, p):', 'def _iexp(x, M, L=8):', 'def _dexp(c, e, p):', 'def _dpower(xc, xe, yc, ye, p):', 'def _log10_lb(c, correction = {', 'def _convert_other(other, raiseit=False, allow_float=False):', 'def _convert_for_comparison(self, other, equality_op=False):', 'def _parse_format_specifier(format_spec, _localeconv=None):', 'def _format_align(sign, body, spec):', 'def _group_lengths(grouping):', 'def _insert_thousands_sep(digits, spec, min_width=1):', 'def _format_sign(is_negative, spec):', 'def _format_number(is_negative, intpart, fracpart, exp, spec):']

Analyzed C:\dev\adn_trash_code\python_libs\_pyio.py:
Classes: ['class UnsupportedOperation(OSError, ValueError):', 'class IOBase(metaclass=abc.ABCMeta):', 'class RawIOBase(IOBase):', 'class BufferedIOBase(IOBase):', 'class _BufferedIOMixin(BufferedIOBase):', 'class BytesIO(BufferedIOBase):', 'class BufferedReader(_BufferedIOMixin):', 'class BufferedWriter(_BufferedIOMixin):', 'class BufferedRWPair(BufferedIOBase):', 'class BufferedRandom(BufferedWriter, BufferedReader):', 'class FileIO(RawIOBase):', 'class TextIOBase(IOBase):', 'class IncrementalNewlineDecoder(codecs.IncrementalDecoder):', 'class TextIOWrapper(TextIOBase):', 'class StringIO(TextIOWrapper):']
Functions: ['def text_encoding(encoding, stacklevel=2):', 'def open(file, mode="r", buffering=-1, encoding=None, errors=None,', 'def _open_code_with_warning(path):', 'def _unsupported(self, name):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def flush(self):', 'def close(self):', 'def __del__(self):', 'def seekable(self):', 'def _checkSeekable(self, msg=None):', 'def readable(self):', 'def _checkReadable(self, msg=None):', 'def writable(self):', 'def _checkWritable(self, msg=None):', 'def closed(self):', 'def _checkClosed(self, msg=None):', "def __enter__(self):  # That's a forward reference", 'def __exit__(self, *args):', 'def fileno(self):', 'def isatty(self):', 'def readline(self, size=-1):', 'def nreadahead():', 'def nreadahead():', 'def __iter__(self):', 'def __next__(self):', 'def readlines(self, hint=None):', 'def writelines(self, lines):', 'def read(self, size=-1):', 'def readall(self):', 'def readinto(self, b):', 'def write(self, b):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readinto(self, b):', 'def readinto1(self, b):', 'def _readinto(self, b, read1):', 'def write(self, b):', 'def detach(self):', 'def __init__(self, raw):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def flush(self):', 'def close(self):', 'def detach(self):', 'def seekable(self):', 'def raw(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def __getstate__(self):', 'def __repr__(self):', 'def fileno(self):', 'def isatty(self):', 'def __init__(self, initial_bytes=None):', 'def __getstate__(self):', 'def getvalue(self):', 'def getbuffer(self):', 'def close(self):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def write(self, b):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def readable(self):', 'def _reset_read_buf(self):', 'def read(self, size=None):', 'def _read_unlocked(self, n=None):', 'def peek(self, size=0):', 'def _peek_unlocked(self, n=0):', 'def read1(self, size=-1):', 'def _readinto(self, buf, read1):', 'def tell(self):', 'def seek(self, pos, whence=0):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def writable(self):', 'def write(self, b):', 'def truncate(self, pos=None):', 'def flush(self):', 'def _flush_unlocked(self):', 'def tell(self):', 'def seek(self, pos, whence=0):', 'def close(self):', 'def __init__(self, reader, writer, buffer_size=DEFAULT_BUFFER_SIZE):', 'def read(self, size=-1):', 'def readinto(self, b):', 'def write(self, b):', 'def peek(self, size=0):', 'def read1(self, size=-1):', 'def readinto1(self, b):', 'def readable(self):', 'def writable(self):', 'def flush(self):', 'def close(self):', 'def isatty(self):', 'def closed(self):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def read(self, size=None):', 'def readinto(self, b):', 'def peek(self, size=0):', 'def read1(self, size=-1):', 'def readinto1(self, b):', 'def write(self, b):', "def __init__(self, file, mode='r', closefd=True, opener=None):", 'def __del__(self):', 'def __getstate__(self):', 'def __repr__(self):', 'def _checkReadable(self):', 'def _checkWritable(self, msg=None):', 'def read(self, size=None):', 'def readall(self):', 'def readinto(self, b):', 'def write(self, b):', 'def seek(self, pos, whence=SEEK_SET):', 'def tell(self):', 'def truncate(self, size=None):', 'def close(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def fileno(self):', 'def isatty(self):', 'def closefd(self):', 'def mode(self):', 'def read(self, size=-1):', 'def write(self, s):', 'def truncate(self, pos=None):', 'def readline(self):', 'def detach(self):', 'def encoding(self):', 'def newlines(self):', 'def errors(self):', "def __init__(self, decoder, translate, errors='strict'):", 'def decode(self, input, final=False):', 'def getstate(self):', 'def setstate(self, state):', 'def reset(self):', 'def newlines(self):', 'def __init__(self, buffer, encoding=None, errors=None, newline=None,', 'def _check_newline(self, newline):', 'def _configure(self, encoding=None, errors=None, newline=None,', 'def __repr__(self):', 'def encoding(self):', 'def errors(self):', 'def line_buffering(self):', 'def write_through(self):', 'def buffer(self):', 'def reconfigure(self, *,', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def flush(self):', 'def close(self):', 'def closed(self):', 'def name(self):', 'def fileno(self):', 'def isatty(self):', 'def write(self, s):', 'def _get_encoder(self):', 'def _get_decoder(self):', 'def _set_decoded_chars(self, chars):', 'def _get_decoded_chars(self, n=None):', 'def _get_locale_encoding(self):', 'def _rewind_decoded_chars(self, n):', 'def _read_chunk(self):', 'def _pack_cookie(self, position, dec_flags=0,', 'def _unpack_cookie(self, bigint):', 'def tell(self):', 'def truncate(self, pos=None):', 'def detach(self):', 'def seek(self, cookie, whence=0):', 'def _reset_encoder(position):', 'def read(self, size=None):', 'def __next__(self):', 'def readline(self, size=None):', 'def newlines(self):', 'def __init__(self, initial_value="", newline="\\n"):', 'def getvalue(self):', 'def __repr__(self):', 'def errors(self):', 'def encoding(self):', 'def detach(self):']

Analyzed C:\dev\adn_trash_code\python_libs\_pylong.py:
Classes: []
Functions: ['def compute_powers(w, base, more_than, show=False):', 'def int_to_decimal(n):', 'def inner(n, w):', 'def int_to_decimal_string(n):', 'def inner(n, w):', 'def _str_to_int_inner(s):', 'def inner(a, b):', 'def int_from_string(s):', 'def str_to_int(s):', 'def _div2n1n(a, b, n):', 'def _div3n2n(a12, a3, b, b1, b2, n):', 'def _int2digits(a, n):', 'def inner(x, L, R):', 'def _digits2int(digits, n):', 'def inner(L, R):', 'def _divmod_pos(a, b):', 'def int_divmod(a, b):']

Analyzed C:\dev\adn_trash_code\python_libs\_py_abc.py:
Classes: ['class ABCMeta(type):']
Functions: ['def get_cache_token():', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def register(cls, subclass):', 'def _dump_registry(cls, file=None):', 'def _abc_registry_clear(cls):', 'def _abc_caches_clear(cls):', 'def __instancecheck__(cls, instance):', 'def __subclasscheck__(cls, subclass):']

Analyzed C:\dev\adn_trash_code\python_libs\_sitebuiltins.py:
Classes: ['class Quitter(object):', 'class _Printer(object):', 'class _Helper(object):']
Functions: ['def __init__(self, name, eof):', 'def __repr__(self):', 'def __call__(self, code=None):', 'def __init__(self, name, data, files=(), dirs=()):', 'def __setup(self):', 'def __repr__(self):', 'def __call__(self):', 'def __repr__(self):', 'def __call__(self, *args, **kwds):']

Analyzed C:\dev\adn_trash_code\python_libs\_strptime.py:
Classes: ['class LocaleTime(object):', 'class TimeRE(dict):']
Functions: ['def _getlang():', 'def _findall(haystack, needle):', 'def __init__(self):', 'def __calc_weekday(self):', 'def __calc_month(self):', 'def __calc_am_pm(self):', 'def __calc_date_time(self):', 'def __find_month_format(self, directive):', 'def __find_weekday_format(self, directive):', 'def __calc_timezone(self):', 'def __init__(self, locale_time=None):', 'def __seqToRE(self, to_convert, directive):', 'def pattern(self, format):', 'def repl(m):', 'def compile(self, format):', 'def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):', 'def _strptime(data_string, format="%a %b %d %H:%M:%S %Y"):', 'def _strptime_time(data_string, format="%a %b %d %H:%M:%S %Y"):', 'def _strptime_datetime(cls, data_string, format="%a %b %d %H:%M:%S %Y"):']

Analyzed C:\dev\adn_trash_code\python_libs\_threading_local.py:
Classes: ['class _localimpl:', 'class local:']
Functions: ['def __init__(self):', 'def get_dict(self):', 'def create_dict(self):', 'def local_deleted(_, key=key):', 'def thread_deleted(_, idt=idt):', 'def _patch(self):', 'def __new__(cls, /, *args, **kw):', 'def __getattribute__(self, name):', 'def __setattr__(self, name, value):', 'def __delattr__(self, name):']

Analyzed C:\dev\adn_trash_code\python_libs\_weakrefset.py:
Classes: ['class _IterationGuard:', 'class WeakSet:']
Functions: ['def __init__(self, weakcontainer):', 'def __enter__(self):', 'def __exit__(self, e, t, b):', 'def __init__(self, data=None):', 'def _remove(item, selfref=ref(self)):', 'def _commit_removals(self):', 'def __iter__(self):', 'def __len__(self):', 'def __contains__(self, item):', 'def __reduce__(self):', 'def add(self, item):', 'def clear(self):', 'def copy(self):', 'def pop(self):', 'def remove(self, item):', 'def discard(self, item):', 'def update(self, other):', 'def __ior__(self, other):', 'def difference(self, other):', 'def difference_update(self, other):', 'def __isub__(self, other):', 'def intersection(self, other):', 'def intersection_update(self, other):', 'def __iand__(self, other):', 'def issubset(self, other):', 'def __lt__(self, other):', 'def issuperset(self, other):', 'def __gt__(self, other):', 'def __eq__(self, other):', 'def symmetric_difference(self, other):', 'def symmetric_difference_update(self, other):', 'def __ixor__(self, other):', 'def union(self, other):', 'def isdisjoint(self, other):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\__future__.py:
Classes: ['class _Feature:']
Functions: ['def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):', 'def getOptionalRelease(self):', 'def getMandatoryRelease(self):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\__hello__.py:
Classes: ['class TestFrozenUtf8_1:', 'class TestFrozenUtf8_2:', 'class TestFrozenUtf8_4:']
Functions: ['def main():']

Analyzed C:\dev\adn_trash_code\python_libs\abc.py:
Classes: ['class that has a metaclass derived from ABCMeta cannot be', 'class C(metaclass=ABCMeta):', 'class abstractclassmethod(classmethod):', 'class C(ABC):', 'class abstractstaticmethod(staticmethod):', 'class C(ABC):', 'class abstractproperty(property):', 'class C(ABC):', 'class ABCMeta(type):', 'class was created, the method will not be considered implemented until', 'class after this function is called.', 'class ABC(metaclass=ABCMeta):']
Functions: ['def abstractmethod(funcobj):', 'def my_abstract_method(self, arg1, arg2, argN):', 'def my_abstract_classmethod(cls, ...):', 'def __init__(self, callable):', 'def my_abstract_staticmethod(...):', 'def __init__(self, callable):', 'def my_abstract_property(self):', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def register(cls, subclass):', 'def __instancecheck__(cls, instance):', 'def __subclasscheck__(cls, subclass):', 'def _dump_registry(cls, file=None):', 'def _abc_registry_clear(cls):', 'def _abc_caches_clear(cls):', 'def update_abstractmethods(cls):']

Analyzed C:\dev\adn_trash_code\python_libs\antigravity.py:
Classes: []
Functions: ['def geohash(latitude, longitude, datedow):']

Analyzed C:\dev\adn_trash_code\python_libs\argparse.py:
Classes: ['class _AttributeHolder(object):', 'class HelpFormatter(object):', 'class _Section(object):', 'class RawDescriptionHelpFormatter(HelpFormatter):', 'class RawTextHelpFormatter(RawDescriptionHelpFormatter):', 'class ArgumentDefaultsHelpFormatter(HelpFormatter):', 'class MetavarTypeHelpFormatter(HelpFormatter):', 'class ArgumentError(Exception):', 'class ArgumentTypeError(Exception):', 'class Action(_AttributeHolder):', 'class BooleanOptionalAction(Action):', 'class _StoreAction(Action):', 'class _StoreConstAction(Action):', 'class _StoreTrueAction(_StoreConstAction):', 'class _StoreFalseAction(_StoreConstAction):', 'class _AppendAction(Action):', 'class _AppendConstAction(Action):', 'class _CountAction(Action):', 'class _HelpAction(Action):', 'class _VersionAction(Action):', 'class _SubParsersAction(Action):', 'class _ChoicesPseudoAction(Action):', 'class _ExtendAction(_AppendAction):', 'class FileType(object):', 'class Namespace(_AttributeHolder):', 'class _ActionsContainer(object):', 'class _ArgumentGroup(_ActionsContainer):', 'class _MutuallyExclusiveGroup(_ArgumentGroup):', 'class ArgumentParser(_AttributeHolder, _ActionsContainer):']
Functions: ['def __repr__(self):', 'def _get_kwargs(self):', 'def _get_args(self):', 'def _copy_items(items):', 'def __init__(self,', 'def _indent(self):', 'def _dedent(self):', 'def __init__(self, formatter, parent, heading=None):', 'def format_help(self):', 'def _add_item(self, func, args):', 'def start_section(self, heading):', 'def end_section(self):', 'def add_text(self, text):', 'def add_usage(self, usage, actions, groups, prefix=None):', 'def add_argument(self, action):', 'def add_arguments(self, actions):', 'def format_help(self):', 'def _join_parts(self, part_strings):', 'def _format_usage(self, usage, actions, groups, prefix):', 'def get_lines(parts, indent, prefix=None):', 'def _format_actions_usage(self, actions, groups):', 'def _get_actions_usage_parts(self, actions, groups):', 'def _format_text(self, text):', 'def _format_action(self, action):', 'def _format_action_invocation(self, action):', 'def _metavar_formatter(self, action, default_metavar):', 'def format(tuple_size):', 'def _format_args(self, action, default_metavar):', 'def _expand_help(self, action):', 'def _iter_indented_subactions(self, action):', 'def _split_lines(self, text, width):', 'def _fill_text(self, text, width, indent):', 'def _get_help_string(self, action):', 'def _get_default_metavar_for_optional(self, action):', 'def _get_default_metavar_for_positional(self, action):', 'def _fill_text(self, text, width, indent):', 'def _split_lines(self, text, width):', 'def _get_help_string(self, action):', 'def _get_default_metavar_for_optional(self, action):', 'def _get_default_metavar_for_positional(self, action):', 'def _get_action_name(argument):', 'def __init__(self, argument, message):', 'def __str__(self):', 'def __init__(self,', 'def _get_kwargs(self):', 'def format_usage(self):', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def format_usage(self):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __init__(self,', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self,', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __init__(self, name, aliases, help):', 'def __init__(self,', 'def add_parser(self, name, *, deprecated=False, **kwargs):', 'def _get_subactions(self):', 'def __call__(self, parser, namespace, values, option_string=None):', 'def __call__(self, parser, namespace, values, option_string=None):', "def __init__(self, mode='r', bufsize=-1, encoding=None, errors=None):", 'def __call__(self, string):', 'def __repr__(self):', 'def __init__(self, **kwargs):', 'def __eq__(self, other):', 'def __contains__(self, key):', 'def __init__(self,', 'def register(self, registry_name, value, object):', 'def _registry_get(self, registry_name, value, default=None):', 'def set_defaults(self, **kwargs):', 'def get_default(self, dest):', 'def add_argument(self, *args, **kwargs):', 'def add_argument_group(self, *args, **kwargs):', 'def add_mutually_exclusive_group(self, **kwargs):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def _add_container_actions(self, container):', 'def _get_positional_kwargs(self, dest, **kwargs):', 'def _get_optional_kwargs(self, *args, **kwargs):', 'def _pop_action_class(self, kwargs, default=None):', 'def _get_handler(self):', 'def _check_conflict(self, action):', 'def _handle_conflict_error(self, action, conflicting_actions):', 'def _handle_conflict_resolve(self, action, conflicting_actions):', 'def __init__(self, container, title=None, description=None, **kwargs):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def add_argument_group(self, *args, **kwargs):', 'def __init__(self, container, required=False):', 'def _add_action(self, action):', 'def _remove_action(self, action):', 'def add_mutually_exclusive_group(self, *args, **kwargs):', 'def __init__(self,', 'def identity(string):', 'def _get_kwargs(self):', 'def add_subparsers(self, **kwargs):', 'def _add_action(self, action):', 'def _get_optional_actions(self):', 'def _get_positional_actions(self):', 'def parse_args(self, args=None, namespace=None):', 'def parse_known_args(self, args=None, namespace=None):', 'def _parse_known_args2(self, args, namespace, intermixed):', 'def _parse_known_args(self, arg_strings, namespace, intermixed):', 'def take_action(action, argument_strings, option_string=None):', 'def consume_optional(start_index):', 'def consume_positionals(start_index):', 'def _read_args_from_files(self, arg_strings):', 'def convert_arg_line_to_args(self, arg_line):', 'def _match_argument(self, action, arg_strings_pattern):', 'def _match_arguments_partial(self, actions, arg_strings_pattern):', 'def _parse_optional(self, arg_string):', 'def _get_option_tuples(self, option_string):', 'def _get_nargs_pattern(self, action):', 'def parse_intermixed_args(self, args=None, namespace=None):', 'def parse_known_intermixed_args(self, args=None, namespace=None):', 'def _get_values(self, action, arg_strings):', 'def _get_value(self, action, arg_string):', 'def _check_value(self, action, value):', 'def format_usage(self):', 'def format_help(self):', 'def _get_formatter(self):', 'def print_usage(self, file=None):', 'def print_help(self, file=None):', 'def _print_message(self, message, file=None):', 'def exit(self, status=0, message=None):', 'def error(self, message):', 'def _warning(self, message):']

Analyzed C:\dev\adn_trash_code\python_libs\ast.py:
Classes: ['class NodeVisitor(object):', 'class name of the node.  So a `TryFinally` node visit function would', 'class NodeTransformer(NodeVisitor):', 'class RewriteName(NodeTransformer):', 'class _ABC(type):', 'class Num(Constant, metaclass=_ABC):', 'class Str(Constant, metaclass=_ABC):', 'class Bytes(Constant, metaclass=_ABC):', 'class NameConstant(Constant, metaclass=_ABC):', 'class Ellipsis(Constant, metaclass=_ABC):', 'class slice(AST):', 'class Index(slice):', 'class ExtSlice(slice):', 'class Suite(mod):', 'class AugLoad(expr_context):', 'class AugStore(expr_context):', 'class Param(expr_context):', 'class _Precedence:', 'class _Unparser(NodeVisitor):']
Functions: ["def parse(source, filename='<unknown>', mode='exec', *,", 'def literal_eval(node_or_string):', 'def _raise_malformed_node(node):', 'def _convert_num(node):', 'def _convert_signed_num(node):', 'def _convert(node):', 'def dump(', 'def _format(node, level=0):', 'def copy_location(new_node, old_node):', 'def fix_missing_locations(node):', 'def _fix(node, lineno, col_offset, end_lineno, end_col_offset):', 'def increment_lineno(node, n=1):', 'def iter_fields(node):', 'def iter_child_nodes(node):', 'def get_docstring(node, clean=True):', 'def _splitlines_no_ff(source, maxlines=None):', 'def _pad_whitespace(source):', 'def get_source_segment(source, node, *, padded=False):', 'def walk(node):', 'def visit(self, node):', 'def generic_visit(self, node):', 'def visit_Constant(self, node):', 'def visit_Name(self, node):', 'def generic_visit(self, node):', 'def _n_getter(self):', 'def _n_setter(self, value):', 'def _s_getter(self):', 'def _s_setter(self, value):', 'def __init__(cls, *args):', 'def __instancecheck__(cls, inst):', 'def _new(cls, *args, **kwargs):', 'def __new__(cls, *args, **kwargs):', 'def __new__(cls, value, **kwargs):', 'def __new__(cls, dims=(), **kwargs):', 'def _dims_getter(self):', 'def _dims_setter(self, value):', 'def next(self):', 'def __init__(self):', 'def interleave(self, inter, f, seq):', 'def items_view(self, traverser, items):', 'def maybe_newline(self):', 'def fill(self, text=""):', 'def write(self, *text):', 'def buffered(self, buffer = None):', 'def block(self, *, extra = None):', 'def delimit(self, start, end):', 'def delimit_if(self, start, end, condition):', 'def require_parens(self, precedence, node):', 'def get_precedence(self, node):', 'def set_precedence(self, precedence, *nodes):', 'def get_raw_docstring(self, node):', 'def get_type_comment(self, node):', 'def traverse(self, node):', 'def visit(self, node):', 'def _write_docstring_and_traverse_body(self, node):', 'def visit_Module(self, node):', 'def visit_FunctionType(self, node):', 'def visit_Expr(self, node):', 'def visit_NamedExpr(self, node):', 'def visit_Import(self, node):', 'def visit_ImportFrom(self, node):', 'def visit_Assign(self, node):', 'def visit_AugAssign(self, node):', 'def visit_AnnAssign(self, node):', 'def visit_Return(self, node):', 'def visit_Pass(self, node):', 'def visit_Break(self, node):', 'def visit_Continue(self, node):', 'def visit_Delete(self, node):', 'def visit_Assert(self, node):', 'def visit_Global(self, node):', 'def visit_Nonlocal(self, node):', 'def visit_Await(self, node):', 'def visit_Yield(self, node):', 'def visit_YieldFrom(self, node):', 'def visit_Raise(self, node):', 'def do_visit_try(self, node):', 'def visit_Try(self, node):', 'def visit_TryStar(self, node):', 'def visit_ExceptHandler(self, node):', 'def visit_ClassDef(self, node):', 'def visit_FunctionDef(self, node):', 'def visit_AsyncFunctionDef(self, node):', 'def _function_helper(self, node, fill_suffix):', 'def _type_params_helper(self, type_params):', 'def visit_TypeVar(self, node):', 'def visit_TypeVarTuple(self, node):', 'def visit_ParamSpec(self, node):', 'def visit_TypeAlias(self, node):', 'def visit_For(self, node):', 'def visit_AsyncFor(self, node):', 'def _for_helper(self, fill, node):', 'def visit_If(self, node):', 'def visit_While(self, node):', 'def visit_With(self, node):', 'def visit_AsyncWith(self, node):', 'def _str_literal_helper(', 'def escape_char(c):', 'def _write_str_avoiding_backslashes(self, string, *, quote_types=_ALL_QUOTES):', 'def visit_JoinedStr(self, node):', 'def _write_fstring_inner(self, node, is_format_spec=False):', 'def visit_FormattedValue(self, node):', 'def unparse_inner(inner):', 'def visit_Name(self, node):', 'def _write_docstring(self, node):', 'def _write_constant(self, value):', 'def visit_Constant(self, node):', 'def visit_List(self, node):', 'def visit_ListComp(self, node):', 'def visit_GeneratorExp(self, node):', 'def visit_SetComp(self, node):', 'def visit_DictComp(self, node):', 'def visit_comprehension(self, node):', 'def visit_IfExp(self, node):', 'def visit_Set(self, node):', 'def visit_Dict(self, node):', 'def write_key_value_pair(k, v):', 'def write_item(item):', 'def visit_Tuple(self, node):', 'def visit_UnaryOp(self, node):', 'def visit_BinOp(self, node):', 'def visit_Compare(self, node):', 'def visit_BoolOp(self, node):', 'def increasing_level_traverse(node):', 'def visit_Attribute(self, node):', 'def visit_Call(self, node):', 'def visit_Subscript(self, node):', 'def is_non_empty_tuple(slice_value):', 'def visit_Starred(self, node):', 'def visit_Ellipsis(self, node):', 'def visit_Slice(self, node):', 'def visit_Match(self, node):', 'def visit_arg(self, node):', 'def visit_arguments(self, node):', 'def visit_keyword(self, node):', 'def visit_Lambda(self, node):', 'def visit_alias(self, node):', 'def visit_withitem(self, node):', 'def visit_match_case(self, node):', 'def visit_MatchValue(self, node):', 'def visit_MatchSingleton(self, node):', 'def visit_MatchSequence(self, node):', 'def visit_MatchStar(self, node):', 'def visit_MatchMapping(self, node):', 'def write_key_pattern_pair(pair):', 'def visit_MatchClass(self, node):', 'def write_attr_pattern(pair):', 'def visit_MatchAs(self, node):', 'def visit_MatchOr(self, node):', 'def unparse(ast_obj):', 'def __getattr__(name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\base64.py:
Classes: []
Functions: ['def _bytes_from_decode_data(s):', 'def b64encode(s, altchars=None):', 'def b64decode(s, altchars=None, validate=False):', 'def standard_b64encode(s):', 'def standard_b64decode(s):', 'def urlsafe_b64encode(s):', 'def urlsafe_b64decode(s):', 'def _b32encode(alphabet, s):', 'def _b32decode(alphabet, s, casefold=False, map01=None):', 'def b32encode(s):', 'def b32decode(s, casefold=False, map01=None):', 'def b32hexencode(s):', 'def b32hexdecode(s, casefold=False):', 'def b16encode(s):', 'def b16decode(s, casefold=False):', 'def _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):', 'def a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False):', "def a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v'):", 'def b85encode(b, pad=False):', 'def b85decode(b):', 'def z85encode(s):', 'def z85decode(s):', 'def encode(input, output):', 'def decode(input, output):', 'def _input_type_check(s):', 'def encodebytes(s):', 'def decodebytes(s):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\bdb.py:
Classes: ['class BdbQuit(Exception):', 'class Bdb:', 'class Breakpoint:', 'class Tdb(Bdb):']
Functions: ['def __init__(self, skip=None):', 'def canonic(self, filename):', 'def reset(self):', 'def set_enterframe(self, frame):', 'def trace_dispatch(self, frame, event, arg):', 'def dispatch_line(self, frame):', 'def dispatch_call(self, frame, arg):', 'def dispatch_return(self, frame, arg):', 'def dispatch_exception(self, frame, arg):', 'def dispatch_opcode(self, frame, arg):', 'def is_skipped_module(self, module_name):', 'def stop_here(self, frame):', 'def break_here(self, frame):', 'def do_clear(self, arg):', 'def break_anywhere(self, frame):', 'def user_call(self, frame, argument_list):', 'def user_line(self, frame):', 'def user_return(self, frame, return_value):', 'def user_exception(self, frame, exc_info):', 'def user_opcode(self, frame):', 'def _set_trace_opcodes(self, trace_opcodes):', 'def _set_stopinfo(self, stopframe, returnframe, stoplineno=0, opcode=False):', 'def _set_caller_tracefunc(self, current_frame):', 'def set_until(self, frame, lineno=None):', 'def set_step(self):', 'def set_stepinstr(self):', 'def set_next(self, frame):', 'def set_return(self, frame):', 'def set_trace(self, frame=None):', 'def set_continue(self):', 'def set_quit(self):', 'def _add_to_breaks(self, filename, lineno):', 'def set_break(self, filename, lineno, temporary=False, cond=None,', 'def _load_breaks(self):', 'def _prune_breaks(self, filename, lineno):', 'def clear_break(self, filename, lineno):', 'def clear_bpbynumber(self, arg):', 'def clear_all_file_breaks(self, filename):', 'def clear_all_breaks(self):', 'def get_bpbynumber(self, arg):', 'def get_break(self, filename, lineno):', 'def get_breaks(self, filename, lineno):', 'def get_file_breaks(self, filename):', 'def get_all_breaks(self):', 'def get_stack(self, f, t):', "def format_stack_entry(self, frame_lineno, lprefix=': '):", 'def run(self, cmd, globals=None, locals=None):', 'def runeval(self, expr, globals=None, locals=None):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kwds):', 'def set_trace():', 'def __init__(self, file, line, temporary=False, cond=None, funcname=None):', 'def clearBreakpoints():', 'def deleteMe(self):', 'def enable(self):', 'def disable(self):', 'def bpprint(self, out=None):', 'def bpformat(self):', 'def __str__(self):', 'def checkfuncname(b, frame):', 'def effective(file, line, frame):', 'def user_call(self, frame, args):', 'def user_line(self, frame):', 'def user_return(self, frame, retval):', 'def user_exception(self, frame, exc_stuff):', 'def foo(n):', 'def bar(a):', 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\bisect.py:
Classes: []
Functions: ['def insort_right(a, x, lo=0, hi=None, *, key=None):', 'def bisect_right(a, x, lo=0, hi=None, *, key=None):', 'def insort_left(a, x, lo=0, hi=None, *, key=None):', 'def bisect_left(a, x, lo=0, hi=None, *, key=None):']

Analyzed C:\dev\adn_trash_code\python_libs\bz2.py:
Classes: ['class BZ2File(_compression.BaseStream):']
Functions: ['def __init__(self, filename, mode="r", *, compresslevel=9):', 'def close(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def fileno(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def peek(self, n=0):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readinto(self, b):', 'def readline(self, size=-1):', 'def readlines(self, size=-1):', 'def write(self, data):', 'def writelines(self, seq):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):', 'def open(filename, mode="rb", compresslevel=9,', 'def compress(data, compresslevel=9):', 'def decompress(data):']

Analyzed C:\dev\adn_trash_code\python_libs\calendar.py:
Classes: ['class IllegalMonthError(ValueError, IndexError):', 'class IllegalWeekdayError(ValueError):', 'class Month(IntEnum):', 'class Day(IntEnum):', 'class _localized_month:', 'class _localized_day:', 'class Calendar(object):', 'class TextCalendar(Calendar):', 'class HTMLCalendar(Calendar):', 'class different_locale:', 'class LocaleTextCalendar(TextCalendar):', 'class LocaleHTMLCalendar(HTMLCalendar):']
Functions: ['def __init__(self, month):', 'def __str__(self):', 'def __init__(self, weekday):', 'def __str__(self):', 'def __getattr__(name):', 'def __init__(self, format):', 'def __getitem__(self, i):', 'def __len__(self):', 'def __init__(self, format):', 'def __getitem__(self, i):', 'def __len__(self):', 'def isleap(year):', 'def leapdays(y1, y2):', 'def weekday(year, month, day):', 'def _validate_month(month):', 'def monthrange(year, month):', 'def _monthlen(year, month):', 'def _prevmonth(year, month):', 'def _nextmonth(year, month):', 'def __init__(self, firstweekday=0):', 'def getfirstweekday(self):', 'def setfirstweekday(self, firstweekday):', 'def iterweekdays(self):', 'def itermonthdates(self, year, month):', 'def itermonthdays(self, year, month):', 'def itermonthdays2(self, year, month):', 'def itermonthdays3(self, year, month):', 'def itermonthdays4(self, year, month):', 'def monthdatescalendar(self, year, month):', 'def monthdays2calendar(self, year, month):', 'def monthdayscalendar(self, year, month):', 'def yeardatescalendar(self, year, width=3):', 'def yeardays2calendar(self, year, width=3):', 'def yeardayscalendar(self, year, width=3):', 'def prweek(self, theweek, width):', 'def formatday(self, day, weekday, width):', 'def formatweek(self, theweek, width):', 'def formatweekday(self, day, width):', 'def formatweekheader(self, width):', 'def formatmonthname(self, theyear, themonth, width, withyear=True):', 'def prmonth(self, theyear, themonth, w=0, l=0):', 'def formatmonth(self, theyear, themonth, w=0, l=0):', 'def formatyear(self, theyear, w=2, l=1, c=6, m=3):', 'def pryear(self, theyear, w=0, l=0, c=6, m=3):', 'def formatday(self, day, weekday):', 'def formatweek(self, theweek):', 'def formatweekday(self, day):', 'def formatweekheader(self):', 'def formatmonthname(self, theyear, themonth, withyear=True):', 'def formatmonth(self, theyear, themonth, withyear=True):', 'def formatyear(self, theyear, width=3):', "def formatyearpage(self, theyear, width=3, css='calendar.css', encoding=None):", 'def __init__(self, locale):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _get_default_locale():', 'def __init__(self, firstweekday=0, locale=None):', 'def formatweekday(self, day, width):', 'def formatmonthname(self, theyear, themonth, width, withyear=True):', 'def __init__(self, firstweekday=0, locale=None):', 'def formatweekday(self, day):', 'def formatmonthname(self, theyear, themonth, withyear=True):', 'def setfirstweekday(firstweekday):', 'def format(cols, colwidth=_colwidth, spacing=_spacing):', 'def formatstring(cols, colwidth=_colwidth, spacing=_spacing):', 'def timegm(tuple):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\cmd.py:
Classes: ['class Cmd:']
Functions: ["def __init__(self, completekey='tab', stdin=None, stdout=None):", 'def cmdloop(self, intro=None):', 'def precmd(self, line):', 'def postcmd(self, stop, line):', 'def preloop(self):', 'def postloop(self):', 'def parseline(self, line):', 'def onecmd(self, line):', 'def emptyline(self):', 'def default(self, line):', 'def completedefault(self, *ignored):', 'def completenames(self, text, *ignored):', 'def complete(self, text, state):', 'def get_names(self):', 'def complete_help(self, *args):', 'def do_help(self, arg):', 'def print_topics(self, header, cmds, cmdlen, maxcol):', 'def columnize(self, list, displaywidth=80):']

Analyzed C:\dev\adn_trash_code\python_libs\code.py:
Classes: ['class InteractiveInterpreter:', 'class InteractiveConsole(InteractiveInterpreter):', 'class Quitter:']
Functions: ['def __init__(self, locals=None):', 'def runsource(self, source, filename="<input>", symbol="single"):', 'def runcode(self, code):', 'def showsyntaxerror(self, filename=None, **kwargs):', 'def showtraceback(self):', 'def _showtraceback(self, typ, value, tb, source):', 'def _excepthook(self, typ, value, tb):', 'def write(self, data):', 'def __init__(self, locals=None, filename="<console>", *, local_exit=False):', 'def resetbuffer(self):', 'def interact(self, banner=None, exitmsg=None):', 'def push(self, line, filename=None, _symbol="single"):', 'def raw_input(self, prompt=""):', 'def __init__(self, name):', 'def __repr__(self):', 'def __call__(self, code=None):', 'def interact(banner=None, readfunc=None, local=None, exitmsg=None, local_exit=False):']

Analyzed C:\dev\adn_trash_code\python_libs\codecs.py:
Classes: ['class CodecInfo(tuple):', 'class Codec:', 'class IncrementalEncoder(object):', 'class BufferedIncrementalEncoder(IncrementalEncoder):', 'class IncrementalDecoder(object):', 'class BufferedIncrementalDecoder(IncrementalDecoder):', 'class StreamWriter(Codec):', 'class StreamReader(Codec):', 'class StreamReaderWriter:', 'class StreamRecoder:']
Functions: ['def __new__(cls, encode, decode, streamreader=None, streamwriter=None,', 'def __repr__(self):', 'def __getnewargs__(self):', "def encode(self, input, errors='strict'):", "def decode(self, input, errors='strict'):", "def __init__(self, errors='strict'):", 'def encode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def _buffer_encode(self, input, errors, final):', 'def encode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def decode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, errors='strict'):", 'def _buffer_decode(self, input, errors, final):', 'def decode(self, input, final=False):', 'def reset(self):', 'def getstate(self):', 'def setstate(self, state):', "def __init__(self, stream, errors='strict'):", 'def write(self, object):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def __init__(self, stream, errors='strict'):", "def decode(self, input, errors='strict'):", 'def read(self, size=-1, chars=-1, firstline=False):', 'def readline(self, size=None, keepends=True):', 'def readlines(self, sizehint=None, keepends=True):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __next__(self):', 'def __iter__(self):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def __init__(self, stream, Reader, Writer, errors='strict'):", 'def read(self, size=-1):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __next__(self):', 'def __iter__(self):', 'def write(self, data):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', 'def __init__(self, stream, encode, decode, Reader, Writer,', 'def read(self, size=-1):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __next__(self):', 'def __iter__(self):', 'def write(self, data):', 'def writelines(self, list):', 'def reset(self):', 'def seek(self, offset, whence=0):', 'def __getattr__(self, name,', 'def __enter__(self):', 'def __exit__(self, type, value, tb):', 'def __reduce_ex__(self, proto):', "def open(filename, mode='r', encoding=None, errors='strict', buffering=-1):", "def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):", 'def getencoder(encoding):', 'def getdecoder(encoding):', 'def getincrementalencoder(encoding):', 'def getincrementaldecoder(encoding):', 'def getreader(encoding):', 'def getwriter(encoding):', "def iterencode(iterator, encoding, errors='strict', **kwargs):", "def iterdecode(iterator, encoding, errors='strict', **kwargs):", 'def make_identity_dict(rng):', 'def make_encoding_map(decoding_map):']

Analyzed C:\dev\adn_trash_code\python_libs\codeop.py:
Classes: ['class Compile:', 'class CommandCompiler:']
Functions: ['def _maybe_compile(compiler, source, filename, symbol):', 'def _compile(source, filename, symbol, incomplete_input=True):', 'def compile_command(source, filename="<input>", symbol="single"):', 'def __init__(self):', 'def __call__(self, source, filename, symbol, flags=0, **kwargs):', 'def __init__(self,):', 'def __call__(self, source, filename="<input>", symbol="single"):']

Analyzed C:\dev\adn_trash_code\python_libs\colorsys.py:
Classes: []
Functions: ['def rgb_to_yiq(r, g, b):', 'def yiq_to_rgb(y, i, q):', 'def rgb_to_hls(r, g, b):', 'def hls_to_rgb(h, l, s):', 'def _v(m1, m2, hue):', 'def rgb_to_hsv(r, g, b):', 'def hsv_to_rgb(h, s, v):']

Analyzed C:\dev\adn_trash_code\python_libs\compileall.py:
Classes: []
Functions: ['def _walk_dir(dir, maxlevels, quiet=0):', 'def compile_dir(dir, maxlevels=None, ddir=None, force=False,', 'def compile_file(fullname, ddir=None, force=False, rx=None, quiet=0,', 'def compile_path(skip_curdir=1, maxlevels=0, force=False, quiet=0,', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\configparser.py:
Classes: ['class Error(Exception):', 'class NoSectionError(Error):', 'class DuplicateSectionError(Error):', 'class DuplicateOptionError(Error):', 'class NoOptionError(Error):', 'class InterpolationError(Error):', 'class InterpolationMissingOptionError(InterpolationError):', 'class InterpolationSyntaxError(InterpolationError):', 'class InterpolationDepthError(InterpolationError):', 'class ParsingError(Error):', 'class MissingSectionHeaderError(ParsingError):', 'class MultilineContinuationError(ParsingError):', 'class _UnnamedSection:', 'class Interpolation:', 'class BasicInterpolation(Interpolation):', 'class ExtendedInterpolation(Interpolation):', 'class _ReadState:', 'class _Line(str):', 'class RawConfigParser(MutableMapping):', 'class ConfigParser(RawConfigParser):', 'class SectionProxy(MutableMapping):', 'class ConverterMapping(MutableMapping):']
Functions: ["def __init__(self, msg=''):", 'def __repr__(self):', 'def __init__(self, section):', 'def __init__(self, section, source=None, lineno=None):', 'def __init__(self, section, option, source=None, lineno=None):', 'def __init__(self, option, section):', 'def __init__(self, option, section, msg):', 'def __init__(self, option, section, rawval, reference):', 'def __init__(self, option, section, rawval):', 'def __init__(self, source, *args):', 'def append(self, lineno, line):', 'def combine(self, others):', "def _raise_all(exceptions: Iterable['ParsingError']):", 'def __init__(self, filename, lineno, line):', 'def __init__(self, filename, lineno, line):', 'def __repr__(self):', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def before_read(self, parser, section, option, value):', 'def before_write(self, parser, section, option, value):', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def _interpolate_some(self, parser, option, accum, rest, section, map,', 'def before_get(self, parser, section, option, value, defaults):', 'def before_set(self, parser, section, option, value):', 'def _interpolate_some(self, parser, option, accum, rest, section, map,', 'def __init__(self):', 'def __new__(cls, val, *args, **kwargs):', 'def __init__(self, val, prefixes):', 'def clean(self):', 'def has_comments(self):', 'def _strip_inline(self):', 'def _strip_full(self):', 'def __init__(self, defaults=None, dict_type=_default_dict,', 'def defaults(self):', 'def sections(self):', 'def add_section(self, section):', 'def has_section(self, section):', 'def options(self, section):', 'def read(self, filenames, encoding=None):', 'def read_file(self, f, source=None):', "def read_string(self, string, source='<string>'):", "def read_dict(self, dictionary, source='<dict>'):", 'def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):', 'def _get(self, section, conv, option, **kwargs):', 'def _get_conv(self, section, option, conv, *, raw=False, vars=None,', 'def getint(self, section, option, *, raw=False, vars=None,', 'def getfloat(self, section, option, *, raw=False, vars=None,', 'def getboolean(self, section, option, *, raw=False, vars=None,', 'def items(self, section=_UNSET, raw=False, vars=None):', 'def popitem(self):', 'def optionxform(self, optionstr):', 'def has_option(self, section, option):', 'def set(self, section, option, value=None):', 'def write(self, fp, space_around_delimiters=True):', 'def _write_section(self, fp, section_name, section_items, delimiter, unnamed=False):', 'def remove_option(self, section, option):', 'def remove_section(self, section):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __contains__(self, key):', 'def __len__(self):', 'def __iter__(self):', 'def _read(self, fp, fpname):', 'def _read_inner(self, fp, fpname):', 'def _handle_continuation_line(self, st, line, fpname):', 'def _handle_rest(self, st, line, fpname):', 'def _handle_header(self, st, sectname, fpname):', 'def _handle_option(self, st, line, fpname):', 'def _join_multiline_values(self):', 'def _read_defaults(self, defaults):', 'def _unify_values(self, section, vars):', 'def _convert_to_boolean(self, value):', 'def _validate_value_types(self, *, section="", option="", value=""):', 'def converters(self):', 'def set(self, section, option, value=None):', 'def add_section(self, section):', 'def _read_defaults(self, defaults):', 'def __init__(self, parser, name):', 'def __repr__(self):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __contains__(self, key):', 'def __len__(self):', 'def __iter__(self):', 'def _options(self):', 'def parser(self):', 'def name(self):', 'def get(self, option, fallback=None, *, raw=False, vars=None,', 'def __init__(self, parser):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __iter__(self):', 'def __len__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\contextlib.py:
Classes: ['class AbstractContextManager(abc.ABC):', 'class AbstractAsyncContextManager(abc.ABC):', 'class ContextDecorator(object):', 'class AsyncContextDecorator(object):', 'class _GeneratorContextManagerBase:', 'class _GeneratorContextManager(', 'class _AsyncGeneratorContextManager(', 'class closing(AbstractContextManager):', 'class aclosing(AbstractAsyncContextManager):', 'class _RedirectStream(AbstractContextManager):', 'class redirect_stdout(_RedirectStream):', 'class redirect_stderr(_RedirectStream):', 'class suppress(AbstractContextManager):', 'class _BaseExitStack:', 'class ExitStack(_BaseExitStack, AbstractContextManager):', 'class AsyncExitStack(_BaseExitStack, AbstractAsyncContextManager):', 'class nullcontext(AbstractContextManager, AbstractAsyncContextManager):', 'class chdir(AbstractContextManager):']
Functions: ['def __enter__(self):', 'def __exit__(self, exc_type, exc_value, traceback):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def _recreate_cm(self):', 'def __call__(self, func):', 'def inner(*args, **kwds):', 'def _recreate_cm(self):', 'def __call__(self, func):', 'def __init__(self, func, args, kwds):', 'def _recreate_cm(self):', 'def __enter__(self):', 'def __exit__(self, typ, value, traceback):', 'def contextmanager(func):', 'def some_generator(<arguments>):', 'def helper(*args, **kwds):', 'def asynccontextmanager(func):', 'def helper(*args, **kwds):', 'def __init__(self, thing):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def __init__(self, thing):', 'def __init__(self, new_target):', 'def __enter__(self):', 'def __exit__(self, exctype, excinst, exctb):', 'def __init__(self, *exceptions):', 'def __enter__(self):', 'def __exit__(self, exctype, excinst, exctb):', 'def _create_exit_wrapper(cm, cm_exit):', 'def _create_cb_wrapper(callback, /, *args, **kwds):', 'def _exit_wrapper(exc_type, exc, tb):', 'def __init__(self):', 'def pop_all(self):', 'def push(self, exit):', 'def enter_context(self, cm):', 'def callback(self, callback, /, *args, **kwds):', 'def _push_cm_exit(self, cm, cm_exit):', 'def _push_exit_callback(self, callback, is_sync=True):', 'def __enter__(self):', 'def __exit__(self, *exc_details):', 'def _fix_exception_context(new_exc, old_exc):', 'def close(self):', 'def _create_async_exit_wrapper(cm, cm_exit):', 'def _create_async_cb_wrapper(callback, /, *args, **kwds):', 'def push_async_exit(self, exit):', 'def push_async_callback(self, callback, /, *args, **kwds):', 'def _push_async_cm_exit(self, cm, cm_exit):', 'def _fix_exception_context(new_exc, old_exc):', 'def __init__(self, enter_result=None):', 'def __enter__(self):', 'def __exit__(self, *excinfo):', 'def __init__(self, path):', 'def __enter__(self):', 'def __exit__(self, *excinfo):']

Analyzed C:\dev\adn_trash_code\python_libs\contextvars.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\copy.py:
Classes: ['class instances).', 'class Error(Exception):']
Functions: ['def copy(x):', 'def _copy_immutable(x):', 'def deepcopy(x, memo=None, _nil=[]):', 'def _deepcopy_atomic(x, memo):', 'def _deepcopy_list(x, memo, deepcopy=deepcopy):', 'def _deepcopy_tuple(x, memo, deepcopy=deepcopy):', 'def _deepcopy_dict(x, memo, deepcopy=deepcopy):', 'def _deepcopy_method(x, memo): # Copy instance methods', 'def _keep_alive(x, memo):', 'def _reconstruct(x, memo, func, args,', 'def replace(obj, /, **changes):']

Analyzed C:\dev\adn_trash_code\python_libs\copyreg.py:
Classes: ["class found there.  (This assumes classes don't modify their"]
Functions: ['def pickle(ob_type, pickle_function, constructor_ob=None):', 'def constructor(object):', 'def pickle_complex(c):', 'def pickle_union(obj):', 'def _reconstructor(cls, base, state):', 'def _reduce_ex(self, proto):', 'def __newobj__(cls, *args):', 'def __newobj_ex__(cls, args, kwargs):', 'def _slotnames(cls):', 'def add_extension(module, name, code):', 'def remove_extension(module, name, code):', 'def clear_extension_cache():']

Analyzed C:\dev\adn_trash_code\python_libs\cProfile.py:
Classes: ['class Profile(_lsprof.Profiler):']
Functions: ['def run(statement, filename=None, sort=-1):', 'def runctx(statement, globals, locals, filename=None, sort=-1):', 'def print_stats(self, sort=-1):', 'def dump_stats(self, file):', 'def create_stats(self):', 'def snapshot_stats(self):', 'def run(self, cmd):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kw):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def label(code):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\csv.py:
Classes: ['class excel:', 'class Dialect:', 'class excel(Dialect):', 'class excel_tab(excel):', 'class unix_dialect(Dialect):', 'class DictReader:', 'class DictWriter:', 'class Sniffer:', 'class dialect(Dialect):']
Functions: ['def __init__(self):', 'def _validate(self):', 'def __init__(self, f, fieldnames=None, restkey=None, restval=None,', 'def __iter__(self):', 'def fieldnames(self):', 'def fieldnames(self, value):', 'def __next__(self):', 'def __init__(self, f, fieldnames, restval="", extrasaction="raise",', 'def writeheader(self):', 'def _dict_to_list(self, rowdict):', 'def writerow(self, rowdict):', 'def writerows(self, rowdicts):', 'def __init__(self):', 'def sniff(self, sample, delimiters=None):', 'def _guess_quote_and_delimiter(self, data, delimiters):', 'def _guess_delimiter(self, data, delimiters):', 'def has_header(self, sample):']

Analyzed C:\dev\adn_trash_code\python_libs\dataclasses.py:
Classes: ['class FrozenInstanceError(AttributeError): pass', 'class _HAS_DEFAULT_FACTORY_CLASS:', 'class _MISSING_TYPE:', 'class _KW_ONLY_TYPE:', 'class _FIELD_BASE:', 'class InitVar:', 'class Field:', 'class _DataclassParams:', 'class _FuncBuilder:', 'class C:', 'class C:', 'class C(Base):', 'class C:']
Functions: ['def __repr__(self):', 'def __init__(self, name):', 'def __repr__(self):', 'def __init__(self, type):', 'def __repr__(self):', 'def __class_getitem__(cls, type):', 'def __init__(self, default, default_factory, init, repr, hash, compare,', 'def __repr__(self):', 'def __set_name__(self, owner, name):', 'def __init__(self,', 'def __repr__(self):', 'def field(*, default=MISSING, default_factory=MISSING, init=True, repr=True,', 'def _fields_in_init_order(fields):', 'def _tuple_str(obj_name, fields):', 'def __init__(self, globals):', 'def add_fn(self, name, args, body, *, locals=None, return_type=MISSING,', 'def add_fns_to_class(self, cls):', 'def _field_assign(frozen, name, value, self_name):', 'def _field_init(f, frozen, globals, self_name, slots):', 'def _init_param(f):', 'def _init_fn(fields, std_fields, kw_only_fields, frozen, has_post_init,', 'def _frozen_get_del_attr(cls, fields, func_builder):', 'def _is_classvar(a_type, typing):', 'def _is_initvar(a_type, dataclasses):', 'def _is_kw_only(a_type, dataclasses):', 'def _is_type(annotation, cls, a_module, a_type, is_type_predicate):', 'def _get_field(cls, a_name, a_type, default_kw_only):', 'def _set_new_attribute(cls, name, value):', 'def _hash_set_none(cls, fields, func_builder):', 'def _hash_add(cls, fields, func_builder):', 'def _hash_exception(cls, fields, func_builder):', 'def _process_class(cls, init, repr, eq, order, unsafe_hash, frozen,', 'def _dataclass_getstate(self):', 'def _dataclass_setstate(self, state):', 'def _get_slots(cls):', 'def _add_slots(cls, is_frozen, weakref_slot):', 'def dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False,', 'def wrap(cls):', 'def fields(class_or_instance):', 'def _is_dataclass_instance(obj):', 'def is_dataclass(obj):', 'def asdict(obj, *, dict_factory=dict):', 'def _asdict_inner(obj, dict_factory):', 'def astuple(obj, *, tuple_factory=tuple):', 'def _astuple_inner(obj, tuple_factory):', 'def make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True,', 'def exec_body_callback(ns):', 'def replace(obj, /, **changes):', 'def _replace(self, /, **changes):']

Analyzed C:\dev\adn_trash_code\python_libs\datetime.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\decimal.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\difflib.py:
Classes: ['class SequenceMatcher:', 'class Differ:', 'class HtmlDiff(object):']
Functions: ['def _calculate_ratio(matches, length):', "def __init__(self, isjunk=None, a='', b='', autojunk=True):", 'def set_seqs(self, a, b):', 'def set_seq1(self, a):', 'def set_seq2(self, b):', 'def __chain_b(self):', 'def find_longest_match(self, alo=0, ahi=None, blo=0, bhi=None):', 'def get_matching_blocks(self):', 'def get_opcodes(self):', 'def get_grouped_opcodes(self, n=3):', 'def ratio(self):', 'def quick_ratio(self):', 'def real_quick_ratio(self):', 'def get_close_matches(word, possibilities, n=3, cutoff=0.6):', 'def _keep_original_ws(s, tag_s):', 'def __init__(self, linejunk=None, charjunk=None):', 'def compare(self, a, b):', 'def _dump(self, tag, x, lo, hi):', 'def _plain_replace(self, a, alo, ahi, b, blo, bhi):', 'def _fancy_replace(self, a, alo, ahi, b, blo, bhi):', 'def _fancy_helper(self, a, alo, ahi, b, blo, bhi):', 'def _qformat(self, aline, bline, atags, btags):', 'def IS_LINE_JUNK(line, pat=re.compile(r"\\s*(?:#\\s*)?$").match):', 'def IS_CHARACTER_JUNK(ch, ws=" \\t"):', 'def _format_range_unified(start, stop):', "def unified_diff(a, b, fromfile='', tofile='', fromfiledate='',", 'def _format_range_context(start, stop):', "def context_diff(a, b, fromfile='', tofile='',", 'def _check_types(a, b, *args):', "def diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'',", 'def decode(s):', 'def ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):', 'def _mdiff(fromlines, tolines, context=None, linejunk=None,', 'def _make_line(lines, format_key, side, num_lines=[0,0]):', 'def record_sub_info(match_object,sub_info=sub_info):', 'def _line_iterator():', 'def _line_pair_iterator():', 'def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,', "def make_file(self, fromlines, tolines, fromdesc='', todesc='',", 'def _tab_newline_replace(self,fromlines,tolines):', 'def expand_tabs(line):', 'def _split_line(self,data_list,line_num,text):', 'def _line_wrapper(self,diffs):', 'def _collect_lines(self,diffs):', 'def _format_line(self,side,flag,linenum,text):', 'def _make_prefix(self):', 'def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):', "def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,", 'def restore(delta, which):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\dis.py:
Classes: ['class _Unknown:', 'class _ExceptionTableEntry(_ExceptionTableEntryBase):', 'class Instruction(_Instruction):', 'class Formatter:', 'class ArgResolver:', 'class Bytecode:']
Functions: ['def _try_compile(source, name):', 'def dis(x=None, *, file=None, depth=None, show_caches=False, adaptive=False,', 'def distb(tb=None, *, file=None, show_caches=False, adaptive=False, show_offsets=False):', 'def pretty_flags(flags):', 'def __repr__(self):', 'def _get_code_object(x):', 'def _deoptop(op):', 'def _get_code_array(co, adaptive):', 'def code_info(x):', 'def _format_code_info(co):', 'def show_code(co, *, file=None):', 'def _get_cache_size(opname):', 'def _get_jump_target(op, arg, offset):', 'def oparg(self):', 'def baseopcode(self):', 'def baseopname(self):', 'def cache_offset(self):', 'def end_offset(self):', 'def jump_target(self):', 'def is_jump_target(self):', 'def __str__(self):', 'def __init__(self, file=None, lineno_width=0, offset_width=0, label_width=0,', 'def print_instruction(self, instr, mark_as_current=False):', 'def print_instruction_line(self, instr, mark_as_current):', 'def print_exception_table(self, exception_entries):', 'def __init__(self, co_consts=None, names=None, varname_from_oparg=None, labels_map=None):', 'def offset_from_jump_arg(self, op, arg, offset):', 'def get_label_for_offset(self, offset):', 'def get_argval_argrepr(self, op, arg, offset):', 'def get_instructions(x, *, first_line=None, show_caches=None, adaptive=False):', 'def _get_const_value(op, arg, co_consts):', 'def _get_const_info(op, arg, co_consts):', 'def _get_name_info(name_index, get_name, **extrainfo):', 'def _parse_varint(iterator):', 'def _parse_exception_table(code):', 'def _is_backward_jump(op):', 'def _get_instructions_bytes(code, linestarts=None, line_offset=0, co_positions=None,', 'def disassemble(co, lasti=-1, *, file=None, show_caches=False, adaptive=False,', 'def _disassemble_recursive(co, *, file=None, depth=None, show_caches=False, adaptive=False, show_offsets=False):', 'def _make_labels_map(original_code, exception_entries=()):', 'def _get_lineno_width(linestarts):', 'def _disassemble_bytes(code, lasti=-1, linestarts=None,', 'def print_instructions(instrs, exception_entries, formatter, lasti=-1):', 'def _disassemble_str(source, **kwargs):', 'def _unpack_opargs(code):', 'def findlabels(code):', 'def findlinestarts(code):', 'def _find_imports(co):', 'def _find_store_names(co):', 'def __init__(self, x, *, first_line=None, current_offset=None, show_caches=False, adaptive=False, show_offsets=False):', 'def __iter__(self):', 'def __repr__(self):', 'def from_traceback(cls, tb, *, show_caches=False, adaptive=False):', 'def info(self):', 'def dis(self):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\doctest.py:
Classes: ["class TestResults(namedtuple('TestResults', 'failed attempted')):", 'class _SpoofOut(StringIO):', 'class _OutputRedirectingPdb(pdb.Pdb):', 'class Example:', 'class DocTest:', 'class DocTestParser:', 'class DocTestFinder:', 'class DocTestRunner:', 'class OutputChecker:', 'class DocTestFailure(Exception):', 'class UnexpectedException(Exception):', 'class DebugRunner(DocTestRunner):', 'class doctest.Tester, then merges the results into (or creates)', 'class doctest.Tester, then merges the results into (or creates)', 'class DocTestCase(unittest.TestCase):', 'class SkipDocTestCase(DocTestCase):', 'class _DocTestSuite(unittest.TestSuite):', 'class DocFileCase(DocTestCase):', 'class _TestClass:']
Functions: ['def _test():', 'def __new__(cls, failed, attempted, *, skipped=0):', 'def __repr__(self):', 'def register_optionflag(name):', 'def _extract_future_flags(globs):', 'def _normalize_module(module, depth=2):', 'def _newline_convert(data):', 'def _load_testfile(filename, package, module_relative, encoding):', 'def _indent(s, indent=4):', 'def _exception_traceback(exc_info):', 'def getvalue(self):', 'def truncate(self, size=None):', 'def _ellipsis_match(want, got):', 'def _comment_line(line):', 'def _strip_exception_details(msg):', 'def __init__(self, out):', 'def set_trace(self, frame=None):', 'def set_continue(self):', 'def trace_dispatch(self, *args):', 'def _module_relative_path(module, test_path):', 'def __init__(self, source, want, exc_msg=None, lineno=0, indent=0,', 'def __eq__(self, other):', 'def __hash__(self):', 'def __init__(self, examples, globs, name, filename, lineno, docstring):', 'def __repr__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __lt__(self, other):', "def parse(self, string, name='<string>'):", 'def get_doctest(self, string, globs, name, filename, lineno):', "def get_examples(self, string, name='<string>'):", 'def _parse_example(self, m, name, lineno):', 'def _find_options(self, source, name, lineno):', 'def _min_indent(self, s):', 'def _check_prompt_blank(self, lines, indent, name, lineno):', 'def _check_prefix(self, lines, prefix, name, lineno):', 'def __init__(self, verbose=False, parser=DocTestParser(),', 'def find(self, obj, name=None, module=None, globs=None, extraglobs=None):', 'def _from_module(self, module, object):', 'def _is_routine(self, obj):', 'def _find(self, tests, obj, name, module, source_lines, globs, seen):', 'def _get_test(self, obj, name, module, globs, source_lines):', 'def _find_lineno(self, obj, source_lines):', 'def __init__(self, checker=None, verbose=None, optionflags=0):', 'def report_start(self, out, test, example):', 'def report_success(self, out, test, example, got):', 'def report_failure(self, out, test, example, got):', 'def report_unexpected_exception(self, out, test, example, exc_info):', 'def _failure_header(self, test, example):', 'def __run(self, test, compileflags, out):', 'def __record_outcome(self, test, failures, tries, skips):', 'def __patched_linecache_getlines(self, filename, module_globals=None):', 'def run(self, test, compileflags=None, out=None, clear_globs=True):', 'def out(s):', 'def summarize(self, verbose=None):', 'def merge(self, other):', 'def _n_items(items: list | dict) -> str:', 'def _toAscii(self, s):', 'def check_output(self, want, got, optionflags):', 'def _do_a_fancy_diff(self, want, got, optionflags):', 'def output_difference(self, example, got, optionflags):', 'def __init__(self, test, example, got):', 'def __str__(self):', 'def __init__(self, test, example, exc_info):', 'def __str__(self):', 'def run(self, test, compileflags=None, out=None, clear_globs=True):', 'def report_unexpected_exception(self, out, test, example, exc_info):', 'def report_failure(self, out, test, example, got):', 'def testmod(m=None, name=None, globs=None, verbose=None,', 'def testfile(filename, module_relative=True, name=None, package=None,', 'def run_docstring_examples(f, globs, verbose=False, name="NoName",', 'def set_unittest_reportflags(flags):', 'def __init__(self, test, optionflags=0, setUp=None, tearDown=None,', 'def setUp(self):', 'def tearDown(self):', 'def runTest(self):', 'def format_failure(self, err):', 'def debug(self):', 'def id(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def shortDescription(self):', 'def __init__(self, module):', 'def setUp(self):', 'def test_skip(self):', 'def shortDescription(self):', 'def _removeTestAtIndex(self, index):', 'def DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None,', 'def id(self):', 'def __repr__(self):', 'def format_failure(self, err):', 'def DocFileTest(path, module_relative=True, package=None,', 'def DocFileSuite(*paths, **kw):', 'def script_from_examples(s):', 'def testsource(module, name):', 'def debug_src(src, pm=False, globs=None):', 'def debug_script(src, pm=False, globs=None):', 'def debug(module, name, pm=False):', 'def __init__(self, val):', 'def square(self):', 'def get(self):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\enum.py:
Classes: ['class nonmember(object):', 'class member(object):', 'class _not_given:', 'class _auto_null:', 'class auto:', 'class property(DynamicClassAttribute):', 'class _proto_member:', 'class EnumDict(dict):', 'class EnumType(type):', 'class Enum(metaclass=EnumType):', 'class ReprEnum(Enum):', 'class IntEnum(int, ReprEnum):', 'class StrEnum(str, ReprEnum):', 'class FlagBoundary(StrEnum):', 'class Flag(Enum, boundary=STRICT):', 'class IntFlag(int, ReprEnum, Flag, boundary=KEEP):', 'class EnumCheck:', 'class verify:']
Functions: ['def __init__(self, value):', 'def __init__(self, value):', 'def _is_descriptor(obj):', 'def _is_dunder(name):', 'def _is_sunder(name):', 'def _is_internal_class(cls_name, obj):', 'def _is_private(cls_name, name):', 'def _is_single_bit(num):', 'def _make_class_unpicklable(obj):', 'def _break_on_call_reduce(self, proto):', 'def _iter_bits_lsb(num):', 'def show_flag_values(value):', 'def bin(num, max_bits=None):', 'def _dedent(text):', 'def __repr__(self):', 'def __repr__(self):', 'def __init__(self, value=_auto_null):', 'def __repr__(self):', 'def __get__(self, instance, ownerclass=None):', 'def __set__(self, instance, value):', 'def __delete__(self, instance):', 'def __set_name__(self, ownerclass, name):', 'def __init__(self, value):', 'def __set_name__(self, enum_class, member_name):', 'def __init__(self, cls_name=None):', 'def __setitem__(self, key, value):', 'def member_names(self):', 'def update(self, members, **more_members):', 'def __prepare__(metacls, cls, bases, **kwds):', 'def __new__(metacls, cls, bases, classdict, *, boundary=None, _simple=False, **kwds):', 'def __bool__(cls):', 'def __call__(cls, value, names=_not_given, *values, module=None, qualname=None, type=None, start=1, boundary=None):', 'def __contains__(cls, value):', 'def __delattr__(cls, attr):', 'def __dir__(cls):', 'def __getitem__(cls, name):', 'def __iter__(cls):', 'def __len__(cls):', 'def __members__(cls):', 'def __repr__(cls):', 'def __reversed__(cls):', 'def __setattr__(cls, name, value):', 'def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1, boundary=None):', 'def _convert_(cls, name, module, filter, source=None, *, boundary=None, as_global=False):', 'def _check_for_existing_members_(mcls, class_name, bases):', 'def _get_mixins_(mcls, class_name, bases):', 'def _find_data_repr_(mcls, class_name, bases):', 'def _find_data_type_(mcls, class_name, bases):', 'def _find_new_(mcls, classdict, member_type, first_enum):', 'def _add_member_(cls, name, member):', 'def __signature__(cls):', 'def __new__(cls, value):', 'def __init__(self, *args, **kwds):', 'def _add_alias_(self, name):', 'def _add_value_alias_(self, value):', 'def _generate_next_value_(name, start, count, last_values):', 'def _missing_(cls, value):', 'def __repr__(self):', 'def __str__(self):', 'def __dir__(self):', 'def __format__(self, format_spec):', 'def __hash__(self):', 'def __reduce_ex__(self, proto):', 'def __deepcopy__(self,memo):', 'def __copy__(self):', 'def name(self):', 'def value(self):', 'def __new__(cls, *values):', 'def _generate_next_value_(name, start, count, last_values):', 'def pickle_by_global_name(self, proto):', 'def pickle_by_enum_name(self, proto):', 'def _generate_next_value_(name, start, count, last_values):', 'def _iter_member_by_value_(cls, value):', 'def _iter_member_by_def_(cls, value):', 'def _missing_(cls, value):', 'def __contains__(self, other):', 'def __iter__(self):', 'def __len__(self):', 'def __repr__(self):', 'def __str__(self):', 'def __bool__(self):', 'def _get_value(self, flag):', 'def __or__(self, other):', 'def __and__(self, other):', 'def __xor__(self, other):', 'def __invert__(self):', 'def _high_bit(value):', 'def unique(enumeration):', 'def _dataclass_repr(self):', 'def global_enum_repr(self):', 'def global_flag_repr(self):', 'def global_str(self):', 'def global_enum(cls, update_str=False):', 'def _simple_enum(etype=Enum, *, boundary=None, use_args=None):', 'def convert_class(cls):', 'def __init__(self, *checks):', 'def __call__(self, enumeration):', 'def _test_simple_enum(checked_enum, simple_enum):', 'def _old_convert_(etype, name, module, filter, source=None, *, boundary=None):']

Analyzed C:\dev\adn_trash_code\python_libs\filecmp.py:
Classes: ['class dircmp:']
Functions: ['def clear_cache():', 'def cmp(f1, f2, shallow=True):', 'def _sig(st):', 'def _do_cmp(f1, f2):', 'def __init__(self, a, b, ignore=None, hide=None, *, shallow=True): # Initialize', 'def phase0(self): # Compare everything except common subdirectories', 'def phase1(self): # Compute common names', 'def phase2(self): # Distinguish files, directories, funnies', 'def phase3(self): # Find out differences between common files', 'def phase4(self): # Find out differences between common subdirectories', 'def phase4_closure(self): # Recursively call phase4() on subdirectories', 'def report(self): # Print a report on the differences between a and b', 'def report_partial_closure(self): # Print reports on self and on subdirs', 'def report_full_closure(self): # Report on self and subdirs recursively', 'def __getattr__(self, attr):', 'def cmpfiles(a, b, common, shallow=True):', 'def _cmp(a, b, sh, abs=abs, cmp=cmp):', 'def _filter(flist, skip):', 'def demo():']

Analyzed C:\dev\adn_trash_code\python_libs\fileinput.py:
Classes: ['class FileInput:']
Functions: ['def input(files=None, inplace=False, backup="", *, mode="r", openhook=None,', 'def close():', 'def nextfile():', 'def filename():', 'def lineno():', 'def filelineno():', 'def fileno():', 'def isfirstline():', 'def isstdin():', 'def __init__(self, files=None, inplace=False, backup="", *,', 'def __del__(self):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def __iter__(self):', 'def __next__(self):', 'def nextfile(self):', 'def readline(self):', 'def _readline(self):', 'def filename(self):', 'def lineno(self):', 'def filelineno(self):', 'def fileno(self):', 'def isfirstline(self):', 'def isstdin(self):', 'def hook_compressed(filename, mode, *, encoding=None, errors=None):', 'def hook_encoded(encoding, errors=None):', 'def openhook(filename, mode):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\fnmatch.py:
Classes: []
Functions: ['def fnmatch(name, pat):', 'def _compile_pattern(pat):', 'def filter(names, pat):', 'def fnmatchcase(name, pat):', 'def translate(pat):', 'def _translate(pat, STAR, QUESTION_MARK):', 'def _join_translated_parts(inp, STAR):']

Analyzed C:\dev\adn_trash_code\python_libs\fractions.py:
Classes: ['class Fraction(numbers.Rational):', "class doesn't subclass a concrete type, there's no"]
Functions: ['def _hash_algorithm(numerator, denominator):', 'def _round_to_exponent(n, d, exponent, no_neg_zero=False):', 'def _round_to_figures(n, d, figures):', 'def __new__(cls, numerator=0, denominator=None):', 'def from_float(cls, f):', 'def from_decimal(cls, dec):', 'def _from_coprime_ints(cls, numerator, denominator, /):', 'def is_integer(self):', 'def as_integer_ratio(self):', 'def limit_denominator(self, max_denominator=1000000):', 'def numerator(a):', 'def denominator(a):', 'def __repr__(self):', 'def __str__(self):', 'def _format_general(self, match):', 'def _format_float_style(self, match):', 'def __format__(self, format_spec, /):', 'def _operator_fallbacks(monomorphic_operator, fallback_operator,', 'def __add__(self, other):', 'def __radd__(self, other):', 'def forward(a, b):', 'def reverse(b, a):', 'def _add(a, b):', 'def _sub(a, b):', 'def _mul(a, b):', 'def _div(a, b):', 'def _floordiv(a, b):', 'def _divmod(a, b):', 'def _mod(a, b):', 'def __pow__(a, b):', 'def __rpow__(b, a):', 'def __pos__(a):', 'def __neg__(a):', 'def __abs__(a):', 'def __int__(a, _index=operator.index):', 'def __trunc__(a):', 'def __floor__(a):', 'def __ceil__(a):', 'def __round__(self, ndigits=None):', 'def __hash__(self):', 'def __eq__(a, b):', 'def _richcmp(self, other, op):', 'def __lt__(a, b):', 'def __gt__(a, b):', 'def __le__(a, b):', 'def __ge__(a, b):', 'def __bool__(a):', 'def __reduce__(self):', 'def __copy__(self):', 'def __deepcopy__(self, memo):']

Analyzed C:\dev\adn_trash_code\python_libs\ftplib.py:
Classes: ['class Error(Exception): pass', 'class error_reply(Error): pass          # unexpected [123]xx reply', 'class error_temp(Error): pass           # 4xx errors', 'class error_perm(Error): pass           # 5xx errors', 'class error_proto(Error): pass          # response does not begin with [1-5]', 'class FTP:', 'class FTP_TLS(FTP):']
Functions: ["def __init__(self, host='', user='', passwd='', acct='',", 'def __enter__(self):', 'def __exit__(self, *args):', "def connect(self, host='', port=0, timeout=-999, source_address=None):", 'def getwelcome(self):', 'def set_debuglevel(self, level):', 'def set_pasv(self, val):', 'def sanitize(self, s):', 'def putline(self, line):', 'def putcmd(self, line):', 'def getline(self):', 'def getmultiline(self):', 'def getresp(self):', 'def voidresp(self):', 'def abort(self):', 'def sendcmd(self, cmd):', 'def voidcmd(self, cmd):', 'def sendport(self, host, port):', 'def sendeprt(self, host, port):', 'def makeport(self):', 'def makepasv(self):', 'def ntransfercmd(self, cmd, rest=None):', 'def transfercmd(self, cmd, rest=None):', "def login(self, user = '', passwd = '', acct = ''):", 'def retrbinary(self, cmd, callback, blocksize=8192, rest=None):', 'def retrlines(self, cmd, callback = None):', 'def storbinary(self, cmd, fp, blocksize=8192, callback=None, rest=None):', 'def storlines(self, cmd, fp, callback=None):', 'def acct(self, password):', 'def nlst(self, *args):', 'def dir(self, *args):', 'def mlsd(self, path="", facts=[]):', 'def rename(self, fromname, toname):', 'def delete(self, filename):', 'def cwd(self, dirname):', 'def size(self, filename):', 'def mkd(self, dirname):', 'def rmd(self, dirname):', 'def pwd(self):', 'def quit(self):', 'def close(self):', "def __init__(self, host='', user='', passwd='', acct='',", "def login(self, user='', passwd='', acct='', secure=True):", 'def auth(self):', 'def ccc(self):', 'def prot_p(self):', 'def prot_c(self):', 'def ntransfercmd(self, cmd, rest=None):', 'def abort(self):', 'def parse150(resp):', 'def parse227(resp):', 'def parse229(resp, peer):', 'def parse257(resp):', 'def print_line(line):', "def ftpcp(source, sourcename, target, targetname = '', type = 'I'):", 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\functools.py:
Classes: ['class K(object):', 'class partial:', 'class partialmethod(object):', 'class _HashedSeq(list):', 'class singledispatchmethod:', 'class cached_property:']
Functions: ['def update_wrapper(wrapper,', 'def wraps(wrapped,', 'def _gt_from_lt(self, other):', 'def _le_from_lt(self, other):', 'def _ge_from_lt(self, other):', 'def _ge_from_le(self, other):', 'def _lt_from_le(self, other):', 'def _gt_from_le(self, other):', 'def _lt_from_gt(self, other):', 'def _ge_from_gt(self, other):', 'def _le_from_gt(self, other):', 'def _le_from_ge(self, other):', 'def _gt_from_ge(self, other):', 'def _lt_from_ge(self, other):', 'def total_ordering(cls):', 'def cmp_to_key(mycmp):', 'def __init__(self, obj):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __ge__(self, other):', 'def reduce(function, sequence, initial=_initial_missing):', 'def __new__(cls, func, /, *args, **keywords):', 'def __call__(self, /, *args, **keywords):', 'def __repr__(self):', 'def __get__(self, obj, objtype=None):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def __init__(self, func, /, *args, **keywords):', 'def __repr__(self):', 'def _make_unbound_method(self):', 'def _method(cls_or_self, /, *args, **keywords):', 'def __get__(self, obj, cls=None):', 'def __isabstractmethod__(self):', 'def _unwrap_partial(func):', 'def _unwrap_partialmethod(func):', 'def __init__(self, tup, hash=hash):', 'def __hash__(self):', 'def _make_key(args, kwds, typed,', 'def lru_cache(maxsize=128, typed=False):', 'def decorating_function(user_function):', 'def _lru_cache_wrapper(user_function, maxsize, typed, _CacheInfo):', 'def wrapper(*args, **kwds):', 'def wrapper(*args, **kwds):', 'def wrapper(*args, **kwds):', 'def cache_info():', 'def cache_clear():', 'def cache(user_function, /):', 'def _c3_merge(sequences):', 'def _c3_mro(cls, abcs=None):', 'def _compose_mro(cls, types):', 'def is_related(typ):', 'def is_strict_base(typ):', 'def _find_impl(cls, registry):', 'def singledispatch(func):', 'def dispatch(cls):', 'def _is_union_type(cls):', 'def _is_valid_dispatch_type(cls):', 'def register(cls, func=None):', 'def wrapper(*args, **kw):', 'def __init__(self, func):', 'def register(self, cls, method=None):', 'def __get__(self, obj, cls=None):', 'def _method(*args, **kwargs):', 'def __isabstractmethod__(self):', 'def __init__(self, func):', 'def __set_name__(self, owner, name):', 'def __get__(self, instance, owner=None):']

Analyzed C:\dev\adn_trash_code\python_libs\genericpath.py:
Classes: []
Functions: ['def exists(path):', 'def lexists(path):', 'def isfile(path):', 'def isdir(s):', 'def islink(path):', 'def isjunction(path):', 'def isdevdrive(path):', 'def getsize(filename):', 'def getmtime(filename):', 'def getatime(filename):', 'def getctime(filename):', 'def commonprefix(m):', 'def samestat(s1, s2):', 'def samefile(f1, f2):', 'def sameopenfile(fp1, fp2):', 'def _splitext(p, sep, altsep, extsep):', 'def _check_arg_types(funcname, *args):']

Analyzed C:\dev\adn_trash_code\python_libs\getopt.py:
Classes: ['class GetoptError(Exception):']
Functions: ['def _(s): return s', "def __init__(self, msg, opt=''):", 'def __str__(self):', 'def getopt(args, shortopts, longopts = []):', 'def gnu_getopt(args, shortopts, longopts = []):', 'def do_longs(opts, opt, longopts, args):', 'def long_has_args(opt, longopts):', 'def do_shorts(opts, optstring, shortopts, args):', 'def short_has_arg(opt, shortopts):']

Analyzed C:\dev\adn_trash_code\python_libs\getpass.py:
Classes: ['class GetPassWarning(UserWarning): pass']
Functions: ["def unix_getpass(prompt='Password: ', stream=None):", "def win_getpass(prompt='Password: ', stream=None):", "def fallback_getpass(prompt='Password: ', stream=None):", 'def _raw_input(prompt="", stream=None, input=None):', 'def getuser():']

Analyzed C:\dev\adn_trash_code\python_libs\gettext.py:
Classes: ['class NullTranslations:', 'class GNUTranslations(NullTranslations):']
Functions: ['def _tokenize(plural):', 'def _error(value):', 'def _parse(tokens, priority=-1):', 'def _as_int(n):', 'def _as_int2(n):', 'def c2py(plural):', 'def func(n):', 'def _expand_lang(loc):', 'def __init__(self, fp=None):', 'def _parse(self, fp):', 'def add_fallback(self, fallback):', 'def gettext(self, message):', 'def ngettext(self, msgid1, msgid2, n):', 'def pgettext(self, context, message):', 'def npgettext(self, context, msgid1, msgid2, n):', 'def info(self):', 'def charset(self):', 'def install(self, names=None):', 'def _get_versions(self, version):', 'def _parse(self, fp):', 'def gettext(self, message):', 'def ngettext(self, msgid1, msgid2, n):', 'def pgettext(self, context, message):', 'def npgettext(self, context, msgid1, msgid2, n):', 'def find(domain, localedir=None, languages=None, all=False):', 'def translation(domain, localedir=None, languages=None,', 'def install(domain, localedir=None, *, names=None):', 'def textdomain(domain=None):', 'def bindtextdomain(domain, localedir=None):', 'def dgettext(domain, message):', 'def dngettext(domain, msgid1, msgid2, n):', 'def dpgettext(domain, context, message):', 'def dnpgettext(domain, context, msgid1, msgid2, n):', 'def gettext(message):', 'def ngettext(msgid1, msgid2, n):', 'def pgettext(context, message):', 'def npgettext(context, msgid1, msgid2, n):']

Analyzed C:\dev\adn_trash_code\python_libs\glob.py:
Classes: ['class _Globber:', 'class _StringGlobber(_Globber):']
Functions: ['def glob(pathname, *, root_dir=None, dir_fd=None, recursive=False,', 'def iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False,', 'def _iglob(pathname, root_dir, dir_fd, recursive, dironly,', 'def _glob1(dirname, pattern, dir_fd, dironly, include_hidden=False):', 'def _glob0(dirname, basename, dir_fd, dironly, include_hidden=False):', 'def glob0(dirname, pattern):', 'def glob1(dirname, pattern):', 'def _glob2(dirname, pattern, dir_fd, dironly, include_hidden=False):', 'def _iterdir(dirname, dir_fd, dironly):', 'def _listdir(dirname, dir_fd, dironly):', 'def _rlistdir(dirname, dir_fd, dironly, include_hidden=False):', 'def _lexists(pathname, dir_fd):', 'def _isdir(pathname, dir_fd):', 'def _join(dirname, basename):', 'def has_magic(s):', 'def _ishidden(path):', 'def _isrecursive(pattern):', 'def escape(pathname):', 'def translate(pat, *, recursive=False, include_hidden=False, seps=None):', 'def _compile_pattern(pat, sep, case_sensitive, recursive=True):', 'def __init__(self, sep, case_sensitive, case_pedantic=False, recursive=False):', 'def scandir(path):', 'def concat_path(path, text):', 'def parse_entry(entry):', 'def compile(self, pat):', 'def selector(self, parts):', 'def special_selector(self, part, parts):', 'def select_special(path, exists=False):', 'def literal_selector(self, part, parts):', 'def select_literal(path, exists=False):', 'def wildcard_selector(self, part, parts):', 'def select_wildcard(path, exists=False):', 'def recursive_selector(self, part, parts):', 'def select_recursive(path, exists=False):', 'def select_recursive_step(stack, match_pos):', 'def select_exists(self, path, exists=False):', 'def add_slash(pathname):', 'def add_slash(pathname):']

Analyzed C:\dev\adn_trash_code\python_libs\graphlib.py:
Classes: ['class _NodeInfo:', 'class CycleError(ValueError):', 'class TopologicalSorter:']
Functions: ['def __init__(self, node):', 'def __init__(self, graph=None):', 'def _get_nodeinfo(self, node):', 'def add(self, node, *predecessors):', 'def prepare(self):', 'def get_ready(self):', 'def is_active(self):', 'def __bool__(self):', 'def done(self, *nodes):', 'def _find_cycle(self):', 'def static_order(self):']

Analyzed C:\dev\adn_trash_code\python_libs\gzip.py:
Classes: ['class _PaddedFile:', 'class BadGzipFile(OSError):', 'class _WriteBufferStream(io.RawIOBase):', 'class GzipFile(_compression.BaseStream):', 'class _GzipReader(_compression.DecompressReader):']
Functions: ['def open(filename, mode="rb", compresslevel=_COMPRESS_LEVEL_BEST,', 'def write32u(output, value):', "def __init__(self, f, prepend=b''):", 'def read(self, size):', "def prepend(self, prepend=b''):", 'def seek(self, off):', 'def seekable(self):', 'def __init__(self, gzip_file):', 'def write(self, data):', 'def seekable(self):', 'def writable(self):', 'def __init__(self, filename=None, mode=None,', 'def mtime(self):', 'def __repr__(self):', 'def _init_write(self, filename):', 'def tell(self):', 'def _write_gzip_header(self, compresslevel):', 'def write(self,data):', 'def _write_raw(self, data):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def peek(self, n):', 'def closed(self):', 'def close(self):', 'def flush(self,zlib_mode=zlib.Z_SYNC_FLUSH):', 'def fileno(self):', 'def rewind(self):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def readline(self, size=-1):', 'def _read_exact(fp, n):', 'def _read_gzip_header(fp):', 'def __init__(self, fp):', 'def _init_read(self):', 'def _read_gzip_header(self):', 'def read(self, size=-1):', 'def _read_eof(self):', 'def _rewind(self):', 'def compress(data, compresslevel=_COMPRESS_LEVEL_BEST, *, mtime=None):', 'def decompress(data):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\hashlib.py:
Classes: []
Functions: ['def __get_builtin_constructor(name):', 'def __get_openssl_constructor(name):', "def __py_new(name, data=b'', **kwargs):", "def __hash_new(name, data=b'', **kwargs):", 'def file_digest(fileobj, digest, /, *, _bufsize=2**18):']

Analyzed C:\dev\adn_trash_code\python_libs\heapq.py:
Classes: []
Functions: ['def heappush(heap, item):', 'def heappop(heap):', 'def heapreplace(heap, item):', 'def heappushpop(heap, item):', 'def heapify(x):', 'def _heappop_max(heap):', 'def _heapreplace_max(heap, item):', 'def _heapify_max(x):', 'def _siftdown(heap, startpos, pos):', 'def _siftup(heap, pos):', 'def _siftdown_max(heap, startpos, pos):', 'def _siftup_max(heap, pos):', 'def merge(*iterables, key=None, reverse=False):', 'def nsmallest(n, iterable, key=None):', 'def nlargest(n, iterable, key=None):']

Analyzed C:\dev\adn_trash_code\python_libs\hmac.py:
Classes: ['class HMAC:']
Functions: ["def __init__(self, key, msg=None, digestmod=''):", 'def _init_hmac(self, key, msg, digestmod):', 'def _init_old(self, key, msg, digestmod):', 'def name(self):', 'def update(self, msg):', 'def copy(self):', 'def _current(self):', 'def digest(self):', 'def hexdigest(self):', "def new(key, msg=None, digestmod=''):", 'def digest(key, msg, digest):']

Analyzed C:\dev\adn_trash_code\python_libs\imaplib.py:
Classes: ['class IMAP4:', 'class error(Exception): pass    # Logical errors - debug required', 'class abort(error): pass        # Service errors - close and retry', 'class readonly(abort): pass     # Mailbox status changed to READ-ONLY', 'class IMAP4_SSL(IMAP4):', 'class IMAP4_stream(IMAP4):', 'class _Authenticator:']
Functions: ["def __init__(self, host='', port=IMAP4_PORT, timeout=None):", 'def _mode_ascii(self):', 'def _mode_utf8(self):', 'def _connect(self):', 'def __getattr__(self, attr):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _create_socket(self, timeout):', "def open(self, host='', port=IMAP4_PORT, timeout=None):", 'def read(self, size):', 'def readline(self):', 'def send(self, data):', 'def shutdown(self):', 'def socket(self):', 'def recent(self):', 'def response(self, code):', 'def append(self, mailbox, flags, date_time, message):', 'def authenticate(self, mechanism, authobject):', 'def capability(self):', 'def check(self):', 'def close(self):', 'def copy(self, message_set, new_mailbox):', 'def create(self, mailbox):', 'def delete(self, mailbox):', 'def deleteacl(self, mailbox, who):', 'def enable(self, capability):', 'def expunge(self):', 'def fetch(self, message_set, message_parts):', 'def getacl(self, mailbox):', 'def getannotation(self, mailbox, entry, attribute):', 'def getquota(self, root):', 'def getquotaroot(self, mailbox):', 'def list(self, directory=\'""\', pattern=\'*\'):', 'def login(self, user, password):', 'def login_cram_md5(self, user, password):', 'def _CRAM_MD5_AUTH(self, challenge):', 'def logout(self):', 'def lsub(self, directory=\'""\', pattern=\'*\'):', 'def myrights(self, mailbox):', 'def namespace(self):', 'def noop(self):', 'def partial(self, message_num, message_part, start, length):', 'def proxyauth(self, user):', 'def rename(self, oldmailbox, newmailbox):', 'def search(self, charset, *criteria):', "def select(self, mailbox='INBOX', readonly=False):", 'def setacl(self, mailbox, who, what):', 'def setannotation(self, *args):', 'def setquota(self, root, limits):', 'def sort(self, sort_criteria, charset, *search_criteria):', 'def starttls(self, ssl_context=None):', 'def status(self, mailbox, names):', 'def store(self, message_set, command, flags):', 'def subscribe(self, mailbox):', 'def thread(self, threading_algorithm, charset, *search_criteria):', 'def uid(self, command, *args):', 'def unsubscribe(self, mailbox):', 'def unselect(self):', 'def xatom(self, name, *args):', 'def _append_untagged(self, typ, dat):', 'def _check_bye(self):', 'def _command(self, name, *args):', 'def _command_complete(self, name, tag):', 'def _get_capabilities(self):', 'def _get_response(self):', 'def _get_tagged_response(self, tag, expect_bye=False):', 'def _get_line(self):', 'def _match(self, cre, s):', 'def _new_tag(self):', 'def _quote(self, arg):', 'def _simple_command(self, name, *args):', 'def _untagged_response(self, typ, dat, name):', 'def _mesg(self, s, secs=None):', 'def _dump_ur(self, untagged_resp_dict):', 'def _log(self, line):', 'def print_log(self):', "def __init__(self, host='', port=IMAP4_SSL_PORT,", 'def _create_socket(self, timeout):', "def open(self, host='', port=IMAP4_SSL_PORT, timeout=None):", 'def __init__(self, command):', 'def open(self, host=None, port=None, timeout=None):', 'def read(self, size):', 'def readline(self):', 'def send(self, data):', 'def shutdown(self):', 'def __init__(self, mechinst):', 'def process(self, data):', 'def encode(self, inp):', 'def decode(self, inp):', 'def Internaldate2tuple(resp):', 'def Int2AP(num):', 'def ParseFlags(resp):', 'def Time2Internaldate(date_time):', 'def run(cmd, args):']

Analyzed C:\dev\adn_trash_code\python_libs\inspect.py:
Classes: ['class ClassFoundException(Exception):', 'class EndOfBlock(Exception): pass', 'class BlockFinder:', 'class Traceback(_Traceback):', 'class FrameInfo(_FrameInfo):', 'class RewriteSymbolics(ast.NodeTransformer):', 'class _void:', 'class _empty:', 'class _ParameterKind(enum.IntEnum):', 'class Parameter:', 'class BoundArguments:', 'class Signature:', 'class BufferFlags(enum.IntFlag):']
Functions: ['def get_annotations(obj, *, globals=None, locals=None, eval_str=False):', 'def ismodule(object):', 'def isclass(object):', 'def ismethod(object):', 'def ismethoddescriptor(object):', 'def isdatadescriptor(object):', 'def ismemberdescriptor(object):', 'def ismemberdescriptor(object):', 'def isgetsetdescriptor(object):', 'def isgetsetdescriptor(object):', 'def isfunction(object):', 'def _has_code_flag(f, flag):', 'def isgeneratorfunction(obj):', 'def _has_coroutine_mark(f):', 'def markcoroutinefunction(func):', 'def iscoroutinefunction(obj):', 'def isasyncgenfunction(obj):', 'def isasyncgen(object):', 'def isgenerator(object):', 'def iscoroutine(object):', 'def isawaitable(object):', 'def istraceback(object):', 'def isframe(object):', 'def iscode(object):', 'def isbuiltin(object):', 'def ismethodwrapper(object):', 'def isroutine(object):', 'def isabstract(object):', 'def _getmembers(object, predicate, getter):', 'def getmembers(object, predicate=None):', 'def getmembers_static(object, predicate=None):', 'def classify_class_attrs(cls):', 'def getmro(cls):', 'def unwrap(func, *, stop=None):', 'def indentsize(line):', 'def _findclass(func):', 'def _finddoc(obj):', 'def getdoc(object):', 'def cleandoc(doc):', 'def getfile(object):', 'def getmodulename(path):', 'def getsourcefile(object):', 'def getabsfile(object, _filename=None):', 'def getmodule(object, _filename=None):', 'def findsource(object):', 'def getcomments(object):', 'def __init__(self):', 'def tokeneater(self, type, token, srowcol, erowcol, line):', 'def getblock(lines):', 'def getsourcelines(object):', 'def getsource(object):', 'def walktree(classes, children, parent):', 'def getclasstree(classes, unique=False):', 'def getargs(co):', 'def getfullargspec(func):', 'def getargvalues(frame):', 'def formatannotation(annotation, base_module=None):', 'def repl(match):', 'def formatannotationrelativeto(object):', 'def _formatannotation(annotation):', 'def formatargvalues(args, varargs, varkw, locals,', 'def convert(name, locals=locals,', 'def _missing_arguments(f_name, argnames, pos, values):', 'def _too_many(f_name, args, kwonly, varargs, defcount, given, values):', 'def getcallargs(func, /, *positional, **named):', 'def getclosurevars(func):', 'def __new__(cls, filename, lineno, function, code_context, index, *, positions=None):', 'def __repr__(self):', 'def _get_code_position_from_tb(tb):', 'def _get_code_position(code, instruction_index):', 'def getframeinfo(frame, context=1):', 'def getlineno(frame):', 'def __new__(cls, frame, filename, lineno, function, code_context, index, *, positions=None):', 'def __repr__(self):', 'def getouterframes(frame, context=1):', 'def getinnerframes(tb, context=1):', 'def currentframe():', 'def stack(context=1):', 'def trace(context=1):', 'def _check_instance(obj, attr):', 'def _check_class(klass, attr):', 'def _shadowed_dict_from_weakref_mro_tuple(*weakref_mro):', 'def _shadowed_dict(klass):', 'def getattr_static(obj, attr, default=_sentinel):', 'def getgeneratorstate(generator):', 'def getgeneratorlocals(generator):', 'def getcoroutinestate(coroutine):', 'def getcoroutinelocals(coroutine):', 'def getasyncgenstate(agen):', 'def getasyncgenlocals(agen):', 'def _signature_get_user_defined_method(cls, method_name):', 'def _signature_get_partial(wrapped_sig, partial, extra_args=()):', 'def _signature_bound_method(sig):', 'def _signature_is_builtin(obj):', 'def _signature_is_functionlike(obj):', 'def _signature_strip_non_python_syntax(signature):', 'def _signature_fromstr(cls, obj, s, skip_bound_arg=True):', 'def parse_name(node):', 'def wrap_value(s):', 'def visit_Attribute(self, node):', 'def visit_Name(self, node):', 'def visit_BinOp(self, node):', 'def p(name_node, default_node, default=empty):', 'def _signature_from_builtin(cls, func, skip_bound_arg=True):', 'def _signature_from_function(cls, func, skip_bound_arg=True,', 'def _descriptor_get(descriptor, obj):', 'def _signature_from_callable(obj, *,', 'def __new__(cls, description):', 'def __str__(self):', 'def __init__(self, name, kind, *, default=_empty, annotation=_empty):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def name(self):', 'def default(self):', 'def annotation(self):', 'def kind(self):', 'def replace(self, *, name=_void, kind=_void,', 'def __str__(self):', 'def __repr__(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __init__(self, signature, arguments):', 'def signature(self):', 'def args(self):', 'def kwargs(self):', 'def apply_defaults(self):', 'def __eq__(self, other):', 'def __setstate__(self, state):', 'def __getstate__(self):', 'def __repr__(self):', 'def __init__(self, parameters=None, *, return_annotation=_empty,', 'def from_callable(cls, obj, *,', 'def parameters(self):', 'def return_annotation(self):', 'def replace(self, *, parameters=_void, return_annotation=_void):', 'def _hash_basis(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def _bind(self, args, kwargs, *, partial=False):', 'def bind(self, /, *args, **kwargs):', 'def bind_partial(self, /, *args, **kwargs):', 'def __reduce__(self):', 'def __setstate__(self, state):', 'def __repr__(self):', 'def __str__(self):', 'def format(self, *, max_width=None):', 'def signature(obj, *, follow_wrapped=True, globals=None, locals=None, eval_str=False):', 'def _main():']

Analyzed C:\dev\adn_trash_code\python_libs\io.py:
Classes: ['class IOBase(_io._IOBase, metaclass=abc.ABCMeta):', 'class RawIOBase(_io._RawIOBase, IOBase):', 'class BufferedIOBase(_io._BufferedIOBase, IOBase):', 'class TextIOBase(_io._TextIOBase, IOBase):']
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\ipaddress.py:
Classes: ['class AddressValueError(ValueError):', 'class NetmaskValueError(ValueError):', 'class _IPAddressBase:', 'class _BaseAddress(_IPAddressBase):', 'class _BaseNetwork(_IPAddressBase):', 'class _BaseConstants:', 'class _BaseV4:', 'class IPv4Address(_BaseV4, _BaseAddress):', 'class IPv4Interface(IPv4Address):', 'class IPv4Network(_BaseV4, _BaseNetwork):', 'class _IPv4Constants:', 'class _BaseV6:', 'class IPv6Address(_BaseV6, _BaseAddress):', 'class IPv6Interface(IPv6Address):', 'class IPv6Network(_BaseV6, _BaseNetwork):', 'class _IPv6Constants:']
Functions: ['def ip_address(address):', 'def ip_network(address, strict=True):', 'def ip_interface(address):', 'def v4_int_to_packed(address):', 'def v6_int_to_packed(address):', 'def _split_optional_netmask(address):', 'def _find_address_range(addresses):', 'def _count_righthand_zero_bits(number, bits):', 'def summarize_address_range(first, last):', 'def _collapse_addresses_internal(addresses):', 'def collapse_addresses(addresses):', 'def get_mixed_type_key(obj):', 'def exploded(self):', 'def compressed(self):', 'def reverse_pointer(self):', 'def version(self):', 'def _check_int_address(self, address):', 'def _check_packed_address(self, address, expected_len):', 'def _ip_int_from_prefix(cls, prefixlen):', 'def _prefix_from_ip_int(cls, ip_int):', 'def _report_invalid_netmask(cls, netmask_str):', 'def _prefix_from_prefix_string(cls, prefixlen_str):', 'def _prefix_from_ip_string(cls, ip_str):', 'def _split_addr_prefix(cls, address):', 'def __reduce__(self):', 'def __int__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __repr__(self):', 'def __str__(self):', 'def __hash__(self):', 'def _get_address_key(self):', 'def __reduce__(self):', 'def __format__(self, fmt):', 'def __repr__(self):', 'def __str__(self):', 'def hosts(self):', 'def __iter__(self):', 'def __getitem__(self, n):', 'def __lt__(self, other):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __contains__(self, other):', 'def overlaps(self, other):', 'def broadcast_address(self):', 'def hostmask(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def num_addresses(self):', 'def _address_class(self):', 'def prefixlen(self):', 'def address_exclude(self, other):', 'def compare_networks(self, other):', 'def _get_networks_key(self):', 'def subnets(self, prefixlen_diff=1, new_prefix=None):', 'def supernet(self, prefixlen_diff=1, new_prefix=None):', 'def is_multicast(self):', 'def _is_subnet_of(a, b):', 'def subnet_of(self, other):', 'def supernet_of(self, other):', 'def is_reserved(self):', 'def is_link_local(self):', 'def is_private(self):', 'def is_global(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def _explode_shorthand_ip_string(self):', 'def _make_netmask(cls, arg):', 'def _ip_int_from_string(cls, ip_str):', 'def _parse_octet(cls, octet_str):', 'def _string_from_ip_int(cls, ip_int):', 'def _reverse_pointer(self):', 'def max_prefixlen(self):', 'def version(self):', 'def __init__(self, address):', 'def packed(self):', 'def is_reserved(self):', 'def is_private(self):', 'def is_global(self):', 'def is_multicast(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def is_link_local(self):', 'def ipv6_mapped(self):', 'def __init__(self, address):', 'def hostmask(self):', 'def __str__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def ip(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def __init__(self, address, strict=True):', 'def is_global(self):', 'def _make_netmask(cls, arg):', 'def _ip_int_from_string(cls, ip_str):', 'def _parse_hextet(cls, hextet_str):', 'def _compress_hextets(cls, hextets):', 'def _string_from_ip_int(cls, ip_int=None):', 'def _explode_shorthand_ip_string(self):', 'def _reverse_pointer(self):', 'def _split_scope_id(ip_str):', 'def max_prefixlen(self):', 'def version(self):', 'def __init__(self, address):', 'def _explode_shorthand_ip_string(self):', 'def _reverse_pointer(self):', 'def _ipv4_mapped_ipv6_to_str(self):', 'def __str__(self):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __reduce__(self):', 'def scope_id(self):', 'def packed(self):', 'def is_multicast(self):', 'def is_reserved(self):', 'def is_link_local(self):', 'def is_site_local(self):', 'def is_private(self):', 'def is_global(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def ipv4_mapped(self):', 'def teredo(self):', 'def sixtofour(self):', 'def __init__(self, address):', 'def hostmask(self):', 'def __str__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def ip(self):', 'def with_prefixlen(self):', 'def with_netmask(self):', 'def with_hostmask(self):', 'def is_unspecified(self):', 'def is_loopback(self):', 'def __init__(self, address, strict=True):', 'def hosts(self):', 'def is_site_local(self):']

Analyzed C:\dev\adn_trash_code\python_libs\keyword.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\linecache.py:
Classes: []
Functions: ['def clearcache():', 'def getline(filename, lineno, module_globals=None):', 'def getlines(filename, module_globals=None):', 'def checkcache(filename=None):', 'def updatecache(filename, module_globals=None):', 'def lazycache(filename, module_globals):', 'def get_lines(name=name, *args, **kwargs):', 'def _register_code(code, string, name):']

Analyzed C:\dev\adn_trash_code\python_libs\locale.py:
Classes: []
Functions: ['def _strcoll(a,b):', 'def _strxfrm(s):', 'def localeconv():', 'def setlocale(category, value=None):', 'def localeconv():', 'def _grouping_intervals(grouping):', 'def _group(s, monetary=False):', 'def _strip_padding(s, amount):', 'def _format(percent, value, grouping=False, monetary=False, *additional):', 'def _localize(formatted, grouping=False, monetary=False):', 'def format_string(f, val, grouping=False, monetary=False):', 'def currency(val, symbol=True, grouping=False, international=False):', 'def str(val):', 'def delocalize(string):', 'def localize(string, grouping=False, monetary=False):', 'def atof(string, func=float):', 'def atoi(string):', 'def _test():', 'def _replace_encoding(code, encoding):', 'def _append_modifier(code, modifier):', 'def normalize(localename):', 'def _parse_localename(localename):', 'def _build_localename(localetuple):', "def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):", "def _getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):", 'def getlocale(category=LC_CTYPE):', 'def setlocale(category, locale=None):', 'def getencoding():', 'def getpreferredencoding(do_setlocale=True):', 'def getpreferredencoding(do_setlocale=True):', 'def _print_locale():', 'def _init_categories(categories=categories):']

Analyzed C:\dev\adn_trash_code\python_libs\lzma.py:
Classes: ['class LZMAFile(_compression.BaseStream):']
Functions: ['def __init__(self, filename=None, mode="r", *,', 'def close(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def fileno(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def peek(self, size=-1):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readline(self, size=-1):', 'def write(self, data):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):', 'def open(filename, mode="rb", *,', 'def compress(data, format=FORMAT_XZ, check=-1, preset=None, filters=None):', 'def decompress(data, format=FORMAT_AUTO, memlimit=None, filters=None):']

Analyzed C:\dev\adn_trash_code\python_libs\mailbox.py:
Classes: ['class Mailbox:', 'class Maildir(Mailbox):', 'class _singlefileMailbox(Mailbox):', 'class _mboxMMDF(_singlefileMailbox):', 'class mbox(_mboxMMDF):', 'class MMDF(_mboxMMDF):', 'class MH(Mailbox):', 'class Babyl(_singlefileMailbox):', 'class Message(email.message.Message):', 'class MaildirMessage(Message):', 'class _mboxMMDFMessage(Message):', 'class mboxMessage(_mboxMMDFMessage):', 'class MHMessage(Message):', 'class BabylMessage(Message):', 'class MMDFMessage(_mboxMMDFMessage):', 'class _ProxyFile:', 'class _PartialFile(_ProxyFile):', 'class Error(Exception):', 'class NoSuchMailboxError(Error):', 'class NotEmptyError(Error):', 'class ExternalClashError(Error):', 'class FormatError(Error):']
Functions: ['def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __delitem__(self, key):', 'def discard(self, key):', 'def __setitem__(self, key, message):', 'def get(self, key, default=None):', 'def __getitem__(self, key):', 'def get_message(self, key):', 'def get_string(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def iterkeys(self):', 'def keys(self):', 'def itervalues(self):', 'def __iter__(self):', 'def values(self):', 'def iteritems(self):', 'def items(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def clear(self):', 'def pop(self, key, default=None):', 'def popitem(self):', 'def update(self, arg=None):', 'def flush(self):', 'def lock(self):', 'def unlock(self):', 'def close(self):', 'def _string_to_bytes(self, message):', 'def _dump_message(self, message, target, mangle_from_=False):', 'def __init__(self, dirname, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def discard(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def get_info(self, key):', 'def set_info(self, key, info: str):', 'def get_flags(self, key):', 'def set_flags(self, key, flags: str):', 'def add_flag(self, key, flag: str):', 'def remove_flag(self, key, flag: str):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def flush(self):', 'def lock(self):', 'def unlock(self):', 'def close(self):', 'def list_folders(self):', 'def get_folder(self, folder):', 'def add_folder(self, folder):', 'def remove_folder(self, folder):', 'def clean(self):', 'def _create_tmp(self):', 'def _refresh(self):', 'def _lookup(self, key):', 'def next(self):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def lock(self):', 'def unlock(self):', 'def flush(self):', 'def _pre_mailbox_hook(self, f):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def close(self):', 'def _lookup(self, key=None):', 'def _append_message(self, message):', 'def get_message(self, key):', 'def get_string(self, key, from_=False):', 'def get_bytes(self, key, from_=False):', 'def get_file(self, key, from_=False):', 'def _install_message(self, message):', 'def __init__(self, path, factory=None, create=True):', 'def _post_message_hook(self, f):', 'def _generate_toc(self):', 'def __init__(self, path, factory=None, create=True):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def _generate_toc(self):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def iterkeys(self):', 'def __contains__(self, key):', 'def __len__(self):', 'def _open_mh_sequences_file(self, text):', 'def lock(self):', 'def unlock(self):', 'def flush(self):', 'def close(self):', 'def list_folders(self):', 'def get_folder(self, folder):', 'def add_folder(self, folder):', 'def remove_folder(self, folder):', 'def get_sequences(self):', 'def set_sequences(self, sequences):', 'def pack(self):', 'def _dump_sequences(self, message, key):', 'def __init__(self, path, factory=None, create=True):', 'def add(self, message):', 'def remove(self, key):', 'def __setitem__(self, key, message):', 'def get_message(self, key):', 'def get_bytes(self, key):', 'def get_file(self, key):', 'def get_labels(self):', 'def _generate_toc(self):', 'def _pre_mailbox_hook(self, f):', 'def _pre_message_hook(self, f):', 'def _post_message_hook(self, f):', 'def _install_message(self, message):', 'def __init__(self, message=None):', 'def _become_message(self, message):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_subdir(self):', 'def set_subdir(self, subdir):', 'def get_flags(self):', 'def set_flags(self, flags):', 'def add_flag(self, flag):', 'def remove_flag(self, flag):', 'def get_date(self):', 'def set_date(self, date):', 'def get_info(self):', 'def set_info(self, info):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_from(self):', 'def set_from(self, from_, time_=None):', 'def get_flags(self):', 'def set_flags(self, flags):', 'def add_flag(self, flag):', 'def remove_flag(self, flag):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_sequences(self):', 'def set_sequences(self, sequences):', 'def add_sequence(self, sequence):', 'def remove_sequence(self, sequence):', 'def _explain_to(self, message):', 'def __init__(self, message=None):', 'def get_labels(self):', 'def set_labels(self, labels):', 'def add_label(self, label):', 'def remove_label(self, label):', 'def get_visible(self):', 'def set_visible(self, visible):', 'def update_visible(self):', 'def _explain_to(self, message):', 'def __init__(self, f, pos=None):', 'def read(self, size=None):', 'def read1(self, size=None):', 'def readline(self, size=None):', 'def readlines(self, sizehint=None):', 'def __iter__(self):', 'def tell(self):', 'def seek(self, offset, whence=0):', 'def close(self):', 'def _read(self, size, read_method):', 'def __enter__(self):', 'def __exit__(self, *exc):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def flush(self):', 'def closed(self):', 'def __init__(self, f, start=None, stop=None):', 'def tell(self):', 'def seek(self, offset, whence=0):', 'def _read(self, size, read_method):', 'def close(self):', 'def _lock_file(f, dotlock=True):', 'def _unlock_file(f):', 'def _create_carefully(path):', 'def _create_temporary(path):', 'def _sync_flush(f):', 'def _sync_close(f):']

Analyzed C:\dev\adn_trash_code\python_libs\mimetypes.py:
Classes: ['class MimeTypes:']
Functions: ['def __init__(self, filenames=(), strict=True):', 'def add_type(self, type, ext, strict=True):', 'def guess_type(self, url, strict=True):', 'def guess_file_type(self, path, *, strict=True):', 'def _guess_file_type(self, path, strict, splitext):', 'def guess_all_extensions(self, type, strict=True):', 'def guess_extension(self, type, strict=True):', 'def read(self, filename, strict=True):', 'def readfp(self, fp, strict=True):', 'def read_windows_registry(self, strict=True):', 'def _read_windows_registry(cls, add_type):', 'def enum_types(mimedb):', 'def guess_type(url, strict=True):', 'def guess_file_type(path, *, strict=True):', 'def guess_all_extensions(type, strict=True):', 'def guess_extension(type, strict=True):', 'def add_type(type, ext, strict=True):', 'def init(files=None):', 'def read_mime_types(file):', 'def _default_mime_types():', 'def _main():', "def usage(code, msg=''):"]

Analyzed C:\dev\adn_trash_code\python_libs\modulefinder.py:
Classes: ['class Module:', 'class ModuleFinder:']
Functions: ['def AddPackagePath(packagename, path):', 'def ReplacePackage(oldname, newname):', 'def _find_module(name, path=None):', 'def __init__(self, name, file=None, path=None):', 'def __repr__(self):', 'def __init__(self, path=None, debug=0, excludes=None, replace_paths=None):', 'def msg(self, level, str, *args):', 'def msgin(self, *args):', 'def msgout(self, *args):', 'def run_script(self, pathname):', 'def load_file(self, pathname):', 'def import_hook(self, name, caller=None, fromlist=None, level=-1):', 'def determine_parent(self, caller, level=-1):', 'def find_head_package(self, parent, name):', 'def load_tail(self, q, tail):', 'def ensure_fromlist(self, m, fromlist, recursive=0):', 'def find_all_submodules(self, m):', 'def import_module(self, partname, fqname, parent):', 'def load_module(self, fqname, fp, pathname, file_info):', 'def _add_badmodule(self, name, caller):', 'def _safe_import_hook(self, name, caller, fromlist, level=-1):', 'def scan_opcodes(self, co):', 'def scan_code(self, co, m):', 'def load_package(self, fqname, pathname):', 'def add_module(self, fqname):', 'def find_module(self, name, path, parent=None):', 'def report(self):', 'def any_missing(self):', 'def any_missing_maybe(self):', 'def replace_paths_in_code(self, co):', 'def test():']

Analyzed C:\dev\adn_trash_code\python_libs\netrc.py:
Classes: ['class NetrcParseError(Exception):', 'class _netrclex:', 'class netrc:']
Functions: ['def __init__(self, msg, filename=None, lineno=None):', 'def __str__(self):', 'def __init__(self, fp):', 'def _read_char(self):', 'def get_token(self):', 'def push_token(self, token):', 'def __init__(self, file=None):', 'def _parse(self, file, fp, default_netrc):', 'def _security_check(self, fp, default_netrc, login):', 'def authenticators(self, host):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\ntpath.py:
Classes: []
Functions: ['def _get_bothseps(path):', 'def normcase(s):', 'def normcase(s):', 'def isabs(s):', 'def join(path, *paths):', 'def splitdrive(p):', 'def splitroot(p):', 'def split(p):', 'def splitext(p):', 'def basename(p):', 'def dirname(p):', 'def ismount(path):', 'def isreserved(path):', 'def _isreservedname(name):', 'def expanduser(path):', 'def expandvars(path):', 'def normpath(path):', 'def abspath(path):', 'def abspath(path):', 'def _readlink_deep(path):', 'def _getfinalpathname_nonstrict(path):', 'def realpath(path, *, strict=False):', 'def relpath(path, start=None):', 'def commonpath(paths):', 'def isdevdrive(path):']

Analyzed C:\dev\adn_trash_code\python_libs\nturl2path.py:
Classes: []
Functions: ['def url2pathname(url):', 'def pathname2url(p):']

Analyzed C:\dev\adn_trash_code\python_libs\numbers.py:
Classes: ['class Number(metaclass=ABCMeta):', 'class Complex(Number):', 'class Real(Complex):', 'class Rational(Real):', 'class Integral(Rational):']
Functions: ['def __complex__(self):', 'def __bool__(self):', 'def real(self):', 'def imag(self):', 'def __add__(self, other):', 'def __radd__(self, other):', 'def __neg__(self):', 'def __pos__(self):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __mul__(self, other):', 'def __rmul__(self, other):', 'def __truediv__(self, other):', 'def __rtruediv__(self, other):', 'def __pow__(self, exponent):', 'def __rpow__(self, base):', 'def __abs__(self):', 'def conjugate(self):', 'def __eq__(self, other):', 'def __float__(self):', 'def __trunc__(self):', 'def __floor__(self):', 'def __ceil__(self):', 'def __round__(self, ndigits=None):', 'def __divmod__(self, other):', 'def __rdivmod__(self, other):', 'def __floordiv__(self, other):', 'def __rfloordiv__(self, other):', 'def __mod__(self, other):', 'def __rmod__(self, other):', 'def __lt__(self, other):', 'def __le__(self, other):', 'def __complex__(self):', 'def real(self):', 'def imag(self):', 'def conjugate(self):', 'def numerator(self):', 'def denominator(self):', 'def __float__(self):', 'def __int__(self):', 'def __index__(self):', 'def __pow__(self, exponent, modulus=None):', 'def __lshift__(self, other):', 'def __rlshift__(self, other):', 'def __rshift__(self, other):', 'def __rrshift__(self, other):', 'def __and__(self, other):', 'def __rand__(self, other):', 'def __xor__(self, other):', 'def __rxor__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __invert__(self):', 'def __float__(self):', 'def numerator(self):', 'def denominator(self):']

Analyzed C:\dev\adn_trash_code\python_libs\opcode.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\operator.py:
Classes: ['class attrgetter:', 'class itemgetter:', 'class methodcaller:']
Functions: ['def lt(a, b):', 'def le(a, b):', 'def eq(a, b):', 'def ne(a, b):', 'def ge(a, b):', 'def gt(a, b):', 'def not_(a):', 'def truth(a):', 'def is_(a, b):', 'def is_not(a, b):', 'def abs(a):', 'def add(a, b):', 'def and_(a, b):', 'def floordiv(a, b):', 'def index(a):', 'def inv(a):', 'def lshift(a, b):', 'def mod(a, b):', 'def mul(a, b):', 'def matmul(a, b):', 'def neg(a):', 'def or_(a, b):', 'def pos(a):', 'def pow(a, b):', 'def rshift(a, b):', 'def sub(a, b):', 'def truediv(a, b):', 'def xor(a, b):', 'def concat(a, b):', 'def contains(a, b):', 'def countOf(a, b):', 'def delitem(a, b):', 'def getitem(a, b):', 'def indexOf(a, b):', 'def setitem(a, b, c):', 'def length_hint(obj, default=0):', 'def call(obj, /, *args, **kwargs):', 'def __init__(self, attr, /, *attrs):', 'def func(obj):', 'def func(obj):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def __init__(self, item, /, *items):', 'def func(obj):', 'def func(obj):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def __init__(self, name, /, *args, **kwargs):', 'def __call__(self, obj, /):', 'def __repr__(self):', 'def __reduce__(self):', 'def iadd(a, b):', 'def iand(a, b):', 'def iconcat(a, b):', 'def ifloordiv(a, b):', 'def ilshift(a, b):', 'def imod(a, b):', 'def imul(a, b):', 'def imatmul(a, b):', 'def ior(a, b):', 'def ipow(a, b):', 'def irshift(a, b):', 'def isub(a, b):', 'def itruediv(a, b):', 'def ixor(a, b):']

Analyzed C:\dev\adn_trash_code\python_libs\optparse.py:
Classes: ['class OptParseError (Exception):', 'class OptionError (OptParseError):', 'class OptionConflictError (OptionError):', 'class OptionValueError (OptParseError):', 'class BadOptionError (OptParseError):', 'class AmbiguousOptionError (BadOptionError):', 'class HelpFormatter:', 'class IndentedHelpFormatter (HelpFormatter):', 'class TitledHelpFormatter (HelpFormatter):', 'class Option:', 'class Values:', 'class OptionContainer:', 'class OptionGroup (OptionContainer):', 'class OptionParser (OptionContainer):', 'class documentation description of the attribute']
Functions: ['def _repr(self):', 'def gettext(message):', 'def ngettext(singular, plural, n):', 'def __init__(self, msg):', 'def __str__(self):', 'def __init__(self, msg, option):', 'def __str__(self):', 'def __init__(self, opt_str):', 'def __str__(self):', 'def __init__(self, opt_str, possibilities):', 'def __str__(self):', 'def __init__(self,', 'def set_parser(self, parser):', 'def set_short_opt_delimiter(self, delim):', 'def set_long_opt_delimiter(self, delim):', 'def indent(self):', 'def dedent(self):', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def _format_text(self, text):', 'def format_description(self, description):', 'def format_epilog(self, epilog):', 'def expand_default(self, option):', 'def format_option(self, option):', 'def store_option_strings(self, parser):', 'def format_option_strings(self, option):', 'def __init__(self,', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def __init__(self,', 'def format_usage(self, usage):', 'def format_heading(self, heading):', 'def _parse_num(val, type):', 'def _parse_int(val):', 'def check_builtin(option, opt, value):', 'def check_choice(option, opt, value):', 'def __init__(self, *opts, **attrs):', 'def _check_opt_strings(self, opts):', 'def _set_opt_strings(self, opts):', 'def _set_attrs(self, attrs):', 'def _check_action(self):', 'def _check_type(self):', 'def _check_choice(self):', 'def _check_dest(self):', 'def _check_const(self):', 'def _check_nargs(self):', 'def _check_callback(self):', 'def __str__(self):', 'def takes_value(self):', 'def get_opt_string(self):', 'def check_value(self, opt, value):', 'def convert_value(self, opt, value):', 'def process(self, opt, value, values, parser):', 'def take_action(self, action, dest, opt, value, values, parser):', 'def __init__(self, defaults=None):', 'def __str__(self):', 'def __eq__(self, other):', 'def _update_careful(self, dict):', 'def _update_loose(self, dict):', 'def _update(self, dict, mode):', 'def read_module(self, modname, mode="careful"):', 'def read_file(self, filename, mode="careful"):', 'def ensure_value(self, attr, value):', 'def __init__(self, option_class, conflict_handler, description):', 'def _create_option_mappings(self):', 'def _share_option_mappings(self, parser):', 'def set_conflict_handler(self, handler):', 'def set_description(self, description):', 'def get_description(self):', 'def destroy(self):', 'def _check_conflict(self, option):', 'def add_option(self, *args, **kwargs):', 'def add_options(self, option_list):', 'def get_option(self, opt_str):', 'def has_option(self, opt_str):', 'def remove_option(self, opt_str):', 'def format_option_help(self, formatter):', 'def format_description(self, formatter):', 'def format_help(self, formatter):', 'def __init__(self, parser, title, description=None):', 'def _create_option_list(self):', 'def set_title(self, title):', 'def destroy(self):', 'def format_help(self, formatter):', 'def __init__(self,', 'def destroy(self):', 'def _create_option_list(self):', 'def _add_help_option(self):', 'def _add_version_option(self):', 'def _populate_option_list(self, option_list, add_help=True):', 'def _init_parsing_state(self):', 'def set_usage(self, usage):', 'def enable_interspersed_args(self):', 'def disable_interspersed_args(self):', 'def set_process_default_values(self, process):', 'def set_default(self, dest, value):', 'def set_defaults(self, **kwargs):', 'def _get_all_options(self):', 'def get_default_values(self):', 'def add_option_group(self, *args, **kwargs):', 'def get_option_group(self, opt_str):', 'def _get_args(self, args):', 'def parse_args(self, args=None, values=None):', 'def check_values(self, values, args):', 'def _process_args(self, largs, rargs, values):', 'def _match_long_opt(self, opt):', 'def _process_long_opt(self, rargs, values):', 'def _process_short_opts(self, rargs, values):', 'def get_prog_name(self):', 'def expand_prog_name(self, s):', 'def get_description(self):', 'def exit(self, status=0, msg=None):', 'def error(self, msg):', 'def get_usage(self):', 'def print_usage(self, file=None):', 'def get_version(self):', 'def print_version(self, file=None):', 'def format_option_help(self, formatter=None):', 'def format_epilog(self, formatter):', 'def format_help(self, formatter=None):', 'def print_help(self, file=None):', 'def _match_abbrev(s, wordmap):']

Analyzed C:\dev\adn_trash_code\python_libs\os.py:
Classes: ['class _Environ(MutableMapping):', 'class _wrap_close:', 'class PathLike(abc.ABC):', 'class _AddedDllDirectory:']
Functions: ['def _exists(name):', 'def _get_exports_list(module):', 'def _add(str, fn):', 'def makedirs(name, mode=0o777, exist_ok=False):', 'def removedirs(name):', 'def renames(old, new):', 'def walk(top, topdown=True, onerror=None, followlinks=False):', 'def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):', 'def _fwalk(stack, isbytes, topdown, onerror, follow_symlinks):', 'def execl(file, *args):', 'def execle(file, *args):', 'def execlp(file, *args):', 'def execlpe(file, *args):', 'def execvp(file, args):', 'def execvpe(file, args, env):', 'def _execvpe(file, args, env=None):', 'def get_exec_path(env=None):', 'def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __iter__(self):', 'def __len__(self):', 'def __repr__(self):', 'def copy(self):', 'def setdefault(self, key, value):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def _createenviron():', 'def check_str(value):', 'def encodekey(key):', 'def encode(value):', 'def decode(value):', 'def getenv(key, default=None):', 'def _check_bytes(value):', 'def getenvb(key, default=None):', 'def _fscodec():', 'def fsencode(filename):', 'def fsdecode(filename):', 'def _spawnvef(mode, file, args, env, func):', 'def spawnv(mode, file, args):', 'def spawnve(mode, file, args, env):', 'def spawnvp(mode, file, args):', 'def spawnvpe(mode, file, args, env):', 'def spawnl(mode, file, *args):', 'def spawnle(mode, file, *args):', 'def spawnlp(mode, file, *args):', 'def spawnlpe(mode, file, *args):', 'def popen(cmd, mode="r", buffering=-1):', 'def __init__(self, stream, proc):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __getattr__(self, name):', 'def __iter__(self):', 'def fdopen(fd, mode="r", buffering=-1, encoding=None, *args, **kwargs):', 'def _fspath(path):', 'def __fspath__(self):', 'def __subclasshook__(cls, subclass):', 'def __init__(self, path, cookie, remove_dll_directory):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def add_dll_directory(path):', 'def process_cpu_count():']

Analyzed C:\dev\adn_trash_code\python_libs\pdb.py:
Classes: ['class Restart(Exception):', 'class _rstr(str):', 'class _ExecutableTarget:', 'class _ScriptTarget(_ExecutableTarget):', 'class _ModuleTarget(_ExecutableTarget):', 'class _ZipTarget(_ExecutableTarget):', 'class _PdbInteractiveConsole(code.InteractiveConsole):', 'class Pdb(bdb.Bdb, cmd.Cmd):']
Functions: ['def find_first_executable_line(code):', 'def find_function(funcname, filename):', 'def lasti2lineno(code, lasti):', 'def __repr__(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, target):', 'def __repr__(self):', 'def filename(self):', 'def code(self):', 'def namespace(self):', 'def __init__(self, ns, message):', 'def write(self, data):', "def __init__(self, completekey='tab', stdin=None, stdout=None, skip=None,", 'def sigint_handler(self, signum, frame):', 'def reset(self):', 'def forget(self):', 'def setup(self, f, tb):', 'def user_call(self, frame, argument_list):', 'def user_line(self, frame):', 'def bp_commands(self, frame):', 'def user_return(self, frame, return_value):', 'def user_exception(self, frame, exc_info):', 'def _cmdloop(self):', 'def _validate_file_mtime(self):', 'def _show_display(self):', 'def _get_tb_and_exceptions(self, tb_or_exc):', 'def _hold_exceptions(self, exceptions):', 'def interaction(self, frame, tb_or_exc):', 'def displayhook(self, obj):', 'def _disable_command_completion(self):', 'def _exec_in_closure(self, source, globals, locals):', 'def default(self, line):', 'def _replace_convenience_variables(self, line):', 'def precmd(self, line):', 'def onecmd(self, line):', 'def handle_command_def(self, line):', "def message(self, msg, end='\\n'):", 'def error(self, msg):', 'def set_convenience_variable(self, frame, name, value):', 'def completenames(self, text, line, begidx, endidx):', 'def _complete_location(self, text, line, begidx, endidx):', 'def _complete_bpnumber(self, text, line, begidx, endidx):', 'def _complete_expression(self, text, line, begidx, endidx):', 'def completedefault(self, text, line, begidx, endidx):', 'def _pdbcmd_print_frame_status(self, arg):', 'def do_commands(self, arg):', 'def do_break(self, arg, temporary = 0):', 'def defaultFile(self):', 'def do_tbreak(self, arg):', 'def lineinfo(self, identifier):', 'def checkline(self, filename, lineno):', 'def do_enable(self, arg):', 'def do_disable(self, arg):', 'def do_condition(self, arg):', 'def do_ignore(self, arg):', 'def do_clear(self, arg):', 'def do_where(self, arg):', 'def _select_frame(self, number):', 'def do_exceptions(self, arg):', 'def do_up(self, arg):', 'def do_down(self, arg):', 'def do_until(self, arg):', 'def do_step(self, arg):', 'def do_next(self, arg):', 'def do_run(self, arg):', 'def do_return(self, arg):', 'def do_continue(self, arg):', 'def do_jump(self, arg):', 'def do_debug(self, arg):', 'def do_quit(self, arg):', 'def do_EOF(self, arg):', 'def do_args(self, arg):', 'def do_retval(self, arg):', 'def _getval(self, arg):', 'def _getval_except(self, arg, frame=None):', 'def _error_exc(self):', 'def _msg_val_func(self, arg, func):', 'def _safe_repr(self, obj, expr):', 'def do_p(self, arg):', 'def do_pp(self, arg):', 'def do_list(self, arg):', 'def do_longlist(self, arg):', 'def do_source(self, arg):', 'def _print_lines(self, lines, start, breaks=(), frame=None):', 'def do_whatis(self, arg):', 'def do_display(self, arg):', 'def do_undisplay(self, arg):', 'def complete_undisplay(self, text, line, begidx, endidx):', 'def do_interact(self, arg):', 'def do_alias(self, arg):', 'def do_unalias(self, arg):', 'def complete_unalias(self, text, line, begidx, endidx):', 'def print_stack_trace(self):', 'def print_stack_entry(self, frame_lineno, prompt_prefix=line_prefix):', 'def do_help(self, arg):', 'def help_exec(self):', 'def help_pdb(self):', 'def lookupmodule(self, filename):', 'def _run(self, target: _ExecutableTarget):', 'def _format_exc(self, exc: BaseException):', 'def _compile_error_message(self, expr):', 'def _getsourcelines(self, obj):', 'def _help_message_from_doc(self, doc, usage_only=False):', 'def _print_invalid_arg(self, arg):', 'def run(statement, globals=None, locals=None):', 'def runeval(expression, globals=None, locals=None):', 'def runctx(statement, globals, locals):', 'def runcall(*args, **kwds):', 'def set_trace(*, header=None):', 'def post_mortem(t=None):', 'def _post_mortem(t, pdb_instance):', 'def pm():', 'def test():', 'def help():', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\pickle.py:
Classes: ['class PickleError(Exception):', 'class PicklingError(PickleError):', 'class UnpicklingError(PickleError):', 'class _Stop(Exception):', 'class _Framer:', 'class _Unframer:', 'class _Pickler:', 'class _Unpickler:']
Functions: ['def __init__(self, value):', 'def __init__(self, file_write):', 'def start_framing(self):', 'def end_framing(self):', 'def commit_frame(self, force=False):', 'def write(self, data):', 'def write_large_bytes(self, header, payload):', 'def __init__(self, file_read, file_readline, file_tell=None):', 'def readinto(self, buf):', 'def read(self, n):', 'def readline(self):', 'def load_frame(self, frame_size):', 'def _getattribute(obj, name):', 'def whichmodule(obj, name):', 'def encode_long(x):', 'def decode_long(data):', 'def __init__(self, file, protocol=None, *, fix_imports=True,', 'def clear_memo(self):', 'def dump(self, obj):', 'def memoize(self, obj):', 'def put(self, idx):', 'def get(self, i):', 'def save(self, obj, save_persistent_id=True):', 'def persistent_id(self, obj):', 'def save_pers(self, pid):', 'def save_reduce(self, func, args, state=None, listitems=None,', 'def save_none(self, obj):', 'def save_bool(self, obj):', 'def save_long(self, obj):', 'def save_float(self, obj):', 'def _save_bytes_no_memo(self, obj):', 'def save_bytes(self, obj):', 'def _save_bytearray_no_memo(self, obj):', 'def save_bytearray(self, obj):', 'def save_picklebuffer(self, obj):', 'def save_str(self, obj):', 'def save_tuple(self, obj):', 'def save_list(self, obj):', 'def _batch_appends(self, items):', 'def save_dict(self, obj):', 'def _batch_setitems(self, items):', 'def save_set(self, obj):', 'def save_frozenset(self, obj):', 'def save_global(self, obj, name=None):', 'def _save_toplevel_by_name(self, module_name, name):', 'def save_type(self, obj):', 'def __init__(self, file, *, fix_imports=True,', 'def load(self):', 'def pop_mark(self):', 'def persistent_load(self, pid):', 'def load_proto(self):', 'def load_frame(self):', 'def load_persid(self):', 'def load_binpersid(self):', 'def load_none(self):', 'def load_false(self):', 'def load_true(self):', 'def load_int(self):', 'def load_binint(self):', 'def load_binint1(self):', 'def load_binint2(self):', 'def load_long(self):', 'def load_long1(self):', 'def load_long4(self):', 'def load_float(self):', 'def load_binfloat(self):', 'def _decode_string(self, value):', 'def load_string(self):', 'def load_binstring(self):', 'def load_binbytes(self):', 'def load_unicode(self):', 'def load_binunicode(self):', 'def load_binunicode8(self):', 'def load_binbytes8(self):', 'def load_bytearray8(self):', 'def load_next_buffer(self):', 'def load_readonly_buffer(self):', 'def load_short_binstring(self):', 'def load_short_binbytes(self):', 'def load_short_binunicode(self):', 'def load_tuple(self):', 'def load_empty_tuple(self):', 'def load_tuple1(self):', 'def load_tuple2(self):', 'def load_tuple3(self):', 'def load_empty_list(self):', 'def load_empty_dictionary(self):', 'def load_empty_set(self):', 'def load_frozenset(self):', 'def load_list(self):', 'def load_dict(self):', 'def _instantiate(self, klass, args):', 'def load_inst(self):', 'def load_obj(self):', 'def load_newobj(self):', 'def load_newobj_ex(self):', 'def load_global(self):', 'def load_stack_global(self):', 'def load_ext1(self):', 'def load_ext2(self):', 'def load_ext4(self):', 'def get_extension(self, code):', 'def find_class(self, module, name):', 'def load_reduce(self):', 'def load_pop(self):', 'def load_pop_mark(self):', 'def load_dup(self):', 'def load_get(self):', 'def load_binget(self):', 'def load_long_binget(self):', 'def load_put(self):', 'def load_binput(self):', 'def load_long_binput(self):', 'def load_memoize(self):', 'def load_append(self):', 'def load_appends(self):', 'def load_setitem(self):', 'def load_setitems(self):', 'def load_additems(self):', 'def load_build(self):', 'def load_mark(self):', 'def load_stop(self):', 'def _dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None):', 'def _dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None):', 'def _load(file, *, fix_imports=True, encoding="ASCII", errors="strict",', 'def _loads(s, /, *, fix_imports=True, encoding="ASCII", errors="strict",', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\pickletools.py:
Classes: ['class ArgumentDescriptor(object):', 'class StackObject(object):', 'class OpcodeInfo(object):', 'class _Example:']
Functions: ['def __init__(self, name, n, reader, doc):', 'def read_uint1(f):', 'def read_uint2(f):', 'def read_int4(f):', 'def read_uint4(f):', 'def read_uint8(f):', "def read_stringnl(f, decode=True, stripquotes=True, *, encoding='latin-1'):", 'def read_stringnl_noescape(f):', 'def read_stringnl_noescape_pair(f):', 'def read_string1(f):', 'def read_string4(f):', 'def read_bytes1(f):', 'def read_bytes4(f):', 'def read_bytes8(f):', 'def read_bytearray8(f):', 'def read_unicodestringnl(f):', 'def read_unicodestring1(f):', 'def read_unicodestring4(f):', 'def read_unicodestring8(f):', 'def read_decimalnl_short(f):', 'def read_decimalnl_long(f):', 'def read_floatnl(f):', 'def read_float8(f):', 'def read_long1(f):', 'def read_long4(f):', 'def __init__(self, name, obtype, doc):', 'def __repr__(self):', 'def __init__(self, name, code, arg,', 'def assure_pickle_consistency(verbose=False):', 'def _genops(data, yield_end_pos=False):', 'def genops(pickle):', 'def optimize(p):', 'def dis(pickle, out=None, memo=None, indentlevel=4, annotate=0):', 'def __init__(self, value):', 'def _test():']

Analyzed C:\dev\adn_trash_code\python_libs\pkgutil.py:
Classes: []
Functions: ['def read_code(stream):', "def walk_packages(path=None, prefix='', onerror=None):", 'def seen(p, m={}):', "def iter_modules(path=None, prefix=''):", "def iter_importer_modules(importer, prefix=''):", "def _iter_file_finder_modules(importer, prefix=''):", "def iter_zipimport_modules(importer, prefix=''):", 'def get_importer(path_item):', 'def iter_importers(fullname=""):', 'def get_loader(module_or_name):', 'def find_loader(fullname):', 'def extend_path(path, name):', 'def get_data(package, resource):', 'def resolve_name(name):']

Analyzed C:\dev\adn_trash_code\python_libs\platform.py:
Classes: ['class _Processor:', 'class uname_result(']
Functions: ['def _comparable_version(version):', "def libc_ver(executable=None, lib='', version='', chunksize=16384):", "def _norm_version(version, build=''):", "def _syscmd_ver(system='', release='', version='',", 'def _wmi_query(table, *keys):', 'def win32_is_iot():', 'def win32_edition():', 'def _win32_ver(version, csd, ptype):', "def win32_ver(release='', version='', csd='', ptype=''):", 'def _mac_ver_xml():', "def mac_ver(release='', versioninfo=('', '', ''), machine=''):", 'def ios_ver(system="", release="", model="", is_simulator=False):', 'def _java_getprop(name, default):', "def java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', '')):", 'def android_ver(release="", api_level=0, manufacturer="", model="", device="",', 'def getprop(name, default):', 'def system_alias(system, release, version):', 'def _platform(*args):', "def _node(default=''):", 'def _follow_symlinks(filepath):', "def _syscmd_file(target, default=''):", "def architecture(executable=sys.executable, bits='', linkage=''):", 'def _get_machine_win32():', 'def get(cls):', 'def get_win32():', 'def get_OpenVMS():', 'def get_ios():', 'def from_subprocess():', 'def _unknown_as_blank(val):', 'def processor(self):', 'def __iter__(self):', 'def _make(cls, iterable):', 'def __getitem__(self, key):', 'def __len__(self):', 'def __reduce__(self):', 'def uname():', 'def system():', 'def node():', 'def release():', 'def version():', 'def machine():', 'def processor():', 'def _sys_version(sys_version=None):', 'def python_implementation():', 'def python_version():', 'def python_version_tuple():', 'def python_branch():', 'def python_revision():', 'def python_build():', 'def python_compiler():', 'def platform(aliased=False, terse=False):', 'def _parse_os_release(lines):', 'def freedesktop_os_release():']

Analyzed C:\dev\adn_trash_code\python_libs\plistlib.py:
Classes: ['class UID:', 'class _PlistParser:', 'class _DumbXMLWriter:', 'class _PlistWriter(_DumbXMLWriter):', 'class InvalidFileException (ValueError):', 'class _BinaryPlistParser:', 'class _BinaryPlistWriter (object):']
Functions: ['def __init__(self, data):', 'def __index__(self):', 'def __repr__(self):', 'def __reduce__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def _encode_base64(s, maxlinelength=76):', 'def _decode_base64(s):', 'def _date_from_string(s, aware_datetime):', 'def _date_to_string(d, aware_datetime):', 'def _escape(text):', 'def __init__(self, dict_type, aware_datetime=False):', 'def parse(self, fileobj):', 'def handle_entity_decl(self, entity_name, is_parameter_entity, value, base, system_id, public_id, notation_name):', 'def handle_begin_element(self, element, attrs):', 'def handle_end_element(self, element):', 'def handle_data(self, data):', 'def add_object(self, value):', 'def get_data(self):', 'def begin_dict(self, attrs):', 'def end_dict(self):', 'def end_key(self):', 'def begin_array(self, attrs):', 'def end_array(self):', 'def end_true(self):', 'def end_false(self):', 'def end_integer(self):', 'def end_real(self):', 'def end_string(self):', 'def end_data(self):', 'def end_date(self):', 'def __init__(self, file, indent_level=0, indent="\\t"):', 'def begin_element(self, element):', 'def end_element(self, element):', 'def simple_element(self, element, value=None):', 'def writeln(self, line):', 'def __init__(', 'def write(self, value):', 'def write_value(self, value):', 'def write_bytes(self, data):', 'def write_dict(self, d):', 'def write_array(self, array):', 'def _is_fmt_xml(header):', 'def __init__(self, message="Invalid file"):', 'def __init__(self, dict_type, aware_datetime=False):', 'def parse(self, fp):', 'def _get_size(self, tokenL):', 'def _read_ints(self, n, size):', 'def _read_refs(self, n):', 'def _read_object(self, ref):', 'def _count_to_size(count):', 'def __init__(self, fp, sort_keys, skipkeys, aware_datetime=False):', 'def write(self, value):', 'def _flatten(self, value):', 'def _getrefnum(self, value):', 'def _write_size(self, token, size):', 'def _write_object(self, value):', 'def _is_fmt_binary(header):', 'def load(fp, *, fmt=None, dict_type=dict, aware_datetime=False):', 'def loads(value, *, fmt=None, dict_type=dict, aware_datetime=False):', 'def dump(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False,', 'def dumps(value, *, fmt=FMT_XML, skipkeys=False, sort_keys=True,']

Analyzed C:\dev\adn_trash_code\python_libs\poplib.py:
Classes: ['class error_proto(Exception): pass', 'class POP3:', 'class POP3_SSL(POP3):']
Functions: ['def __init__(self, host, port=POP3_PORT,', 'def _create_socket(self, timeout):', 'def _putline(self, line):', 'def _putcmd(self, line):', 'def _getline(self):', 'def _getresp(self):', 'def _getlongresp(self):', 'def _shortcmd(self, line):', 'def _longcmd(self, line):', 'def getwelcome(self):', 'def set_debuglevel(self, level):', 'def user(self, user):', 'def pass_(self, pswd):', 'def stat(self):', 'def list(self, which=None):', 'def retr(self, which):', 'def dele(self, which):', 'def noop(self):', 'def rset(self):', 'def quit(self):', 'def close(self):', 'def rpop(self, user):', 'def apop(self, user, password):', 'def top(self, which, howmuch):', 'def uidl(self, which=None):', 'def utf8(self):', 'def capa(self):', 'def _parsecap(line):', 'def stls(self, context=None):', 'def __init__(self, host, port=POP3_SSL_PORT,', 'def _create_socket(self, timeout):', 'def stls(self, context=None):']

Analyzed C:\dev\adn_trash_code\python_libs\posixpath.py:
Classes: []
Functions: ['def _get_sep(path):', 'def normcase(s):', 'def isabs(s):', 'def join(a, *p):', 'def split(p):', 'def splitext(p):', 'def splitdrive(p):', 'def splitroot(p):', 'def basename(p):', 'def dirname(p):', 'def ismount(path):', 'def expanduser(path):', 'def expandvars(path):', 'def normpath(path):', 'def abspath(path):', 'def realpath(filename, *, strict=False):', 'def relpath(path, start=None):', 'def commonpath(paths):']

Analyzed C:\dev\adn_trash_code\python_libs\pprint.py:
Classes: ['class _safe_key:', 'class PrettyPrinter:']
Functions: ['def pprint(object, stream=None, indent=1, width=80, depth=None, *,', 'def pformat(object, indent=1, width=80, depth=None, *,', 'def pp(object, *args, sort_dicts=False, **kwargs):', 'def saferepr(object):', 'def isreadable(object):', 'def isrecursive(object):', 'def __init__(self, obj):', 'def __lt__(self, other):', 'def _safe_tuple(t):', 'def __init__(self, indent=1, width=80, depth=None, stream=None, *,', 'def pprint(self, object):', 'def pformat(self, object):', 'def isrecursive(self, object):', 'def isreadable(self, object):', 'def _format(self, object, stream, indent, allowance, context, level):', 'def _pprint_dataclass(self, object, stream, indent, allowance, context, level):', 'def _pprint_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_ordered_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_list(self, object, stream, indent, allowance, context, level):', 'def _pprint_tuple(self, object, stream, indent, allowance, context, level):', 'def _pprint_set(self, object, stream, indent, allowance, context, level):', 'def _pprint_str(self, object, stream, indent, allowance, context, level):', 'def _pprint_bytes(self, object, stream, indent, allowance, context, level):', 'def _pprint_bytearray(self, object, stream, indent, allowance, context, level):', 'def _pprint_mappingproxy(self, object, stream, indent, allowance, context, level):', 'def _pprint_simplenamespace(self, object, stream, indent, allowance, context, level):', 'def _format_dict_items(self, items, stream, indent, allowance, context,', 'def _format_namespace_items(self, items, stream, indent, allowance, context, level):', 'def _format_items(self, items, stream, indent, allowance, context, level):', 'def _repr(self, object, context, level):', 'def format(self, object, context, maxlevels, level):', 'def _pprint_default_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_counter(self, object, stream, indent, allowance, context, level):', 'def _pprint_chain_map(self, object, stream, indent, allowance, context, level):', 'def _pprint_deque(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_dict(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_list(self, object, stream, indent, allowance, context, level):', 'def _pprint_user_string(self, object, stream, indent, allowance, context, level):', 'def _safe_repr(self, object, context, maxlevels, level):', 'def _recursion(object):', 'def _wrap_bytes_repr(object, width, allowance):']

Analyzed C:\dev\adn_trash_code\python_libs\profile.py:
Classes: ['class _Utils:', 'class Profile:', 'class fake_code:', 'class fake_frame:']
Functions: ['def __init__(self, profiler):', 'def run(self, statement, filename, sort):', 'def runctx(self, statement, globals, locals, filename, sort):', 'def _show(self, prof, filename, sort):', 'def run(statement, filename=None, sort=-1):', 'def runctx(statement, globals, locals, filename=None, sort=-1):', 'def __init__(self, timer=None, bias=None):', 'def get_time_timer(timer=timer, sum=sum):', 'def trace_dispatch(self, frame, event, arg):', 'def trace_dispatch_i(self, frame, event, arg):', 'def trace_dispatch_mac(self, frame, event, arg):', 'def trace_dispatch_l(self, frame, event, arg):', 'def trace_dispatch_exception(self, frame, t):', 'def trace_dispatch_call(self, frame, t):', 'def trace_dispatch_c_call (self, frame, t):', 'def trace_dispatch_return(self, frame, t):', 'def set_cmd(self, cmd):', 'def __init__(self, filename, line, name):', 'def __repr__(self):', 'def __init__(self, code, prior):', 'def simulate_call(self, name):', 'def simulate_cmd_complete(self):', 'def print_stats(self, sort=-1):', 'def dump_stats(self, file):', 'def create_stats(self):', 'def snapshot_stats(self):', 'def run(self, cmd):', 'def runctx(self, cmd, globals, locals):', 'def runcall(self, func, /, *args, **kw):', 'def calibrate(self, m, verbose=0):', 'def _calibrate_inner(self, m, verbose):', 'def f1(n):', 'def f(m, f1=f1):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\pstats.py:
Classes: ['class SortKey:', 'class FunctionProfile:', 'class StatsProfile:', 'class Stats:', 'class TupleComp:', 'class ProfileBrowser(cmd.Cmd):']
Functions: ['def __new__(cls, *values):', 'def __init__(self, *args, stream=None):', 'def init(self, arg):', 'def load_stats(self, arg):', 'def get_top_level_stats(self):', 'def add(self, *arg_list):', 'def dump_stats(self, filename):', 'def get_sort_arg_defs(self):', 'def sort_stats(self, *field):', 'def reverse_order(self):', 'def strip_dirs(self):', 'def calc_callees(self):', 'def eval_print_amount(self, sel, list, msg):', 'def get_stats_profile(self):', 'def get_print_list(self, sel_list):', 'def print_stats(self, *amount):', 'def print_callees(self, *amount):', 'def print_callers(self, *amount):', 'def print_call_heading(self, name_size, column_title):', 'def print_call_line(self, name_size, source, call_dict, arrow="->"):', 'def print_title(self):', 'def print_line(self, func):  # hack: should print percentages', 'def __init__(self, comp_select_list):', 'def compare (self, left, right):', 'def func_strip_path(func_name):', 'def func_get_function_name(func):', 'def func_std_string(func_name): # match what old profile produced', 'def add_func_stats(target, source):', 'def add_callers(target, source):', 'def count_calls(callers):', 'def f8(x):', 'def __init__(self, profile=None):', 'def generic(self, fn, line):', 'def generic_help(self):', 'def do_add(self, line):', 'def help_add(self):', 'def do_callees(self, line):', 'def help_callees(self):', 'def do_callers(self, line):', 'def help_callers(self):', 'def do_EOF(self, line):', 'def help_EOF(self):', 'def do_quit(self, line):', 'def help_quit(self):', 'def do_read(self, line):', 'def help_read(self):', 'def do_reverse(self, line):', 'def help_reverse(self):', 'def do_sort(self, line):', 'def help_sort(self):', 'def complete_sort(self, text, *args):', 'def do_stats(self, line):', 'def help_stats(self):', 'def do_strip(self, line):', 'def help_strip(self):', 'def help_help(self):', 'def postcmd(self, stop, line):']

Analyzed C:\dev\adn_trash_code\python_libs\pty.py:
Classes: []
Functions: ['def openpty():', 'def master_open():', 'def _open_terminal():', 'def slave_open(tty_name):', 'def fork():', 'def _read(fd):', 'def _copy(master_fd, master_read=_read, stdin_read=_read):', 'def spawn(argv, master_read=_read, stdin_read=_read):']

Analyzed C:\dev\adn_trash_code\python_libs\pyclbr.py:
Classes: ['class _Object:', 'class Function(_Object):', 'class Class(_Object):', 'class _ModuleBrowser(ast.NodeVisitor):']
Functions: ['def __init__(self, module, name, file, lineno, end_lineno, parent):', 'def __init__(self, module, name, file, lineno,', 'def __init__(self, module, name, super_, file, lineno,', 'def _nest_function(ob, func_name, lineno, end_lineno, is_async=False):', 'def _nest_class(ob, class_name, lineno, end_lineno, super=None):', 'def readmodule(module, path=None):', 'def readmodule_ex(module, path=None):', 'def _readmodule(module, path, inpackage=None):', 'def __init__(self, module, path, file, tree, inpackage):', 'def visit_ClassDef(self, node):', 'def visit_FunctionDef(self, node, *, is_async=False):', 'def visit_AsyncFunctionDef(self, node):', 'def visit_Import(self, node):', 'def visit_ImportFrom(self, node):', 'def _create_tree(fullmodule, path, fname, source, tree, inpackage):', 'def _main():']

Analyzed C:\dev\adn_trash_code\python_libs\pydoc.py:
Classes: ['class or function within a module or module in a package.  If the', 'class ErrorDuringImport(Exception):', 'class Doc:', 'class HTMLRepr(Repr):', 'class HTMLDoc(Doc):', 'class HorizontalRule:', 'class TextRepr(Repr):', 'class TextDoc(Doc):', 'class HorizontalRule:', 'class _PlainTextDoc(TextDoc):', 'class Helper:', 'class ModuleScanner:', 'class DocHandler(http.server.BaseHTTPRequestHandler):', 'class DocServer(http.server.HTTPServer):', 'class ServerThread(threading.Thread):', 'class _HTMLDoc(HTMLDoc):', 'class BadUsage(Exception): pass']
Functions: ['def pathdirs():', 'def _findclass(func):', 'def _finddoc(obj):', 'def _getowndoc(obj):', 'def _getdoc(object):', 'def getdoc(object):', 'def splitdoc(doc):', 'def _getargspec(object):', 'def classname(object, modname):', 'def parentname(object, modname):', 'def isdata(object):', 'def replace(text, *pairs):', 'def cram(text, maxlen):', 'def stripid(text):', 'def _is_bound_method(fn):', 'def allmethods(cl):', 'def _split_list(s, predicate):', 'def visiblename(name, all=None, obj=None):', 'def classify_class_attrs(object):', 'def sort_attributes(attrs, object):', 'def ispackage(path):', 'def source_synopsis(file):', 'def synopsis(filename, cache={}):', 'def __init__(self, filename, exc_info):', 'def __str__(self):', 'def importfile(path):', 'def safeimport(path, forceload=0, cache={}):', 'def document(self, object, name=None, *args):', 'def fail(self, object, name=None, *args):', "def getdocloc(self, object, basedir=sysconfig.get_path('stdlib')):", 'def __init__(self):', 'def escape(self, text):', 'def repr(self, object):', 'def repr1(self, x, level):', 'def repr_string(self, x, level):', 'def repr_instance(self, x, level):', 'def page(self, title, contents):', "def heading(self, title, extras=''):", 'def section(self, title, cls, contents, width=6,', 'def bigsection(self, title, *args):', 'def preformat(self, text):', 'def multicolumn(self, list, format):', 'def grey(self, text): return \'<span class="grey">%s</span>\' % text', 'def namelink(self, name, *dicts):', 'def classlink(self, object, modname):', 'def parentlink(self, object, modname):', 'def modulelink(self, object):', 'def modpkglink(self, modpkginfo):', 'def filelink(self, url, path):', 'def markup(self, text, escape=None, funcs={}, classes={}, methods={}):', 'def formattree(self, tree, modname, parent=None):', 'def docmodule(self, object, name=None, mod=None, *ignored):', 'def docclass(self, object, name=None, mod=None, funcs={}, classes={},', 'def __init__(self):', 'def maybe(self):', 'def spill(msg, attrs, predicate):', 'def spilldescriptors(msg, attrs, predicate):', 'def spilldata(msg, attrs, predicate):', 'def formatvalue(self, object):', 'def docroutine(self, object, name=None, mod=None,', 'def docdata(self, object, name=None, mod=None, cl=None, *ignored):', 'def docother(self, object, name=None, mod=None, *ignored):', 'def index(self, dir, shadowed=None):', 'def __init__(self):', 'def repr1(self, x, level):', 'def repr_string(self, x, level):', 'def repr_instance(self, x, level):', 'def bold(self, text):', "def indent(self, text, prefix='    '):", 'def section(self, title, contents):', "def formattree(self, tree, modname, parent=None, prefix=''):", 'def docmodule(self, object, name=None, mod=None, *ignored):', 'def docclass(self, object, name=None, mod=None, *ignored):', 'def makename(c, m=object.__module__):', 'def __init__(self):', 'def maybe(self):', 'def spill(msg, attrs, predicate):', 'def spilldescriptors(msg, attrs, predicate):', 'def spilldata(msg, attrs, predicate):', 'def formatvalue(self, object):', 'def docroutine(self, object, name=None, mod=None, cl=None, homecls=None):', 'def docdata(self, object, name=None, mod=None, cl=None, *ignored):', 'def docother(self, object, name=None, mod=None, parent=None, *ignored,', 'def bold(self, text):', "def pager(text, title=''):", 'def describe(thing):', 'def locate(path, forceload=0):', 'def resolve(thing, forceload=0):', "def render_doc(thing, title='Python Library Documentation: %s', forceload=0,", "def doc(thing, title='Python Library Documentation: %s', forceload=0,", 'def writedoc(thing, forceload=0):', "def writedocs(dir, pkgpath='', done=None):", 'def __init__(self, input=None, output=None):', 'def input(self):', 'def output(self):', 'def __repr__(self):', 'def __call__(self, request=_GoInteractive):', 'def interact(self):', 'def getline(self, prompt):', 'def help(self, request, is_cli=False):', 'def intro(self):', 'def list(self, items, columns=4, width=80):', 'def listkeywords(self):', 'def listsymbols(self):', 'def listtopics(self):', "def showtopic(self, topic, more_xrefs=''):", "def _gettopic(self, topic, more_xrefs=''):", 'def showsymbol(self, symbol):', "def listmodules(self, key=''):", 'def callback(path, modname, desc, modules=modules):', 'def onerror(modname):', 'def run(self, callback, key=None, completer=None, onerror=None):', 'def apropos(key):', 'def callback(path, modname, desc):', 'def onerror(modname):', 'def _start_server(urlhandler, hostname, port):', 'def do_GET(self):', 'def log_message(self, *args):', 'def __init__(self, host, port, callback):', 'def serve_until_quit(self):', 'def server_activate(self):', 'def __init__(self, urlhandler, host, port):', 'def run(self):', 'def ready(self, server):', 'def stop(self):', 'def _url_handler(url, content_type="text/html"):', 'def page(self, title, contents):', 'def html_navbar():', 'def html_index():', 'def bltinlink(name):', 'def html_search(key):', 'def callback(path, modname, desc):', 'def onerror(modname):', 'def bltinlink(name):', 'def html_topics():', 'def bltinlink(name):', 'def html_keywords():', 'def bltinlink(name):', 'def html_topicpage(topic):', 'def bltinlink(name):', 'def html_getobj(url):', 'def html_error(url, exc):', 'def get_html_page(url):', "def browse(port=0, *, open_browser=True, hostname='localhost'):", 'def ispath(x):', 'def _get_revised_path(given_path, argv0):', 'def _adjust_cli_sys_path():', 'def cli():']

Analyzed C:\dev\adn_trash_code\python_libs\py_compile.py:
Classes: ['class PyCompileError(Exception):', 'class PycInvalidationMode(enum.Enum):']
Functions: ["def __init__(self, exc_type, exc_value, file, msg=''):", 'def __str__(self):', 'def _get_default_invalidation_mode():', 'def compile(file, cfile=None, dfile=None, doraise=False, optimize=-1,', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\queue.py:
Classes: ['class Empty(Exception):', 'class Full(Exception):', 'class ShutDown(Exception):', 'class Queue:', 'class PriorityQueue(Queue):', 'class LifoQueue(Queue):', 'class _PySimpleQueue:']
Functions: ['def __init__(self, maxsize=0):', 'def task_done(self):', 'def join(self):', 'def qsize(self):', 'def empty(self):', 'def full(self):', 'def put(self, item, block=True, timeout=None):', 'def get(self, block=True, timeout=None):', 'def put_nowait(self, item):', 'def get_nowait(self):', 'def shutdown(self, immediate=False):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def _init(self, maxsize):', 'def _qsize(self):', 'def _put(self, item):', 'def _get(self):', 'def __init__(self):', 'def put(self, item, block=True, timeout=None):', 'def get(self, block=True, timeout=None):', 'def put_nowait(self, item):', 'def get_nowait(self):', 'def empty(self):', 'def qsize(self):']

Analyzed C:\dev\adn_trash_code\python_libs\quopri.py:
Classes: []
Functions: ['def needsquoting(c, quotetabs, header):', 'def quote(c):', 'def encode(input, output, quotetabs, header=False):', "def write(s, output=output, lineEnd=b'\\n'):", 'def encodestring(s, quotetabs=False, header=False):', 'def decode(input, output, header=False):', 'def decodestring(s, header=False):', 'def ishex(c):', 'def unhex(s):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\random.py:
Classes: ['class Random(_random.Random):', 'class SystemRandom(Random):']
Functions: ['def __init__(self, x=None):', 'def seed(self, a=None, version=2):', 'def getstate(self):', 'def setstate(self, state):', 'def __getstate__(self):  # for pickle', 'def __setstate__(self, state):  # for pickle', 'def __reduce__(self):', 'def __init_subclass__(cls, /, **kwargs):', 'def _randbelow_with_getrandbits(self, n):', 'def _randbelow_without_getrandbits(self, n, maxsize=1<<BPF):', 'def randbytes(self, n):', 'def randrange(self, start, stop=None, step=_ONE):', 'def randint(self, a, b):', 'def choice(self, seq):', 'def shuffle(self, x):', 'def sample(self, population, k, *, counts=None):', 'def choices(self, population, weights=None, *, cum_weights=None, k=1):', 'def uniform(self, a, b):', 'def triangular(self, low=0.0, high=1.0, mode=None):', 'def normalvariate(self, mu=0.0, sigma=1.0):', 'def gauss(self, mu=0.0, sigma=1.0):', 'def lognormvariate(self, mu, sigma):', 'def expovariate(self, lambd=1.0):', 'def vonmisesvariate(self, mu, kappa):', 'def gammavariate(self, alpha, beta):', 'def betavariate(self, alpha, beta):', 'def paretovariate(self, alpha):', 'def weibullvariate(self, alpha, beta):', 'def binomialvariate(self, n=1, p=0.5):', 'def random(self):', 'def getrandbits(self, k):', 'def randbytes(self, n):', 'def seed(self, *args, **kwds):', 'def _notimplemented(self, *args, **kwds):', 'def _test_generator(n, func, args):', 'def _test(N=10_000):', 'def _parse_args(arg_list: list[str] | None):', 'def main(arg_list: list[str] | None = None) -> int | str:']

Analyzed C:\dev\adn_trash_code\python_libs\reprlib.py:
Classes: ['class Repr:']
Functions: ["def recursive_repr(fillvalue='...'):", 'def decorating_function(user_function):', 'def wrapper(self):', 'def __init__(', 'def repr(self, x):', 'def repr1(self, x, level):', 'def _join(self, pieces, level):', "def _repr_iterable(self, x, level, left, right, maxiter, trail=''):", 'def repr_tuple(self, x, level):', 'def repr_list(self, x, level):', 'def repr_array(self, x, level):', 'def repr_set(self, x, level):', 'def repr_frozenset(self, x, level):', 'def repr_deque(self, x, level):', 'def repr_dict(self, x, level):', 'def repr_str(self, x, level):', 'def repr_int(self, x, level):', 'def repr_instance(self, x, level):', 'def _possibly_sorted(x):']

Analyzed C:\dev\adn_trash_code\python_libs\rlcompleter.py:
Classes: ['class Completer:']
Functions: ['def __init__(self, namespace = None):', 'def complete(self, text, state):', 'def _callable_postfix(self, val, word):', 'def global_matches(self, text):', 'def attr_matches(self, text):', 'def get_class_members(klass):']

Analyzed C:\dev\adn_trash_code\python_libs\runpy.py:
Classes: ['class _TempModule(object):', 'class _ModifiedArgv0(object):', 'class _Error(Exception):']
Functions: ['def __init__(self, mod_name):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self, value):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def _run_code(code, run_globals, init_globals=None,', 'def _run_module_code(code, init_globals=None,', 'def _get_module_details(mod_name, error=ImportError):', 'def _run_module_as_main(mod_name, alter_argv=True):', 'def run_module(mod_name, init_globals=None,', 'def _get_main_module_details(error=ImportError):', 'def _get_code_from_file(fname):', 'def run_path(path_name, init_globals=None, run_name=None):']

Analyzed C:\dev\adn_trash_code\python_libs\sched.py:
Classes: ['class scheduler:']
Functions: ['def __init__(self, timefunc=_time, delayfunc=time.sleep):', 'def enterabs(self, time, priority, action, argument=(), kwargs=_sentinel):', 'def enter(self, delay, priority, action, argument=(), kwargs=_sentinel):', 'def cancel(self, event):', 'def empty(self):', 'def run(self, blocking=True):', 'def queue(self):']

Analyzed C:\dev\adn_trash_code\python_libs\secrets.py:
Classes: []
Functions: ['def randbelow(exclusive_upper_bound):', 'def token_bytes(nbytes=None):', 'def token_hex(nbytes=None):', 'def token_urlsafe(nbytes=None):']

Analyzed C:\dev\adn_trash_code\python_libs\selectors.py:
Classes: ['class _SelectorMapping(Mapping):', 'class BaseSelector(metaclass=ABCMeta):', 'class _BaseSelectorImpl(BaseSelector):', 'class SelectSelector(_BaseSelectorImpl):', 'class _PollLikeSelector(_BaseSelectorImpl):', 'class PollSelector(_PollLikeSelector):', 'class EpollSelector(_PollLikeSelector):', 'class DevpollSelector(_PollLikeSelector):', 'class KqueueSelector(_BaseSelectorImpl):']
Functions: ['def _fileobj_to_fd(fileobj):', 'def __init__(self, selector):', 'def __len__(self):', 'def get(self, fileobj, default=None):', 'def __getitem__(self, fileobj):', 'def __iter__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def select(self, timeout=None):', 'def close(self):', 'def get_key(self, fileobj):', 'def get_map(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self):', 'def _fileobj_lookup(self, fileobj):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def close(self):', 'def get_map(self):', 'def __init__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def _select(self, r, w, _, timeout=None):', 'def select(self, timeout=None):', 'def __init__(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def modify(self, fileobj, events, data=None):', 'def select(self, timeout=None):', 'def fileno(self):', 'def select(self, timeout=None):', 'def close(self):', 'def fileno(self):', 'def close(self):', 'def __init__(self):', 'def fileno(self):', 'def register(self, fileobj, events, data=None):', 'def unregister(self, fileobj):', 'def select(self, timeout=None):', 'def close(self):', 'def _can_use(method):']

Analyzed C:\dev\adn_trash_code\python_libs\shelve.py:
Classes: ['class _ClosedDict(collections.abc.MutableMapping):', 'class Shelf(collections.abc.MutableMapping):', 'class BsdDbShelf(Shelf):', 'class DbfilenameShelf(Shelf):']
Functions: ['def closed(self, *args):', 'def __repr__(self):', 'def __init__(self, dict, protocol=None, writeback=False,', 'def __iter__(self):', 'def __len__(self):', 'def __contains__(self, key):', 'def get(self, key, default=None):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def close(self):', 'def __del__(self):', 'def sync(self):', 'def __init__(self, dict, protocol=None, writeback=False,', 'def set_location(self, key):', 'def next(self):', 'def previous(self):', 'def first(self):', 'def last(self):', "def __init__(self, filename, flag='c', protocol=None, writeback=False):", 'def clear(self):', "def open(filename, flag='c', protocol=None, writeback=False):"]

Analyzed C:\dev\adn_trash_code\python_libs\shlex.py:
Classes: ['class shlex:']
Functions: ['def __init__(self, instream=None, infile=None, posix=False,', 'def punctuation_chars(self):', 'def push_token(self, tok):', 'def push_source(self, newstream, newfile=None):', 'def pop_source(self):', 'def get_token(self):', 'def read_token(self):', 'def sourcehook(self, newfile):', 'def error_leader(self, infile=None, lineno=None):', 'def __iter__(self):', 'def __next__(self):', 'def split(s, comments=False, posix=True):', 'def join(split_command):', 'def quote(s):', 'def _print_tokens(lexer):']

Analyzed C:\dev\adn_trash_code\python_libs\shutil.py:
Classes: ['class Error(OSError):', 'class SameFileError(Error):', 'class SpecialFileError(OSError):', 'class ExecError(OSError):', 'class ReadError(OSError):', 'class RegistryError(Exception):', 'class _GiveupOnFastCopy(Exception):']
Functions: ['def _fastcopy_fcopyfile(fsrc, fdst, flags):', 'def _fastcopy_sendfile(fsrc, fdst):', 'def _copyfileobj_readinto(fsrc, fdst, length=COPY_BUFSIZE):', 'def copyfileobj(fsrc, fdst, length=0):', 'def _samefile(src, dst):', 'def _stat(fn):', 'def _islink(fn):', 'def copyfile(src, dst, *, follow_symlinks=True):', 'def copymode(src, dst, *, follow_symlinks=True):', 'def chmod_func(*args):', 'def _copyxattr(src, dst, *, follow_symlinks=True):', 'def _copyxattr(*args, **kwargs):', 'def copystat(src, dst, *, follow_symlinks=True):', 'def _nop(*args, ns=None, follow_symlinks=None):', 'def lookup(name):', 'def lookup(name):', 'def copy(src, dst, *, follow_symlinks=True):', 'def copy2(src, dst, *, follow_symlinks=True):', 'def ignore_patterns(*patterns):', 'def _ignore_patterns(path, names):', 'def _copytree(entries, src, dst, symlinks, ignore, copy_function,', 'def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,', 'def _rmtree_islink(st):', 'def _rmtree_islink(st):', 'def _rmtree_unsafe(path, onexc):', 'def onerror(err):', 'def _rmtree_safe_fd(stack, onexc):', 'def rmtree(path, ignore_errors=False, onerror=None, *, onexc=None, dir_fd=None):', 'def onexc(*args):', 'def onexc(*args):', 'def onexc(*args):', 'def onexc(*args):', 'def _basename(path):', 'def move(src, dst, copy_function=copy2):', 'def _destinsrc(src, dst):', 'def _is_immutable(src):', 'def _get_gid(name):', 'def _get_uid(name):', 'def _make_tarball(base_name, base_dir, compress="gzip", verbose=0, dry_run=0,', 'def _set_uid_gid(tarinfo):', 'def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0,', 'def get_archive_formats():', "def register_archive_format(name, function, extra_args=None, description=''):", 'def unregister_archive_format(name):', 'def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,', 'def get_unpack_formats():', 'def _check_unpack_options(extensions, function, extra_args):', 'def register_unpack_format(name, extensions, function, extra_args=None,', 'def unregister_unpack_format(name):', 'def _ensure_directory(path):', 'def _unpack_zipfile(filename, extract_dir):', 'def _unpack_tarfile(filename, extract_dir, *, filter=None):', 'def _find_unpack_format(filename):', 'def unpack_archive(filename, extract_dir=None, format=None, *, filter=None):', 'def disk_usage(path):', 'def disk_usage(path):', 'def chown(path, user=None, group=None, *, dir_fd=None, follow_symlinks=True):', 'def get_terminal_size(fallback=(80, 24)):', 'def _access_check(fn, mode):', 'def _win_path_needs_curdir(cmd, mode):', 'def which(cmd, mode=os.F_OK | os.X_OK, path=None):']

Analyzed C:\dev\adn_trash_code\python_libs\signal.py:
Classes: []
Functions: ['def _int_to_enum(value, enum_klass):', 'def _enum_to_int(value):', 'def _wraps(wrapped):', 'def decorator(wrapper):', 'def signal(signalnum, handler):', 'def getsignal(signalnum):', 'def pthread_sigmask(how, mask):', 'def sigpending():', 'def sigwait(sigset):', 'def valid_signals():']

Analyzed C:\dev\adn_trash_code\python_libs\site.py:
Classes: []
Functions: ['def _trace(message):', 'def makepath(*paths):', 'def abs_paths():', 'def removeduppaths():', 'def _init_pathinfo():', 'def addpackage(sitedir, name, known_paths):', 'def addsitedir(sitedir, known_paths=None):', 'def check_enableusersite():', 'def _get_implementation():', 'def _getuserbase():', 'def joinuser(*args):', 'def _get_path(userbase):', 'def getuserbase():', 'def getusersitepackages():', 'def addusersitepackages(known_paths):', 'def getsitepackages(prefixes=None):', 'def addsitepackages(known_paths, prefixes=None):', 'def setquit():', 'def setcopyright():', 'def sethelper():', 'def gethistoryfile():', 'def enablerlcompleter():', 'def register_readline():', 'def write_history():', 'def venv(known_paths):', 'def execsitecustomize():', 'def execusercustomize():', 'def main():', 'def _script():', 'def exists(path):']

Analyzed C:\dev\adn_trash_code\python_libs\smtplib.py:
Classes: ['class SMTPException(OSError):', 'class SMTPNotSupportedError(SMTPException):', 'class SMTPServerDisconnected(SMTPException):', 'class SMTPResponseException(SMTPException):', 'class SMTPSenderRefused(SMTPResponseException):', 'class SMTPRecipientsRefused(SMTPException):', 'class SMTPDataError(SMTPResponseException):', 'class SMTPConnectError(SMTPResponseException):', 'class SMTPHeloError(SMTPResponseException):', 'class SMTPAuthenticationError(SMTPResponseException):', 'class SMTP:', 'class SMTP_SSL(SMTP):', 'class LMTP(SMTP):']
Functions: ['def __init__(self, code, msg):', 'def __init__(self, code, msg, sender):', 'def __init__(self, recipients):', 'def quoteaddr(addrstring):', 'def _addr_only(addrstring):', 'def quotedata(data):', 'def _quote_periods(bindata):', 'def _fix_eols(data):', "def __init__(self, host='', port=0, local_hostname=None,", 'def __enter__(self):', 'def __exit__(self, *args):', 'def set_debuglevel(self, debuglevel):', 'def _print_debug(self, *args):', 'def _get_socket(self, host, port, timeout):', "def connect(self, host='localhost', port=0, source_address=None):", 'def send(self, s):', 'def putcmd(self, cmd, args=""):', 'def getreply(self):', 'def docmd(self, cmd, args=""):', "def helo(self, name=''):", "def ehlo(self, name=''):", 'def has_extn(self, opt):', "def help(self, args=''):", 'def rset(self):', 'def _rset(self):', 'def noop(self):', 'def mail(self, sender, options=()):', 'def rcpt(self, recip, options=()):', 'def data(self, msg):', 'def verify(self, address):', 'def expn(self, address):', 'def ehlo_or_helo_if_needed(self):', 'def auth(self, mechanism, authobject, *, initial_response_ok=True):', 'def auth_cram_md5(self, challenge=None):', 'def auth_plain(self, challenge=None):', 'def auth_login(self, challenge=None):', 'def login(self, user, password, *, initial_response_ok=True):', 'def starttls(self, *, context=None):', 'def sendmail(self, from_addr, to_addrs, msg, mail_options=(),', 'def send_message(self, msg, from_addr=None, to_addrs=None,', 'def close(self):', 'def quit(self):', "def __init__(self, host='', port=0, local_hostname=None,", 'def _get_socket(self, host, port, timeout):', "def __init__(self, host='', port=LMTP_PORT, local_hostname=None,", "def connect(self, host='localhost', port=0, source_address=None):", 'def prompt(prompt):']

Analyzed C:\dev\adn_trash_code\python_libs\socket.py:
Classes: ['class _GiveupOnSendfile(Exception): pass', 'class socket(_socket.socket):', 'class SocketIO(io.RawIOBase):']
Functions: ['def _intenum_converter(value, enum_klass):', 'def __init__(self, family=-1, type=-1, proto=-1, fileno=None):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def __getstate__(self):', 'def dup(self):', 'def accept(self):', 'def makefile(self, mode="r", buffering=None, *,', 'def _sendfile_use_sendfile(self, file, offset=0, count=None):', 'def _sendfile_use_sendfile(self, file, offset=0, count=None):', 'def _sendfile_use_send(self, file, offset=0, count=None):', 'def _check_sendfile_params(self, file, offset, count):', 'def sendfile(self, file, offset=0, count=None):', 'def _decref_socketios(self):', 'def _real_close(self, _ss=_socket.socket):', 'def close(self):', 'def detach(self):', 'def family(self):', 'def type(self):', 'def get_inheritable(self):', 'def set_inheritable(self, inheritable):', 'def get_inheritable(self):', 'def set_inheritable(self, inheritable):', 'def fromfd(fd, family, type, proto=0):', 'def send_fds(sock, buffers, fds, flags=0, address=None):', 'def recv_fds(sock, bufsize, maxfds, flags=0):', 'def fromshare(info):', 'def _fallback_socketpair(family=AF_INET, type=SOCK_STREAM, proto=0):', 'def socketpair(family=None, type=SOCK_STREAM, proto=0):', 'def __init__(self, sock, mode):', 'def readinto(self, b):', 'def write(self, b):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def fileno(self):', 'def name(self):', 'def mode(self):', 'def close(self):', "def getfqdn(name=''):", 'def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,', 'def has_dualstack_ipv6():', 'def create_server(address, *, family=AF_INET, backlog=None, reuse_port=False,', 'def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):']

Analyzed C:\dev\adn_trash_code\python_libs\socketserver.py:
Classes: ['class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass', 'class will essentially render the service "deaf" while one request is', 'class BaseServer:', 'class TCPServer(BaseServer):', 'class UDPServer(TCPServer):', 'class ForkingMixIn:', 'class _Threads(list):', 'class _NoThreads:', 'class ThreadingMixIn:', 'class ForkingUDPServer(ForkingMixIn, UDPServer): pass', 'class ForkingTCPServer(ForkingMixIn, TCPServer): pass', 'class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass', 'class ThreadingTCPServer(ThreadingMixIn, TCPServer): pass', 'class UnixStreamServer(TCPServer):', 'class UnixDatagramServer(UDPServer):', 'class ThreadingUnixStreamServer(ThreadingMixIn, UnixStreamServer): pass', 'class ThreadingUnixDatagramServer(ThreadingMixIn, UnixDatagramServer): pass', 'class ForkingUnixStreamServer(ForkingMixIn, UnixStreamServer): pass', 'class ForkingUnixDatagramServer(ForkingMixIn, UnixDatagramServer): pass', 'class BaseRequestHandler:', 'class StreamRequestHandler(BaseRequestHandler):', 'class _SocketWriter(BufferedIOBase):', 'class DatagramRequestHandler(BaseRequestHandler):']
Functions: ['def __init__(self, server_address, RequestHandlerClass):', 'def server_activate(self):', 'def serve_forever(self, poll_interval=0.5):', 'def shutdown(self):', 'def service_actions(self):', 'def handle_request(self):', 'def _handle_request_noblock(self):', 'def handle_timeout(self):', 'def verify_request(self, request, client_address):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def finish_request(self, request, client_address):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def handle_error(self, request, client_address):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __init__(self, server_address, RequestHandlerClass, bind_and_activate=True):', 'def server_bind(self):', 'def server_activate(self):', 'def server_close(self):', 'def fileno(self):', 'def get_request(self):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def get_request(self):', 'def server_activate(self):', 'def shutdown_request(self, request):', 'def close_request(self, request):', 'def collect_children(self, *, blocking=False):', 'def handle_timeout(self):', 'def service_actions(self):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def append(self, thread):', 'def pop_all(self):', 'def join(self):', 'def reap(self):', 'def append(self, thread):', 'def join(self):', 'def process_request_thread(self, request, client_address):', 'def process_request(self, request, client_address):', 'def server_close(self):', 'def __init__(self, request, client_address, server):', 'def setup(self):', 'def handle(self):', 'def finish(self):', 'def setup(self):', 'def finish(self):', 'def __init__(self, sock):', 'def writable(self):', 'def write(self, b):', 'def fileno(self):', 'def setup(self):', 'def finish(self):']

Analyzed C:\dev\adn_trash_code\python_libs\sre_compile.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\sre_constants.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\sre_parse.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\ssl.py:
Classes: ['class TLSVersion:', 'class _TLSContentType:', 'class _TLSAlertType:', 'class _TLSMessageType:', 'class _ASN1Object(namedtuple("_ASN1Object", "nid shortname longname oid")):', 'class Purpose(_ASN1Object, _Enum):', 'class SSLContext(_SSLContext):', 'class SSLObject:', 'class SSLSocket(socket):']
Functions: ['def _dnsname_match(dn, hostname):', 'def _inet_paton(ipname):', 'def _ipaddress_match(cert_ipaddress, host_ip):', 'def get_default_verify_paths():', 'def __new__(cls, oid):', 'def fromnid(cls, nid):', 'def fromname(cls, name):', 'def __new__(cls, protocol=None, *args, **kwargs):', 'def _encode_hostname(self, hostname):', 'def wrap_socket(self, sock, server_side=False,', 'def wrap_bio(self, incoming, outgoing, server_side=False,', 'def set_npn_protocols(self, npn_protocols):', 'def set_servername_callback(self, server_name_callback):', 'def shim_cb(sslobj, servername, sslctx):', 'def set_alpn_protocols(self, alpn_protocols):', 'def _load_windows_store_certs(self, storename, purpose):', 'def load_default_certs(self, purpose=Purpose.SERVER_AUTH):', 'def minimum_version(self):', 'def minimum_version(self, value):', 'def maximum_version(self):', 'def maximum_version(self, value):', 'def options(self):', 'def options(self, value):', 'def hostname_checks_common_name(self):', 'def hostname_checks_common_name(self, value):', 'def hostname_checks_common_name(self):', 'def _msg_callback(self):', 'def msg_cb(conn, direction, version, content_type, msg_type, data):', 'def _msg_callback(self, callback):', 'def inner(conn, direction, version, content_type, msg_type, data):', 'def protocol(self):', 'def verify_flags(self):', 'def verify_flags(self, value):', 'def verify_mode(self):', 'def verify_mode(self, value):', 'def create_default_context(purpose=Purpose.SERVER_AUTH, *, cafile=None,', 'def _create_unverified_context(protocol=None, *, cert_reqs=CERT_NONE,', 'def __init__(self, *args, **kwargs):', 'def _create(cls, incoming, outgoing, server_side=False,', 'def context(self):', 'def context(self, ctx):', 'def session(self):', 'def session(self, session):', 'def session_reused(self):', 'def server_side(self):', 'def server_hostname(self):', 'def read(self, len=1024, buffer=None):', 'def write(self, data):', 'def getpeercert(self, binary_form=False):', 'def get_verified_chain(self):', 'def get_unverified_chain(self):', 'def selected_npn_protocol(self):', 'def selected_alpn_protocol(self):', 'def cipher(self):', 'def shared_ciphers(self):', 'def compression(self):', 'def pending(self):', 'def do_handshake(self):', 'def unwrap(self):', 'def get_channel_binding(self, cb_type="tls-unique"):', 'def version(self):', 'def verify_client_post_handshake(self):', 'def _sslcopydoc(func):', 'def __init__(self, *args, **kwargs):', 'def _create(cls, sock, server_side=False, do_handshake_on_connect=True,', 'def context(self):', 'def context(self, ctx):', 'def session(self):', 'def session(self, session):', 'def session_reused(self):', 'def dup(self):', 'def _checkClosed(self, msg=None):', 'def _check_connected(self):', 'def read(self, len=1024, buffer=None):', 'def write(self, data):', 'def getpeercert(self, binary_form=False):', 'def get_verified_chain(self):', 'def get_unverified_chain(self):', 'def selected_npn_protocol(self):', 'def selected_alpn_protocol(self):', 'def cipher(self):', 'def shared_ciphers(self):', 'def compression(self):', 'def send(self, data, flags=0):', 'def sendto(self, data, flags_or_addr, addr=None):', 'def sendmsg(self, *args, **kwargs):', 'def sendall(self, data, flags=0):', 'def sendfile(self, file, offset=0, count=None):', 'def recv(self, buflen=1024, flags=0):', 'def recv_into(self, buffer, nbytes=None, flags=0):', 'def recvfrom(self, buflen=1024, flags=0):', 'def recvfrom_into(self, buffer, nbytes=None, flags=0):', 'def recvmsg(self, *args, **kwargs):', 'def recvmsg_into(self, *args, **kwargs):', 'def pending(self):', 'def shutdown(self, how):', 'def unwrap(self):', 'def verify_client_post_handshake(self):', 'def _real_close(self):', 'def do_handshake(self, block=False):', 'def _real_connect(self, addr, connect_ex):', 'def connect(self, addr):', 'def connect_ex(self, addr):', 'def accept(self):', 'def get_channel_binding(self, cb_type="tls-unique"):', 'def version(self):', 'def cert_time_to_seconds(cert_time):', 'def DER_cert_to_PEM_cert(der_cert_bytes):', 'def PEM_cert_to_DER_cert(pem_cert_string):', 'def get_server_certificate(addr, ssl_version=PROTOCOL_TLS_CLIENT,', 'def get_protocol_name(protocol_code):']

Analyzed C:\dev\adn_trash_code\python_libs\stat.py:
Classes: []
Functions: ['def S_IMODE(mode):', 'def S_IFMT(mode):', 'def S_ISDIR(mode):', 'def S_ISCHR(mode):', 'def S_ISBLK(mode):', 'def S_ISREG(mode):', 'def S_ISFIFO(mode):', 'def S_ISLNK(mode):', 'def S_ISSOCK(mode):', 'def S_ISDOOR(mode):', 'def S_ISPORT(mode):', 'def S_ISWHT(mode):', 'def filemode(mode):']

Analyzed C:\dev\adn_trash_code\python_libs\statistics.py:
Classes: ['class StatisticsError(ValueError):', 'class NormalDist:']
Functions: ['def _sum(data):', 'def _ss(data, c=None):', 'def _isfinite(x):', 'def _coerce(T, S):', 'def _exact_ratio(x):', 'def _convert(value, T):', "def _fail_neg(values, errmsg='negative value'):", "def _rank(data, /, *, key=None, reverse=False, ties='average', start=1) -> list[float]:", 'def _integer_sqrt_of_frac_rto(n: int, m: int) -> int:', 'def _float_sqrt_of_frac(n: int, m: int) -> float:', 'def _decimal_sqrt_of_frac(n: int, m: int) -> Decimal:', 'def mean(data):', 'def fmean(data, weights=None):', 'def count(iterable):', 'def geometric_mean(data):', 'def count_positive(iterable):', 'def harmonic_mean(data, weights=None):', 'def median(data):', 'def median_low(data):', 'def median_high(data):', 'def median_grouped(data, interval=1.0):', 'def mode(data):', 'def multimode(data):', "def kde(data, h, kernel='normal', *, cumulative=False):", 'def pdf(x):', 'def cdf(x):', 'def pdf(x):', 'def cdf(x):', "def quantiles(data, *, n=4, method='exclusive'):", 'def variance(data, xbar=None):', 'def pvariance(data, mu=None):', 'def stdev(data, xbar=None):', 'def pstdev(data, mu=None):', 'def _mean_stdev(data):', 'def _sqrtprod(x: float, y: float) -> float:', 'def covariance(x, y, /):', "def correlation(x, y, /, *, method='linear'):", 'def linear_regression(x, y, /, *, proportional=False):', 'def _normal_dist_inv_cdf(p, mu, sigma):', 'def __init__(self, mu=0.0, sigma=1.0):', 'def from_samples(cls, data):', 'def samples(self, n, *, seed=None):', 'def pdf(self, x):', 'def cdf(self, x):', 'def inv_cdf(self, p):', 'def quantiles(self, n=4):', 'def overlap(self, other):', 'def zscore(self, x):', 'def mean(self):', 'def median(self):', 'def mode(self):', 'def stdev(self):', 'def variance(self):', 'def __add__(x1, x2):', 'def __sub__(x1, x2):', 'def __mul__(x1, x2):', 'def __truediv__(x1, x2):', 'def __pos__(x1):', 'def __neg__(x1):', 'def __rsub__(x1, x2):', 'def __eq__(x1, x2):', 'def __hash__(self):', 'def __repr__(self):', 'def __getstate__(self):', 'def __setstate__(self, state):', 'def _newton_raphson(f_inv_estimate, f, f_prime, tolerance=1e-12):', 'def f_inv(y):', 'def _quartic_invcdf_estimate(p):', 'def _triweight_invcdf_estimate(p):', "def kde_random(data, h, kernel='normal', *, seed=None):", 'def rand():']

Analyzed C:\dev\adn_trash_code\python_libs\string.py:
Classes: ['class Template:', 'class Formatter:']
Functions: ['def capwords(s, sep=None):', 'def __init_subclass__(cls):', 'def __init__(self, template):', 'def _invalid(self, mo):', 'def substitute(self, mapping=_sentinel_dict, /, **kws):', 'def convert(mo):', 'def safe_substitute(self, mapping=_sentinel_dict, /, **kws):', 'def convert(mo):', 'def is_valid(self):', 'def get_identifiers(self):', 'def format(self, format_string, /, *args, **kwargs):', 'def vformat(self, format_string, args, kwargs):', 'def _vformat(self, format_string, args, kwargs, used_args, recursion_depth,', 'def get_value(self, key, args, kwargs):', 'def check_unused_args(self, used_args, args, kwargs):', 'def format_field(self, value, format_spec):', 'def convert_field(self, value, conversion):', 'def parse(self, format_string):', 'def get_field(self, field_name, args, kwargs):']

Analyzed C:\dev\adn_trash_code\python_libs\stringprep.py:
Classes: []
Functions: ['def in_table_a1(code):', 'def in_table_b1(code):', 'def map_table_b3(code):', 'def map_table_b2(a):', 'def in_table_c11(code):', 'def in_table_c12(code):', 'def in_table_c11_c12(code):', 'def in_table_c21(code):', 'def in_table_c22(code):', 'def in_table_c21_c22(code):', 'def in_table_c3(code):', 'def in_table_c4(code):', 'def in_table_c5(code):', 'def in_table_c6(code):', 'def in_table_c7(code):', 'def in_table_c8(code):', 'def in_table_c9(code):', 'def in_table_d1(code):', 'def in_table_d2(code):']

Analyzed C:\dev\adn_trash_code\python_libs\struct.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\subprocess.py:
Classes: ['class _del_safe:', 'class _del_safe:', 'class SubprocessError(Exception): pass', 'class CalledProcessError(SubprocessError):', 'class TimeoutExpired(SubprocessError):', 'class STARTUPINFO:', 'class Handle(int):', 'class CompletedProcess(object):', 'class Popen:']
Functions: ['def __init__(self, returncode, cmd, output=None, stderr=None):', 'def __str__(self):', 'def stdout(self):', 'def stdout(self, value):', 'def __init__(self, cmd, timeout, output=None, stderr=None):', 'def __str__(self):', 'def stdout(self):', 'def stdout(self, value):', 'def __init__(self, *, dwFlags=0, hStdInput=None, hStdOutput=None,', 'def copy(self):', 'def Close(self, CloseHandle=_winapi.CloseHandle):', 'def Detach(self):', 'def __repr__(self):', 'def _cleanup():', 'def _cleanup():', 'def _optim_args_from_interpreter_flags():', 'def _args_from_interpreter_flags():', 'def _text_encoding():', 'def call(*popenargs, timeout=None, **kwargs):', 'def check_call(*popenargs, **kwargs):', 'def check_output(*popenargs, timeout=None, **kwargs):', 'def __init__(self, args, returncode, stdout=None, stderr=None):', 'def __repr__(self):', 'def check_returncode(self):', 'def run(*popenargs,', 'def list2cmdline(seq):', 'def getstatusoutput(cmd, *, encoding=None, errors=None):', 'def getoutput(cmd, *, encoding=None, errors=None):', 'def _use_posix_spawn():', 'def __init__(self, args, bufsize=-1, executable=None,', 'def __repr__(self):', 'def universal_newlines(self):', 'def universal_newlines(self, universal_newlines):', 'def _translate_newlines(self, data, encoding, errors):', 'def __enter__(self):', 'def __exit__(self, exc_type, value, traceback):', 'def __del__(self, _maxsize=sys.maxsize, _warn=warnings.warn):', 'def _get_devnull(self):', 'def _stdin_write(self, input):', 'def communicate(self, input=None, timeout=None):', 'def poll(self):', 'def _remaining_time(self, endtime):', 'def _check_timeout(self, endtime, orig_timeout, stdout_seq, stderr_seq,', 'def wait(self, timeout=None):', 'def _close_pipe_fds(self,', 'def _on_error_fd_closer(self):', 'def _get_handles(self, stdin, stdout, stderr):', 'def _make_inheritable(self, handle):', 'def _filter_handle_list(self, handle_list):', 'def _execute_child(self, args, executable, preexec_fn, close_fds,', 'def _internal_poll(self, _deadstate=None,', 'def _wait(self, timeout):', 'def _readerthread(self, fh, buffer):', 'def _communicate(self, input, endtime, orig_timeout):', 'def send_signal(self, sig):', 'def terminate(self):', 'def _get_handles(self, stdin, stdout, stderr):', 'def _posix_spawn(self, args, executable, env, restore_signals, close_fds,', 'def _execute_child(self, args, executable, preexec_fn, close_fds,', 'def _handle_exitstatus(self, sts, _del_safe=_del_safe):', 'def _internal_poll(self, _deadstate=None, _del_safe=_del_safe):', 'def _try_wait(self, wait_flags):', 'def _wait(self, timeout):', 'def _communicate(self, input, endtime, orig_timeout):', 'def _save_input(self, input):', 'def send_signal(self, sig):', 'def terminate(self):', 'def kill(self):']

Analyzed C:\dev\adn_trash_code\python_libs\symtable.py:
Classes: ['class SymbolTableFactory:', 'class SymbolTableType(StrEnum):', 'class SymbolTable:', 'class Function(SymbolTable):', 'class Class(SymbolTable):', 'class Symbol:']
Functions: ['def symtable(code, filename, compile_type):', 'def __init__(self):', 'def new(self, table, filename):', 'def __call__(self, table, filename):', 'def __init__(self, raw_table, filename):', 'def __repr__(self):', 'def get_type(self):', 'def get_id(self):', 'def get_name(self):', 'def get_lineno(self):', 'def is_optimized(self):', 'def is_nested(self):', 'def has_children(self):', 'def get_identifiers(self):', 'def lookup(self, name):', 'def get_symbols(self):', 'def __check_children(self, name):', 'def get_children(self):', 'def __idents_matching(self, test_func):', 'def get_parameters(self):', 'def get_locals(self):', 'def get_globals(self):', 'def get_nonlocals(self):', 'def get_frees(self):', 'def get_methods(self):', 'def is_local_symbol(ident):', 'def __init__(self, name, flags, namespaces=None, *, module_scope=False):', 'def __repr__(self):', 'def _scope_str(self):', 'def _flags_str(self):', 'def get_name(self):', 'def is_referenced(self):', 'def is_parameter(self):', 'def is_global(self):', 'def is_nonlocal(self):', 'def is_declared_global(self):', 'def is_local(self):', 'def is_annotated(self):', 'def is_free(self):', 'def is_imported(self):', 'def is_assigned(self):', 'def is_namespace(self):', 'def get_namespaces(self):', 'def get_namespace(self):', 'def main(args):', 'def print_symbols(table, level=0):']

Analyzed C:\dev\adn_trash_code\python_libs\tabnanny.py:
Classes: ['class NannyNag(Exception):', 'class Whitespace:']
Functions: ['def errprint(*args):', 'def main():', 'def __init__(self, lineno, msg, line):', 'def get_lineno(self):', 'def get_msg(self):', 'def get_line(self):', 'def check(file):', 'def __init__(self, ws):', 'def longest_run_of_spaces(self):', 'def indent_level(self, tabsize):', 'def equal(self, other):', 'def not_equal_witness(self, other):', 'def less(self, other):', 'def not_less_witness(self, other):', 'def format_witnesses(w):', 'def process_tokens(tokens):', 'def _process_tokens(tokens):']

Analyzed C:\dev\adn_trash_code\python_libs\tarfile.py:
Classes: ['class TarError(Exception):', 'class ExtractError(TarError):', 'class ReadError(TarError):', 'class CompressionError(TarError):', 'class StreamError(TarError):', 'class HeaderError(TarError):', 'class EmptyHeaderError(HeaderError):', 'class TruncatedHeaderError(HeaderError):', 'class EOFHeaderError(HeaderError):', 'class InvalidHeaderError(HeaderError):', 'class SubsequentHeaderError(HeaderError):', 'class _LowLevelFile:', 'class _Stream:', 'class _StreamProxy(object):', 'class _FileInFile(object):', 'class ExFileObject(io.BufferedReader):', 'class FilterError(TarError):', 'class AbsolutePathError(FilterError):', 'class OutsideDestinationError(FilterError):', 'class SpecialFileError(FilterError):', 'class AbsoluteLinkError(FilterError):', 'class LinkOutsideDestinationError(FilterError):', 'class TarInfo(object):', 'class TarFile(object):']
Functions: ['def stn(s, length, encoding, errors):', 'def nts(s, encoding, errors):', 'def nti(s):', 'def itn(n, digits=8, format=DEFAULT_FORMAT):', 'def calc_chksums(buf):', 'def copyfileobj(src, dst, length=None, exception=OSError, bufsize=None):', 'def _safe_print(s):', 'def __init__(self, name, mode):', 'def close(self):', 'def read(self, size):', 'def write(self, s):', 'def __init__(self, name, mode, comptype, fileobj, bufsize,', 'def __del__(self):', 'def _init_write_gz(self, compresslevel):', 'def write(self, s):', 'def __write(self, s):', 'def close(self):', 'def _init_read_gz(self):', 'def tell(self):', 'def seek(self, pos=0):', 'def read(self, size):', 'def _read(self, size):', 'def __read(self, size):', 'def __init__(self, fileobj):', 'def read(self, size):', 'def getcomptype(self):', 'def close(self):', 'def __init__(self, fileobj, offset, size, name, blockinfo=None):', 'def flush(self):', 'def mode(self):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def tell(self):', 'def seek(self, position, whence=io.SEEK_SET):', 'def read(self, size=None):', 'def readinto(self, b):', 'def close(self):', 'def __init__(self, tarfile, tarinfo):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo, path):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo):', 'def __init__(self, tarinfo, path):', 'def _get_filtered_attrs(member, dest_path, for_data=True):', 'def fully_trusted_filter(member, dest_path):', 'def tar_filter(member, dest_path):', 'def data_filter(member, dest_path):', 'def __init__(self, name=""):', 'def tarfile(self):', 'def tarfile(self, tarfile):', 'def path(self):', 'def path(self, name):', 'def linkpath(self):', 'def linkpath(self, linkname):', 'def __repr__(self):', 'def replace(self, *,', 'def get_info(self):', 'def tobuf(self, format=DEFAULT_FORMAT, encoding=ENCODING, errors="surrogateescape"):', 'def create_ustar_header(self, info, encoding, errors):', 'def create_gnu_header(self, info, encoding, errors):', 'def create_pax_header(self, info, encoding):', 'def create_pax_global_header(cls, pax_headers):', 'def _posix_split_name(self, name, encoding, errors):', 'def _create_header(info, format, encoding, errors):', 'def _create_payload(payload):', 'def _create_gnu_long_header(cls, name, type, encoding, errors):', 'def _create_pax_generic_header(cls, pax_headers, type, encoding):', 'def frombuf(cls, buf, encoding, errors):', 'def fromtarfile(cls, tarfile):', 'def _proc_member(self, tarfile):', 'def _proc_builtin(self, tarfile):', 'def _proc_gnulong(self, tarfile):', 'def _proc_sparse(self, tarfile):', 'def _proc_pax(self, tarfile):', 'def _proc_gnusparse_00(self, next, raw_headers):', 'def _proc_gnusparse_01(self, next, pax_headers):', 'def _proc_gnusparse_10(self, next, pax_headers, tarfile):', 'def _apply_pax_info(self, pax_headers, encoding, errors):', 'def _decode_pax_field(self, value, encoding, fallback_encoding, fallback_errors):', 'def _block(self, count):', 'def isreg(self):', 'def isfile(self):', 'def isdir(self):', 'def issym(self):', 'def islnk(self):', 'def ischr(self):', 'def isblk(self):', 'def isfifo(self):', 'def issparse(self):', 'def isdev(self):', 'def __init__(self, name=None, mode="r", fileobj=None, format=None,', 'def open(cls, name=None, mode="r", fileobj=None, bufsize=RECORDSIZE, **kwargs):', 'def not_compressed(comptype):', 'def taropen(cls, name, mode="r", fileobj=None, **kwargs):', 'def gzopen(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):', 'def bz2open(cls, name, mode="r", fileobj=None, compresslevel=9, **kwargs):', 'def xzopen(cls, name, mode="r", fileobj=None, preset=None, **kwargs):', 'def close(self):', 'def getmember(self, name):', 'def getmembers(self):', 'def getnames(self):', 'def gettarinfo(self, name=None, arcname=None, fileobj=None):', 'def list(self, verbose=True, *, members=None):', 'def add(self, name, arcname=None, recursive=True, *, filter=None):', 'def addfile(self, tarinfo, fileobj=None):', 'def _get_filter_function(self, filter):', 'def extractall(self, path=".", members=None, *, numeric_owner=False,', 'def extract(self, member, path="", set_attrs=True, *, numeric_owner=False,', 'def _get_extract_tarinfo(self, member, filter_function, path):', 'def _extract_one(self, tarinfo, path, set_attrs, numeric_owner):', 'def _handle_nonfatal_error(self, e):', 'def _handle_fatal_error(self, e):', 'def extractfile(self, member):', 'def _extract_member(self, tarinfo, targetpath, set_attrs=True,', 'def makedir(self, tarinfo, targetpath):', 'def makefile(self, tarinfo, targetpath):', 'def makeunknown(self, tarinfo, targetpath):', 'def makefifo(self, tarinfo, targetpath):', 'def makedev(self, tarinfo, targetpath):', 'def makelink(self, tarinfo, targetpath):', 'def chown(self, tarinfo, targetpath, numeric_owner):', 'def chmod(self, tarinfo, targetpath):', 'def utime(self, tarinfo, targetpath):', 'def next(self):', 'def _getmember(self, name, tarinfo=None, normalize=False):', 'def _load(self):', 'def _check(self, mode=None):', 'def _find_link_target(self, tarinfo):', 'def __iter__(self):', 'def _dbg(self, level, msg):', 'def __enter__(self):', 'def __exit__(self, type, value, traceback):', 'def is_tarfile(name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\tempfile.py:
Classes: ['class _RandomNameSequence:', 'class _TemporaryFileCloser:', 'class _TemporaryFileWrapper:', 'class SpooledTemporaryFile(_io.IOBase):', 'class TemporaryDirectory:']
Functions: ['def _exists(fn):', 'def _infer_return_type(*args):', 'def _sanitize_params(prefix, suffix, dir):', 'def rng(self):', 'def __iter__(self):', 'def __next__(self):', 'def _candidate_tempdir_list():', 'def _get_default_tempdir():', 'def _get_candidate_names():', 'def _mkstemp_inner(dir, pre, suf, flags, output_type):', 'def _dont_follow_symlinks(func, path, *args):', 'def _resetperms(path):', 'def gettempprefix():', 'def gettempprefixb():', 'def _gettempdir():', 'def gettempdir():', 'def gettempdirb():', 'def mkstemp(suffix=None, prefix=None, dir=None, text=False):', 'def mkdtemp(suffix=None, prefix=None, dir=None):', 'def mktemp(suffix="", prefix=template, dir=None):', 'def __init__(self, file, name, delete=True, delete_on_close=True):', "def cleanup(self, windows=(_os.name == 'nt'), unlink=_os.unlink):", 'def close(self):', 'def __del__(self):', 'def __init__(self, file, name, delete=True, delete_on_close=True):', 'def __getattr__(self, name):', 'def func_wrapper(*args, **kwargs):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def close(self):', 'def __iter__(self):', "def NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,", 'def opener(*args):', "def TemporaryFile(mode='w+b', buffering=-1, encoding=None,", 'def opener(*args):', 'def opener(*args):', "def __init__(self, max_size=0, mode='w+b', buffering=-1,", 'def _check(self, file):', 'def rollover(self):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def __iter__(self):', 'def __del__(self):', 'def close(self):', 'def closed(self):', 'def encoding(self):', 'def errors(self):', 'def fileno(self):', 'def flush(self):', 'def isatty(self):', 'def mode(self):', 'def name(self):', 'def newlines(self):', 'def readable(self):', 'def read(self, *args):', 'def read1(self, *args):', 'def readinto(self, b):', 'def readinto1(self, b):', 'def readline(self, *args):', 'def readlines(self, *args):', 'def seekable(self):', 'def seek(self, *args):', 'def tell(self):', 'def truncate(self, size=None):', 'def writable(self):', 'def write(self, s):', 'def writelines(self, iterable):', 'def detach(self):', 'def __init__(self, suffix=None, prefix=None, dir=None,', 'def _rmtree(cls, name, ignore_errors=False, repeated=False):', 'def onexc(func, path, exc):', 'def _cleanup(cls, name, warn_message, ignore_errors=False, delete=True):', 'def __repr__(self):', 'def __enter__(self):', 'def __exit__(self, exc, value, tb):', 'def cleanup(self):']

Analyzed C:\dev\adn_trash_code\python_libs\textwrap.py:
Classes: ['class TextWrapper:']
Functions: ['def __init__(self,', 'def _munge_whitespace(self, text):', 'def _split(self, text):', 'def _fix_sentence_endings(self, chunks):', 'def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):', 'def _wrap_chunks(self, chunks):', 'def _split_chunks(self, text):', 'def wrap(self, text):', 'def fill(self, text):', 'def wrap(text, width=70, **kwargs):', 'def fill(text, width=70, **kwargs):', 'def shorten(text, width, **kwargs):', 'def dedent(text):', 'def indent(text, prefix, predicate=None):']

Analyzed C:\dev\adn_trash_code\python_libs\this.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\threading.py:
Classes: ['class _RLock:', 'class Condition:', 'class Semaphore:', 'class BoundedSemaphore(Semaphore):', 'class Event:', 'class Barrier:', 'class BrokenBarrierError(RuntimeError):', 'class Thread:', 'class is implemented.', 'class Timer(Thread):', 'class _MainThread(Thread):', 'class _DeleteDummyThreadOnDel:', 'class _DummyThread(Thread):']
Functions: ['def setprofile(func):', 'def setprofile_all_threads(func):', 'def getprofile():', 'def settrace(func):', 'def settrace_all_threads(func):', 'def gettrace():', 'def RLock(*args, **kwargs):', 'def __init__(self):', 'def __repr__(self):', 'def _at_fork_reinit(self):', 'def acquire(self, blocking=True, timeout=-1):', 'def release(self):', 'def __exit__(self, t, v, tb):', 'def _acquire_restore(self, state):', 'def _release_save(self):', 'def _is_owned(self):', 'def _recursion_count(self):', 'def __init__(self, lock=None):', 'def _at_fork_reinit(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def _release_save(self):', 'def _acquire_restore(self, x):', 'def _is_owned(self):', 'def wait(self, timeout=None):', 'def wait_for(self, predicate, timeout=None):', 'def notify(self, n=1):', 'def notify_all(self):', 'def notifyAll(self):', 'def __init__(self, value=1):', 'def __repr__(self):', 'def acquire(self, blocking=True, timeout=None):', 'def release(self, n=1):', 'def __exit__(self, t, v, tb):', 'def __init__(self, value=1):', 'def __repr__(self):', 'def release(self, n=1):', 'def __init__(self):', 'def __repr__(self):', 'def _at_fork_reinit(self):', 'def is_set(self):', 'def isSet(self):', 'def set(self):', 'def clear(self):', 'def wait(self, timeout=None):', 'def __init__(self, parties, action=None, timeout=None):', 'def __repr__(self):', 'def wait(self, timeout=None):', 'def _enter(self):', 'def _release(self):', 'def _wait(self, timeout):', 'def _exit(self):', 'def reset(self):', 'def abort(self):', 'def _break(self):', 'def parties(self):', 'def n_waiting(self):', 'def broken(self):', 'def _newname(name_template):', 'def __init__(self, group=None, target=None, name=None,', 'def _after_fork(self, new_ident=None):', 'def __repr__(self):', 'def start(self):', 'def run(self):', 'def _bootstrap(self):', 'def _set_ident(self):', 'def _set_native_id(self):', 'def _bootstrap_inner(self):', 'def _delete(self):', 'def join(self, timeout=None):', 'def name(self):', 'def name(self, name):', 'def ident(self):', 'def native_id(self):', 'def is_alive(self):', 'def daemon(self):', 'def daemon(self, daemonic):', 'def isDaemon(self):', 'def setDaemon(self, daemonic):', 'def getName(self):', 'def setName(self, name):', 'def ExceptHookArgs(args):', 'def excepthook(args, /):', 'def _make_invoke_excepthook():', 'def invoke_excepthook(thread):', 'def __init__(self, interval, function, args=None, kwargs=None):', 'def cancel(self):', 'def run(self):', 'def __init__(self):', 'def __init__(self, dummy_thread):', 'def __del__(self):', 'def __init__(self):', 'def is_alive(self):', 'def join(self, timeout=None):', 'def _after_fork(self, new_ident=None):', 'def current_thread():', 'def currentThread():', 'def active_count():', 'def activeCount():', 'def _enumerate():', 'def enumerate():', 'def _register_atexit(func, *arg, **kwargs):', 'def _shutdown():', 'def main_thread():', 'def _after_fork():']

Analyzed C:\dev\adn_trash_code\python_libs\timeit.py:
Classes: ['class Timer:']
Functions: ['def inner(_it, _timer{init}):', 'def reindent(src, indent):', 'def __init__(self, stmt="pass", setup="pass", timer=default_timer,', 'def print_exc(self, file=None):', 'def timeit(self, number=default_number):', 'def repeat(self, repeat=default_repeat, number=default_number):', 'def autorange(self, callback=None):', 'def timeit(stmt="pass", setup="pass", timer=default_timer,', 'def repeat(stmt="pass", setup="pass", timer=default_timer,', 'def main(args=None, *, _wrap_timer=None):', 'def callback(number, time_taken):', 'def format_time(dt):']

Analyzed C:\dev\adn_trash_code\python_libs\token.py:
Classes: []
Functions: ['def ISTERMINAL(x):', 'def ISNONTERMINAL(x):', 'def ISEOF(x):']

Analyzed C:\dev\adn_trash_code\python_libs\tokenize.py:
Classes: ["class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):", 'class TokenError(Exception): pass', 'class Untokenizer:']
Functions: ['def __repr__(self):', 'def exact_type(self):', "def group(*choices): return '(' + '|'.join(choices) + ')'", "def any(*choices): return group(*choices) + '*'", "def maybe(*choices): return group(*choices) + '?'", 'def _all_string_prefixes():', 'def _compile(expr):', 'def __init__(self):', 'def add_whitespace(self, start):', 'def add_backslash_continuation(self, start):', 'def escape_brackets(self, token):', 'def untokenize(self, iterable):', 'def compat(self, token, iterable):', 'def untokenize(iterable):', 'def _get_normal_name(orig_enc):', 'def detect_encoding(readline):', 'def read_or_stop():', 'def find_cookie(line):', 'def open(filename):', 'def tokenize(readline):', 'def generate_tokens(readline):', 'def main():', 'def perror(message):', 'def error(message, filename=None, location=None):', 'def _transform_msg(msg):', 'def _generate_tokens_from_c_tokenizer(source, encoding=None, extra_tokens=False):']

Analyzed C:\dev\adn_trash_code\python_libs\trace.py:
Classes: ['class _Ignore:', 'class CoverageResults:', 'class Trace:']
Functions: ['def __init__(self, modules=None, dirs=None):', 'def names(self, filename, modulename):', 'def _modname(path):', 'def _fullmodname(path):', 'def __init__(self, counts=None, calledfuncs=None, infile=None,', 'def is_ignored_filename(self, filename):', 'def update(self, other):', 'def write_results(self, show_missing=True, summary=False, coverdir=None, *,', 'def write_results_file(self, path, lines, lnotab, lines_hit, encoding=None):', 'def _find_lines_from_code(code, strs):', 'def _find_lines(code, strs):', 'def _find_strings(filename, encoding=None):', 'def _find_executable_linenos(filename):', 'def __init__(self, count=1, trace=1, countfuncs=0, countcallers=0,', 'def run(self, cmd):', 'def runctx(self, cmd, globals=None, locals=None):', 'def runfunc(self, func, /, *args, **kw):', 'def file_module_function_of(self, frame):', 'def globaltrace_trackcallers(self, frame, why, arg):', 'def globaltrace_countfuncs(self, frame, why, arg):', 'def globaltrace_lt(self, frame, why, arg):', 'def localtrace_trace_and_count(self, frame, why, arg):', 'def localtrace_trace(self, frame, why, arg):', 'def localtrace_count(self, frame, why, arg):', 'def results(self):', 'def main():', 'def parse_ignore_dir(s):']

Analyzed C:\dev\adn_trash_code\python_libs\traceback.py:
Classes: ['class _Sentinel:', 'class FrameSummary:', 'class StackSummary(list):', 'class _ExceptionPrintContext:', 'class TracebackException:']
Functions: ['def print_list(extracted_list, file=None):', 'def format_list(extracted_list):', 'def print_tb(tb, limit=None, file=None):', 'def format_tb(tb, limit=None):', 'def extract_tb(tb, limit=None):', 'def __repr__(self):', 'def _parse_value_tb(exc, value, tb):', 'def print_exception(exc, /, value=_sentinel, tb=_sentinel, limit=None, \\', 'def _print_exception_bltin(exc, /):', 'def format_exception(exc, /, value=_sentinel, tb=_sentinel, limit=None, \\', 'def format_exception_only(exc, /, value=_sentinel, *, show_group=False, **kwargs):', 'def _format_final_exc_line(etype, value, *, insert_final_newline=True, colorize=False):', 'def _safe_string(value, what, func=str):', 'def print_exc(limit=None, file=None, chain=True):', 'def format_exc(limit=None, chain=True):', 'def print_last(limit=None, file=None, chain=True):', 'def print_stack(f=None, limit=None, file=None):', 'def format_stack(f=None, limit=None):', 'def extract_stack(f=None, limit=None):', 'def clear_frames(tb):', 'def __init__(self, filename, lineno, name, *, lookup_line=True,', 'def __eq__(self, other):', 'def __getitem__(self, pos):', 'def __iter__(self):', 'def __repr__(self):', 'def __len__(self):', 'def _set_lines(self):', 'def _original_lines(self):', 'def _dedented_lines(self):', 'def line(self):', 'def walk_stack(f):', 'def walk_tb(tb):', 'def _walk_tb_with_full_positions(tb):', 'def _get_code_position(code, instruction_index):', 'def extract(klass, frame_gen, *, limit=None, lookup_lines=True,', 'def extended_frame_gen():', 'def _extract_from_extended_frame_gen(klass, frame_gen, *, limit=None,', 'def from_list(klass, a_list):', 'def format_frame_summary(self, frame_summary, **kwargs):', 'def output_line(lineno):', 'def _should_show_carets(self, start_offset, end_offset, all_lines, anchors):', 'def _spawns_full_line(value):', 'def format(self, **kwargs):', 'def _byte_offset_to_character_offset(str, offset):', 'def _extract_caret_anchors_from_line_segment(segment):', 'def normalize(lineno, offset):', 'def next_valid_char(lineno, col):', 'def increment(lineno, col):', 'def nextline(lineno, col):', 'def increment_until(lineno, col, stop):', 'def setup_positions(expr, force_valid=True):', 'def _display_width(line, offset=None):', 'def __init__(self):', 'def indent(self):', 'def emit(self, text_gen, margin_char=None):', 'def __init__(self, exc_type, exc_value, exc_traceback, *, limit=None,', 'def from_exception(cls, exc, *args, **kwargs):', 'def exc_type(self):', 'def exc_type_str(self):', 'def _load_lines(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def format_exception_only(self, *, show_group=False, _depth=0, **kwargs):', 'def _format_syntax_error(self, stype, **kwargs):', 'def format(self, *, chain=True, _ctx=None, **kwargs):', 'def print(self, *, file=None, chain=True, **kwargs):', 'def _substitution_cost(ch_a, ch_b):', 'def _compute_suggestion_error(exc_value, tb, wrong_name):', 'def _levenshtein_distance(a, b, max_cost):']

Analyzed C:\dev\adn_trash_code\python_libs\tracemalloc.py:
Classes: ['class Statistic:', 'class StatisticDiff:', 'class Frame:', 'class Traceback(Sequence):', 'class Trace:', 'class _Traces(Sequence):', 'class BaseFilter:', 'class Filter(BaseFilter):', 'class DomainFilter(BaseFilter):', 'class Snapshot:']
Functions: ['def _format_size(size, sign):', 'def __init__(self, traceback, size, count):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def _sort_key(self):', 'def __init__(self, traceback, size, size_diff, count, count_diff):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def _sort_key(self):', 'def _compare_grouped_stats(old_group, new_group):', 'def __init__(self, frame):', 'def filename(self):', 'def lineno(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __hash__(self):', 'def __str__(self):', 'def __repr__(self):', 'def __init__(self, frames, total_nframe=None):', 'def total_nframe(self):', 'def __len__(self):', 'def __getitem__(self, index):', 'def __contains__(self, frame):', 'def __hash__(self):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __str__(self):', 'def __repr__(self):', 'def format(self, limit=None, most_recent_first=False):', 'def get_object_traceback(obj):', 'def __init__(self, trace):', 'def domain(self):', 'def size(self):', 'def traceback(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __str__(self):', 'def __repr__(self):', 'def __init__(self, traces):', 'def __len__(self):', 'def __getitem__(self, index):', 'def __contains__(self, trace):', 'def __eq__(self, other):', 'def __repr__(self):', 'def _normalize_filename(filename):', 'def __init__(self, inclusive):', 'def _match(self, trace):', 'def __init__(self, inclusive, filename_pattern,', 'def filename_pattern(self):', 'def _match_frame_impl(self, filename, lineno):', 'def _match_frame(self, filename, lineno):', 'def _match_traceback(self, traceback):', 'def _match(self, trace):', 'def __init__(self, inclusive, domain):', 'def domain(self):', 'def _match(self, trace):', 'def __init__(self, traces, traceback_limit):', 'def dump(self, filename):', 'def load(filename):', 'def _filter_trace(self, include_filters, exclude_filters, trace):', 'def filter_traces(self, filters):', 'def _group_by(self, key_type, cumulative):', 'def statistics(self, key_type, cumulative=False):', 'def compare_to(self, old_snapshot, key_type, cumulative=False):', 'def take_snapshot():']

Analyzed C:\dev\adn_trash_code\python_libs\tty.py:
Classes: []
Functions: ['def cfmakeraw(mode):', 'def cfmakecbreak(mode):', 'def setraw(fd, when=TCSAFLUSH):', 'def setcbreak(fd, when=TCSAFLUSH):']

Analyzed C:\dev\adn_trash_code\python_libs\turtle.py:
Classes: ['class Vec2D(tuple):', 'class ScrolledCanvas(TK.Frame):', 'class _Root(TK.Tk):', 'class TurtleScreenBase(object):', 'class Terminator (Exception):', 'class TurtleGraphicsError(Exception):', 'class Shape(object):', 'class Tbuffer(object):', 'class TurtleScreen(TurtleScreenBase):', 'class TNavigator(object):', 'class TPen(object):', 'class _TurtleImage(object):', 'class RawTurtle(TPen, TNavigator):', 'class _Screen(TurtleScreen):', 'class Turtle(RawTurtle):']
Functions: ['def config_dict(filename):', 'def readconfig(cfgdict):', 'def __new__(cls, x, y):', 'def __add__(self, other):', 'def __mul__(self, other):', 'def __rmul__(self, other):', 'def __sub__(self, other):', 'def __neg__(self):', 'def __abs__(self):', 'def rotate(self, angle):', 'def __getnewargs__(self):', 'def __repr__(self):', 'def __methodDict(cls, _dict):', 'def __methods(cls):', 'def __forwardmethods(fromClass, toClass, toPart, exclude = ()):', 'def __init__(self, master, width=500, height=350,', 'def reset(self, canvwidth=None, canvheight=None, bg = None):', 'def adjustScrolls(self):', 'def onResize(self, event):', 'def bbox(self, *args):', 'def cget(self, *args, **kwargs):', 'def config(self, *args, **kwargs):', 'def bind(self, *args, **kwargs):', 'def unbind(self, *args, **kwargs):', 'def focus_force(self):', 'def __init__(self):', 'def setupcanvas(self, width, height, cwidth, cheight):', 'def _getcanvas(self):', 'def set_geometry(self, width, height, startx, starty):', 'def ondestroy(self, destroy):', 'def win_width(self):', 'def win_height(self):', 'def _blankimage(self):', 'def _image(self, filename):', 'def __init__(self, cv):', 'def _createpoly(self):', 'def _drawpoly(self, polyitem, coordlist, fill=None,', 'def _createline(self):', 'def _drawline(self, lineitem, coordlist=None,', 'def _delete(self, item):', 'def _update(self):', 'def _delay(self, delay):', 'def _iscolorstring(self, color):', 'def _bgcolor(self, color=None):', 'def _write(self, pos, txt, align, font, pencolor):', 'def _onclick(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _onrelease(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _ondrag(self, item, fun, num=1, add=None):', 'def eventfun(event):', 'def _onscreenclick(self, fun, num=1, add=None):', 'def eventfun(event):', 'def _onkeyrelease(self, fun, key):', 'def eventfun(event):', 'def _onkeypress(self, fun, key=None):', 'def eventfun(event):', 'def _listen(self):', 'def _ontimer(self, fun, t):', 'def _createimage(self, image):', 'def _drawimage(self, item, pos, image):', 'def _setbgpic(self, item, image):', 'def _type(self, item):', 'def _pointlist(self, item):', 'def _setscrollregion(self, srx1, sry1, srx2, sry2):', 'def _rescale(self, xscalefactor, yscalefactor):', 'def _resize(self, canvwidth=None, canvheight=None, bg=None):', 'def _window_size(self):', 'def mainloop(self):', 'def textinput(self, title, prompt):', 'def numinput(self, title, prompt, default=None, minval=None, maxval=None):', 'def __init__(self, type_, data=None):', 'def addcomponent(self, poly, fill, outline=None):', 'def __init__(self, bufsize=10):', 'def reset(self, bufsize=None):', 'def push(self, item):', 'def pop(self):', 'def nr_of_items(self):', 'def __repr__(self):', 'def __init__(self, cv, mode=_CFG["mode"],', 'def clear(self):', 'def mode(self, mode=None):', 'def setworldcoordinates(self, llx, lly, urx, ury):', 'def register_shape(self, name, shape=None):', 'def _colorstr(self, color):', 'def _color(self, cstr):', 'def colormode(self, cmode=None):', 'def reset(self):', 'def turtles(self):', 'def bgcolor(self, *args):', 'def tracer(self, n=None, delay=None):', 'def delay(self, delay=None):', 'def _incrementudc(self):', 'def update(self):', 'def window_width(self):', 'def window_height(self):', 'def getcanvas(self):', 'def getshapes(self):', 'def onclick(self, fun, btn=1, add=None):', 'def onkey(self, fun, key):', 'def onkeypress(self, fun, key=None):', 'def listen(self, xdummy=None, ydummy=None):', 'def ontimer(self, fun, t=0):', 'def bgpic(self, picname=None):', 'def screensize(self, canvwidth=None, canvheight=None, bg=None):', 'def __init__(self, mode=DEFAULT_MODE):', 'def reset(self):', 'def _setmode(self, mode=None):', 'def _setDegreesPerAU(self, fullcircle):', 'def degrees(self, fullcircle=360.0):', 'def radians(self):', 'def _go(self, distance):', 'def _rotate(self, angle):', 'def _goto(self, end):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def forward(self, distance):', 'def back(self, distance):', 'def right(self, angle):', 'def left(self, angle):', 'def pos(self):', 'def xcor(self):', 'def ycor(self):', 'def goto(self, x, y=None):', 'def home(self):', 'def setx(self, x):', 'def sety(self, y):', 'def distance(self, x, y=None):', 'def towards(self, x, y=None):', 'def heading(self):', 'def setheading(self, to_angle):', 'def circle(self, radius, extent = None, steps = None):', 'def speed(self, s=0):', 'def _tracer(self, a=None, b=None):', 'def _delay(self, n=None):', 'def __init__(self, resizemode=_CFG["resizemode"]):', 'def _reset(self, pencolor=_CFG["pencolor"],', 'def resizemode(self, rmode=None):', 'def pensize(self, width=None):', 'def penup(self):', 'def pendown(self):', 'def isdown(self):', 'def speed(self, speed=None):', 'def color(self, *args):', 'def pencolor(self, *args):', 'def fillcolor(self, *args):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def showturtle(self):', 'def hideturtle(self):', 'def isvisible(self):', 'def pen(self, pen=None, **pendict):', 'def _newLine(self, usePos = True):', 'def _update(self, count=True, forced=False):', 'def _color(self, args):', 'def _colorstr(self, args):', 'def __init__(self, screen, shapeIndex):', 'def _setshape(self, shapeIndex):', 'def __init__(self, canvas=None,', 'def reset(self):', 'def setundobuffer(self, size):', 'def undobufferentries(self):', 'def _clear(self):', 'def clear(self):', 'def _update_data(self):', 'def _update(self):', 'def _tracer(self, flag=None, delay=None):', 'def _color(self, args):', 'def _colorstr(self, args):', 'def _cc(self, args):', 'def teleport(self, x=None, y=None, *, fill_gap: bool = False) -> None:', 'def clone(self):', 'def shape(self, name=None):', 'def shapesize(self, stretch_wid=None, stretch_len=None, outline=None):', 'def shearfactor(self, shear=None):', 'def tiltangle(self, angle=None):', 'def tilt(self, angle):', 'def shapetransform(self, t11=None, t12=None, t21=None, t22=None):', 'def _polytrafo(self, poly):', 'def get_shapepoly(self):', 'def _getshapepoly(self, polygon, compound=False):', 'def _drawturtle(self):', 'def stamp(self):', 'def _clearstamp(self, stampid):', 'def clearstamp(self, stampid):', 'def clearstamps(self, n=None):', 'def _goto(self, end):', 'def _undogoto(self, entry):', 'def _rotate(self, angle):', 'def _newLine(self, usePos=True):', 'def filling(self):', 'def begin_fill(self):', 'def end_fill(self):', 'def dot(self, size=None, *color):', 'def _write(self, txt, align, font):', 'def write(self, arg, move=False, align="left", font=("Arial", 8, "normal")):', 'def begin_poly(self):', 'def end_poly(self):', 'def get_poly(self):', 'def getscreen(self):', 'def getturtle(self):', 'def _delay(self, delay=None):', 'def onclick(self, fun, btn=1, add=None):', 'def onrelease(self, fun, btn=1, add=None):', 'def ondrag(self, fun, btn=1, add=None):', 'def _undo(self, action, data):', 'def undo(self):', 'def Screen():', 'def __init__(self):', 'def setup(self, width=_CFG["width"], height=_CFG["height"],', 'def title(self, titlestring):', 'def _destroy(self):', 'def bye(self):', 'def exitonclick(self):', 'def exitGracefully(x, y):', 'def __init__(self,', 'def write_docstringdict(filename="turtle_docstringdict"):', 'def read_docstrings(lang):', 'def getmethparlist(ob):', 'def _turtle_docrevise(docstr):', 'def _screen_docrevise(docstr):', 'def {name}{paramslist}:', 'def _make_global_funcs(functions, cls, obj, init, docrevise):', 'def switchpen():', 'def demo1():', 'def demo2():', 'def baba(xdummy, ydummy):']

Analyzed C:\dev\adn_trash_code\python_libs\types.py:
Classes: ['class _C:', 'class Foo(Generic[T]): ...', 'class Bar(Foo[int], float): ...', 'class Baz(list[str]): ...', 'class DynamicClassAttribute:', 'class _GeneratorWrapper:']
Functions: ['def _f(): pass', 'def _cell_factory():', 'def f():', 'def _g():', 'def _m(self): pass', 'def new_class(name, bases=(), kwds=None, exec_body=None):', 'def resolve_bases(bases):', 'def prepare_class(name, bases=(), kwds=None):', 'def _calculate_meta(meta, bases):', 'def get_original_bases(cls, /):', 'def __init__(self, fget=None, fset=None, fdel=None, doc=None):', 'def __get__(self, instance, ownerclass=None):', 'def __set__(self, instance, value):', 'def __delete__(self, instance):', 'def getter(self, fget):', 'def setter(self, fset):', 'def deleter(self, fdel):', 'def __init__(self, gen):', 'def send(self, val):', 'def throw(self, tp, *rest):', 'def close(self):', 'def gi_code(self):', 'def gi_frame(self):', 'def gi_running(self):', 'def gi_yieldfrom(self):', 'def __next__(self):', 'def __iter__(self):', 'def coroutine(func):', 'def wrapped(*args, **kwargs):', 'def __getattr__(name):']

Analyzed C:\dev\adn_trash_code\python_libs\typing.py:
Classes: ['class _Sentinel:', 'class _Final:', 'class _NotIterable:', 'class _SpecialForm(_Final, _NotIterable, _root=True):', 'class _TypedCacheSpecialForm(_SpecialForm, _root=True):', 'class _AnyMeta(type):', 'class Any(metaclass=_AnyMeta):', 'class Foo:', 'class Starship:', 'class Connection:', 'class FastConnector(Connection):', 'class Parent: pass', 'class Child(Parent): pass', 'class Unrelated: pass', 'class ForwardRef(_Final, _root=True):', 'class _BaseGenericAlias(_Final, _root=True):', 'class _GenericAlias(_BaseGenericAlias, _root=True):', 'class _SpecialGenericAlias(_NotIterable, _BaseGenericAlias, _root=True):', 'class _DeprecatedGenericAlias(_SpecialGenericAlias, _root=True):', 'class _CallableGenericAlias(_NotIterable, _GenericAlias, _root=True):', 'class _CallableType(_SpecialGenericAlias, _root=True):', 'class _TupleType(_SpecialGenericAlias, _root=True):', 'class _UnionGenericAlias(_NotIterable, _GenericAlias, _root=True):', 'class _LiteralGenericAlias(_GenericAlias, _root=True):', 'class _ConcatenateGenericAlias(_GenericAlias, _root=True):', 'class Bar(Generic[Unpack[Ts]]): ...', 'class Bar(Generic[*Ts]): ...', 'class Bar[*Ts]: ...', 'class Movie(TypedDict):', 'class _UnpackGenericAlias(_GenericAlias, _root=True):', 'class _TypingEllipsis:', 'class _ProtocolMeta(ABCMeta):', 'class Protocol(Generic, metaclass=_ProtocolMeta):', 'class Proto(Protocol):', 'class C:', 'class GenProto[T](Protocol):', 'class _AnnotatedAlias(_NotIterable, _GenericAlias, _root=True):', 'class Closable(Protocol):', 'class Base:', 'class Sub(Base):', 'class Leaf:', 'class Other(Leaf):  # Error reported by type checker', 'class User: ...  # Abstract base for User classes', 'class BasicUser(User): ...', 'class ProUser(User): ...', 'class TeamUser(User): ...', 'class SupportsInt(Protocol):', 'class SupportsFloat(Protocol):', 'class SupportsComplex(Protocol):', 'class SupportsBytes(Protocol):', 'class SupportsIndex(Protocol):', 'class SupportsAbs[T](Protocol):', 'class SupportsRound[T](Protocol):', 'class NamedTupleMeta(type):', 'class Employee(NamedTuple):', 'class _TypedDictMeta(type):', 'class Point2D(TypedDict, total=False):', 'class body be required.', 'class Point2D(TypedDict):', 'class DatabaseUser(TypedDict):', 'class Movie(TypedDict, total=False):', 'class Movie(TypedDict):', 'class Movie(TypedDict):', 'class NewType:', 'class Dummy:', 'class IO(Generic[AnyStr]):', 'class BinaryIO(IO[bytes]):', 'class TextIO(IO[str]):', 'class _IdentityCallable(Protocol):', 'class CustomerModel:', 'class ModelBase: ...', 'class CustomerModel(ModelBase):', 'class ModelMeta(type): ...', 'class ModelBase(metaclass=ModelMeta): ...', 'class CustomerModel(ModelBase):', 'class Base:', 'class Child(Base):']
Functions: ['def _type_convert(arg, module=None, *, allow_special_forms=False):', 'def _type_check(arg, msg, is_argument=True, module=None, *, allow_special_forms=False):', 'def _is_param_expr(arg):', 'def _should_unflatten_callable_args(typ, args):', 'def _type_repr(obj):', 'def _collect_type_parameters(args, *, enforce_default_ordering: bool = True):', 'def _check_generic_specialization(cls, arguments):', 'def _unpack_args(*args):', 'def _deduplicate(params, *, unhashable_fallback=False):', 'def _deduplicate_unhashable(unhashable_params):', 'def _compare_args_orderless(first_args, second_args):', 'def _remove_dups_flatten(parameters):', 'def _flatten_literal_params(parameters):', 'def _tp_cache(func=None, /, *, typed=False):', 'def decorator(func):', 'def inner(*args, **kwds):', 'def _deprecation_warning_for_no_type_params_passed(funcname: str) -> None:', 'def __repr__(self):', 'def _eval_type(t, globalns, localns, type_params=_sentinel, *, recursive_guard=frozenset()):', 'def __init_subclass__(cls, /, *args, **kwds):', 'def __iter__(self): raise TypeError()', 'def __init__(self, getitem):', 'def __getattr__(self, item):', 'def __mro_entries__(self, bases):', 'def __repr__(self):', 'def __reduce__(self):', 'def __call__(self, *args, **kwds):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __getitem__(self, parameters):', 'def __getitem__(self, parameters):', 'def __instancecheck__(self, obj):', 'def __repr__(self):', 'def __new__(cls, *args, **kwargs):', 'def NoReturn(self, parameters):', 'def stop() -> NoReturn:', 'def Never(self, parameters):', 'def never_call_me(arg: Never) -> None:', 'def int_or_str(arg: int | str) -> None:', 'def Self(self, parameters):', 'def return_self(self) -> Self:', 'def LiteralString(self, parameters):', 'def run_query(sql: LiteralString) -> None:', 'def caller(arbitrary_string: str, literal_string: LiteralString) -> None:', 'def ClassVar(self, parameters):', 'def Final(self, parameters):', 'def Union(self, parameters):', 'def _make_union(left, right):', 'def Optional(self, parameters):', 'def Literal(self, *parameters):', 'def validate_simple(data: Any) -> Literal[True]:  # always returns True', 'def open_helper(file: str, mode: MODE) -> str:', 'def TypeAlias(self, parameters):', 'def Concatenate(self, parameters):', 'def TypeGuard(self, parameters):', 'def is_str_list(val: list[object]) -> TypeGuard[list[str]]:', 'def func1(val: list[object]):', 'def TypeIs(self, parameters):', 'def is_parent(val: object) -> TypeIs[Parent]:', 'def run(arg: Child | Unrelated):', 'def __init__(self, arg, is_argument=True, module=None, *, is_class=False):', 'def _evaluate(self, globalns, localns, type_params=_sentinel, *, recursive_guard):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __repr__(self):', 'def _is_unpacked_typevartuple(x: Any) -> bool:', 'def _is_typevar_like(x: Any) -> bool:', 'def _typevar_subst(self, arg):', 'def _typevartuple_prepare_subst(self, alias, args):', 'def _paramspec_subst(self, arg):', 'def _paramspec_prepare_subst(self, alias, args):', 'def _generic_class_getitem(cls, args):', 'def _generic_init_subclass(cls, *args, **kwargs):', 'def _is_dunder(attr):', 'def __init__(self, origin, *, inst=True, name=None):', 'def __call__(self, *args, **kwargs):', 'def __mro_entries__(self, bases):', 'def __getattr__(self, attr):', 'def __setattr__(self, attr, val):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __dir__(self):', 'def __init__(self, origin, args, *, inst=True, name=None):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __or__(self, right):', 'def __ror__(self, left):', 'def __getitem__(self, args):', 'def _determine_new_args(self, args):', 'def _make_substitution(self, args, new_arg_by_param):', 'def copy_with(self, args):', 'def __repr__(self):', 'def __reduce__(self):', 'def __mro_entries__(self, bases):', 'def __iter__(self):', 'def __init__(self, origin, nparams, *, inst=True, name=None, defaults=()):', 'def __getitem__(self, params):', 'def copy_with(self, params):', 'def __repr__(self):', 'def __subclasscheck__(self, cls):', 'def __reduce__(self):', 'def __or__(self, right):', 'def __ror__(self, left):', 'def __init__(', 'def __instancecheck__(self, inst):', 'def __repr__(self):', 'def __reduce__(self):', 'def copy_with(self, params):', 'def __getitem__(self, params):', 'def __getitem_inner__(self, params):', 'def __getitem__(self, params):', 'def copy_with(self, params):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def __instancecheck__(self, obj):', 'def __subclasscheck__(self, cls):', 'def __reduce__(self):', 'def _value_and_type_iter(parameters):', 'def __eq__(self, other):', 'def __hash__(self):', 'def copy_with(self, params):', 'def Unpack(self, parameters):', 'def foo(**kwargs: Unpack[Movie]): ...', 'def __repr__(self):', 'def __getitem__(self, args):', 'def __typing_unpacked_tuple_args__(self):', 'def __typing_is_unpacked_typevartuple__(self):', 'def _get_protocol_attrs(cls):', 'def _no_init_or_replace_init(self, *args, **kwargs):', "def _caller(depth=1, default='__main__'):", 'def _allow_reckless_class_checks(depth=2):', 'def _lazy_load_getattr_static():', 'def _pickle_psargs(psargs):', 'def _pickle_pskwargs(pskwargs):', 'def _type_check_issubclass_arg_1(arg):', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def __init__(cls, *args, **kwargs):', 'def __subclasscheck__(cls, other):', 'def __instancecheck__(cls, instance):', 'def _proto_hook(cls, other):', 'def meth(self) -> int:', 'def meth(self) -> int:', 'def func(x: Proto) -> int:', 'def meth(self) -> T:', 'def __init_subclass__(cls, *args, **kwargs):', 'def __init__(self, origin, metadata):', 'def copy_with(self, params):', 'def __repr__(self):', 'def __reduce__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __getattr__(self, attr):', 'def __mro_entries__(self, bases):', 'def Annotated(self, *params):', 'def runtime_checkable(cls):', 'def close(self): ...', 'def cast(typ, val):', 'def assert_type(val, typ, /):', 'def greet(name: str) -> None:', 'def get_type_hints(obj, globalns=None, localns=None, include_extras=False):', 'def _strip_annotations(t):', 'def get_origin(tp):', 'def get_args(tp):', 'def is_typeddict(tp):', 'def assert_never(arg: Never, /) -> Never:', 'def int_or_str(arg: int | str) -> None:', 'def no_type_check(arg):', 'def no_type_check_decorator(decorator):', 'def wrapped_decorator(*args, **kwds):', 'def _overload_dummy(*args, **kwds):', 'def overload(func):', 'def utf8(value: None) -> None: ...', 'def utf8(value: bytes) -> bytes: ...', 'def utf8(value: str) -> bytes: ...', 'def utf8(value: None) -> None: ...', 'def utf8(value: bytes) -> bytes: ...', 'def utf8(value: str) -> bytes: ...', 'def utf8(value):', 'def get_overloads(func):', 'def clear_overloads():', 'def final(f):', 'def done(self) -> None:', 'def done(self) -> None:  # Error reported by type checker', 'def new_user[U](user_class: Type[U]) -> U:', 'def __int__(self) -> int:', 'def __float__(self) -> float:', 'def __complex__(self) -> complex:', 'def __bytes__(self) -> bytes:', 'def __index__(self) -> int:', 'def __abs__(self) -> T:', 'def __round__(self, ndigits: int = 0) -> T:', 'def _make_nmtuple(name, types, module, defaults = ()):', 'def __new__(cls, typename, bases, ns):', 'def NamedTuple(typename, fields=_sentinel, /, **kwargs):', 'def _namedtuple_mro_entries(bases):', 'def _get_typeddict_qualifiers(annotation_type):', 'def __new__(cls, name, bases, ns, total=True):', 'def __subclasscheck__(cls, other):', 'def TypedDict(typename, fields=_sentinel, /, *, total=True):', 'def Required(self, parameters):', 'def NotRequired(self, parameters):', 'def ReadOnly(self, parameters):', 'def mutate_movie(m: Movie) -> None:', 'def name_by_id(user_id: UserId) -> str:', 'def __init__(self, name, tp):', 'def __mro_entries__(self, bases):', 'def __init_subclass__(cls):', 'def __repr__(self):', 'def __reduce__(self):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def mode(self) -> str:', 'def name(self) -> str:', 'def close(self) -> None:', 'def closed(self) -> bool:', 'def fileno(self) -> int:', 'def flush(self) -> None:', 'def isatty(self) -> bool:', 'def read(self, n: int = -1) -> AnyStr:', 'def readable(self) -> bool:', 'def readline(self, limit: int = -1) -> AnyStr:', 'def readlines(self, hint: int = -1) -> List[AnyStr]:', 'def seek(self, offset: int, whence: int = 0) -> int:', 'def seekable(self) -> bool:', 'def tell(self) -> int:', 'def truncate(self, size: int = None) -> int:', 'def writable(self) -> bool:', 'def write(self, s: AnyStr) -> int:', 'def writelines(self, lines: List[AnyStr]) -> None:', "def __enter__(self) -> 'IO[AnyStr]':", 'def __exit__(self, type, value, traceback) -> None:', 'def write(self, s: Union[bytes, bytearray]) -> int:', "def __enter__(self) -> 'BinaryIO':", 'def buffer(self) -> BinaryIO:', 'def encoding(self) -> str:', 'def errors(self) -> Optional[str]:', 'def line_buffering(self) -> bool:', 'def newlines(self) -> Any:', "def __enter__(self) -> 'TextIO':", 'def reveal_type[T](obj: T, /) -> T:', 'def __call__[T](self, arg: T, /) -> T:', 'def dataclass_transform(', 'def create_model[T](cls: type[T]) -> type[T]:', 'def decorator(cls_or_fn):', 'def override[F: _Func](method: F, /) -> F:', 'def method(self) -> None:', 'def method(self) -> None:', 'def is_protocol(tp: type, /) -> bool:', 'def get_protocol_members(tp: type, /) -> frozenset[str]:', 'def __getattr__(attr):']

Analyzed C:\dev\adn_trash_code\python_libs\uuid.py:
Classes: ['class SafeUUID:', 'class UUID:']
Functions: ['def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,', 'def __getstate__(self):', 'def __setstate__(self, state):', 'def __eq__(self, other):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __le__(self, other):', 'def __ge__(self, other):', 'def __hash__(self):', 'def __int__(self):', 'def __repr__(self):', 'def __setattr__(self, name, value):', 'def __str__(self):', 'def bytes(self):', 'def bytes_le(self):', 'def fields(self):', 'def time_low(self):', 'def time_mid(self):', 'def time_hi_version(self):', 'def clock_seq_hi_variant(self):', 'def clock_seq_low(self):', 'def time(self):', 'def clock_seq(self):', 'def node(self):', 'def hex(self):', 'def urn(self):', 'def variant(self):', 'def version(self):', 'def _get_command_stdout(command, *args):', 'def _is_universal(mac):', 'def _find_mac_near_keyword(command, args, keywords, get_word_index):', 'def _parse_mac(word):', 'def _find_mac_under_heading(command, args, heading):', 'def _ifconfig_getnode():', 'def _ip_getnode():', 'def _arp_getnode():', 'def _lanscan_getnode():', 'def _netstat_getnode():', 'def _unix_getnode():', 'def _windll_getnode():', 'def _random_getnode():', 'def getnode():', 'def uuid1(node=None, clock_seq=None):', 'def uuid3(namespace, name):', 'def uuid4():', 'def uuid5(namespace, name):', 'def main():']

Analyzed C:\dev\adn_trash_code\python_libs\warnings.py:
Classes: ['class _OptionError(Exception):', 'class WarningMessage(object):', 'class catch_warnings(object):', 'class deprecated:', 'class A:']
Functions: ['def showwarning(message, category, filename, lineno, file=None, line=None):', 'def formatwarning(message, category, filename, lineno, line=None):', 'def _showwarnmsg_impl(msg):', 'def _formatwarnmsg_impl(msg):', 'def _showwarnmsg(msg):', 'def _formatwarnmsg(msg):', 'def filterwarnings(action, message="", category=Warning, module="", lineno=0,', 'def simplefilter(action, category=Warning, lineno=0, append=False):', 'def _add_filter(*item, append):', 'def resetwarnings():', 'def _processoptions(args):', 'def _setoption(arg):', 'def _getaction(action):', 'def _getcategory(category):', 'def _is_internal_filename(filename):', 'def _is_filename_to_skip(filename, skip_file_prefixes):', 'def _is_internal_frame(frame):', 'def _next_external_frame(frame, skip_file_prefixes):', 'def warn(message, category=None, stacklevel=1, source=None,', 'def warn_explicit(message, category, filename, lineno,', 'def __init__(self, message, category, filename, lineno, file=None,', 'def __str__(self):', 'def __init__(self, *, record=False, module=None,', 'def __repr__(self):', 'def __enter__(self):', 'def __exit__(self, *exc_info):', 'def f():', 'def g(x: int) -> int: ...', 'def g(x: str) -> int: ...', 'def __init__(', 'def __call__(self, arg, /):', 'def __new__(cls, *args, **kwargs):', 'def __init_subclass__(*args, **kwargs):', 'def __init_subclass__(*args, **kwargs):', 'def wrapper(*args, **kwargs):', 'def _deprecated(name, message=_DEPRECATED_MSG, *, remove, _version=sys.version_info):', 'def _warn_unawaited_coroutine(coro):', 'def extract():', 'def _filters_mutated():']

Analyzed C:\dev\adn_trash_code\python_libs\wave.py:
Classes: ['class Error(Exception):', 'class _Chunk:', 'class Wave_read:', 'class Wave_write:']
Functions: ['def _byteswap(data, width):', 'def __init__(self, file, align=True, bigendian=True, inclheader=False):', 'def getname(self):', 'def close(self):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def read(self, size=-1):', 'def skip(self):', 'def initfp(self, file):', 'def __init__(self, f):', 'def __del__(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def getfp(self):', 'def rewind(self):', 'def close(self):', 'def tell(self):', 'def getnchannels(self):', 'def getnframes(self):', 'def getsampwidth(self):', 'def getframerate(self):', 'def getcomptype(self):', 'def getcompname(self):', 'def getparams(self):', 'def getmarkers(self):', 'def getmark(self, id):', 'def setpos(self, pos):', 'def readframes(self, nframes):', 'def _read_fmt_chunk(self, chunk):', 'def __init__(self, f):', 'def initfp(self, file):', 'def __del__(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def setnchannels(self, nchannels):', 'def getnchannels(self):', 'def setsampwidth(self, sampwidth):', 'def getsampwidth(self):', 'def setframerate(self, framerate):', 'def getframerate(self):', 'def setnframes(self, nframes):', 'def getnframes(self):', 'def setcomptype(self, comptype, compname):', 'def getcomptype(self):', 'def getcompname(self):', 'def setparams(self, params):', 'def getparams(self):', 'def setmark(self, id, pos, name):', 'def getmark(self, id):', 'def getmarkers(self):', 'def tell(self):', 'def writeframesraw(self, data):', 'def writeframes(self, data):', 'def close(self):', 'def _ensure_header_written(self, datasize):', 'def _write_header(self, initlength):', 'def _patchheader(self):', 'def open(f, mode=None):']

Analyzed C:\dev\adn_trash_code\python_libs\weakref.py:
Classes: ['class WeakMethod(ref):', 'class WeakValueDictionary(_collections_abc.MutableMapping):', 'class KeyedRef(ref):', 'class WeakKeyDictionary(_collections_abc.MutableMapping):', 'class finalize:', 'class _Info:']
Functions: ['def __new__(cls, meth, callback=None):', 'def _cb(arg):', 'def __call__(self):', 'def __eq__(self, other):', 'def __ne__(self, other):', 'def __init__(self, other=(), /, **kw):', 'def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):', 'def _commit_removals(self, _atomic_removal=_remove_dead_weakref):', 'def __getitem__(self, key):', 'def __delitem__(self, key):', 'def __len__(self):', 'def __contains__(self, key):', 'def __repr__(self):', 'def __setitem__(self, key, value):', 'def copy(self):', 'def __deepcopy__(self, memo):', 'def get(self, key, default=None):', 'def items(self):', 'def keys(self):', 'def itervaluerefs(self):', 'def values(self):', 'def popitem(self):', 'def pop(self, key, *args):', 'def setdefault(self, key, default=None):', 'def update(self, other=None, /, **kwargs):', 'def valuerefs(self):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __new__(type, ob, callback, key):', 'def __init__(self, ob, callback, key):', 'def __init__(self, dict=None):', 'def remove(k, selfref=ref(self)):', 'def _commit_removals(self):', 'def _scrub_removals(self):', 'def __delitem__(self, key):', 'def __getitem__(self, key):', 'def __len__(self):', 'def __repr__(self):', 'def __setitem__(self, key, value):', 'def copy(self):', 'def __deepcopy__(self, memo):', 'def get(self, key, default=None):', 'def __contains__(self, key):', 'def items(self):', 'def keys(self):', 'def values(self):', 'def keyrefs(self):', 'def popitem(self):', 'def pop(self, key, *args):', 'def setdefault(self, key, default=None):', 'def update(self, dict=None, /, **kwargs):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def __init__(self, obj, func, /, *args, **kwargs):', 'def __call__(self, _=None):', 'def detach(self):', 'def peek(self):', 'def alive(self):', 'def atexit(self):', 'def atexit(self, value):', 'def __repr__(self):', 'def _select_for_exit(cls):', 'def _exitfunc(cls):']

Analyzed C:\dev\adn_trash_code\python_libs\webbrowser.py:
Classes: ['class Error(Exception):', 'class BaseBrowser:', 'class GenericBrowser(BaseBrowser):', 'class BackgroundBrowser(GenericBrowser):', 'class UnixBrowser(BaseBrowser):', 'class Mozilla(UnixBrowser):', 'class Epiphany(UnixBrowser):', 'class Chrome(UnixBrowser):', 'class Opera(UnixBrowser):', 'class Elinks(UnixBrowser):', 'class Konqueror(BaseBrowser):', 'class Edge(UnixBrowser):', 'class WindowsDefault(BaseBrowser):', 'class MacOSXOSAScript(BaseBrowser):', 'class IOSBrowser(BaseBrowser):']
Functions: ['def register(name, klass, instance=None, *, preferred=False):', 'def get(using=None):', 'def open(url, new=0, autoraise=True):', 'def open_new(url):', 'def open_new_tab(url):', 'def _synthesize(browser, *, preferred=False):', 'def __init__(self, name=""):', 'def open(self, url, new=0, autoraise=True):', 'def open_new(self, url):', 'def open_new_tab(self, url):', 'def __init__(self, name):', 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def _invoke(self, args, remote, autoraise, url=None):', 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def register_X_browsers():', 'def register_standard_browsers():', 'def open(self, url, new=0, autoraise=True):', "def __init__(self, name='default'):", 'def open(self, url, new=0, autoraise=True):', 'def open(self, url, new=0, autoraise=True):', 'def parse_args(arg_list: list[str] | None):', 'def main(arg_list: list[str] | None = None):']

Analyzed C:\dev\adn_trash_code\python_libs\zipapp.py:
Classes: ['class ZipAppError(ValueError):']
Functions: ['def _maybe_open(archive, mode):', 'def _write_file_prefix(f, interpreter):', 'def _copy_archive(archive, new_archive, interpreter=None):', 'def create_archive(source, target=None, interpreter=None, main=None,', 'def get_interpreter(archive):', 'def main(args=None):']

Analyzed C:\dev\adn_trash_code\python_libs\zipimport.py:
Classes: ['class ZipImportError(ImportError):', 'class zipimporter(_bootstrap_external._LoaderBasics):']
Functions: ['def __init__(self, path):', 'def find_spec(self, fullname, target=None):', 'def get_code(self, fullname):', 'def get_data(self, pathname):', 'def get_filename(self, fullname):', 'def get_source(self, fullname):', 'def is_package(self, fullname):', 'def load_module(self, fullname):', 'def get_resource_reader(self, fullname):', 'def _get_files(self):', 'def invalidate_caches(self):', 'def __repr__(self):', 'def _get_module_path(self, fullname):', 'def _is_dir(self, path):', 'def _get_module_info(self, fullname):', 'def _read_directory(archive):', 'def _get_decompress_func():', 'def _get_data(archive, toc_entry):', 'def _eq_mtime(t1, t2):', 'def _unmarshal_code(self, pathname, fullpath, fullname, data):', 'def _normalize_line_endings(source):', 'def _compile_source(pathname, source):', 'def _parse_dostime(d, t):', 'def _get_mtime_and_size_of_source(self, path):', 'def _get_pyc_source(self, path):', 'def _get_module_code(self, fullname):']

Analyzed C:\dev\adn_trash_code\python_libs\_aix_support.py:
Classes: []
Functions: ['def _read_cmd_output(commandstring, capture_stderr=False):', 'def _aix_tag(vrtl, bd):', 'def _aix_vrtl(vrmf):', 'def _aix_bos_rte():', 'def aix_platform():', 'def _aix_bgt():', 'def aix_buildtag():']

Analyzed C:\dev\adn_trash_code\python_libs\_android_support.py:
Classes: ['class TextLogStream(io.TextIOWrapper):', 'class BinaryLogStream(io.RawIOBase):', 'class Logcat:']
Functions: ['def init_streams(android_log_write, stdout_prio, stderr_prio):', 'def __init__(self, prio, tag, fileno=None, **kwargs):', 'def __repr__(self):', 'def write(self, s):', 'def _write_chunk(self, s):', 'def flush(self):', 'def line_buffering(self):', 'def __init__(self, prio, tag, fileno=None):', 'def __repr__(self):', 'def writable(self):', 'def write(self, b):', 'def fileno(self):', 'def __init__(self, android_log_write):', 'def write(self, prio, tag, message):']

Analyzed C:\dev\adn_trash_code\python_libs\_apple_support.py:
Classes: ['class SystemLog(io.TextIOWrapper):', 'class LogStream(io.RawIOBase):']
Functions: ['def init_streams(log_write, stdout_level, stderr_level):', 'def __init__(self, log_write, level, **kwargs):', 'def __repr__(self):', 'def write(self, s):', 'def __init__(self, log_write, level):', 'def __repr__(self):', 'def writable(self):', 'def write(self, b):']

Analyzed C:\dev\adn_trash_code\python_libs\_collections_abc.py:
Classes: ['class Hashable(metaclass=ABCMeta):', 'class Awaitable(metaclass=ABCMeta):', 'class Coroutine(Awaitable):', 'class AsyncIterable(metaclass=ABCMeta):', 'class AsyncIterator(AsyncIterable):', 'class AsyncGenerator(AsyncIterator):', 'class Iterable(metaclass=ABCMeta):', 'class Iterator(Iterable):', 'class Reversible(Iterable):', 'class Generator(Iterator):', 'class Sized(metaclass=ABCMeta):', 'class Container(metaclass=ABCMeta):', 'class Collection(Sized, Iterable, Container):', 'class Buffer(metaclass=ABCMeta):', 'class _CallableGenericAlias(GenericAlias):', 'class Callable(metaclass=ABCMeta):', 'class Set(Collection):', 'class MutableSet(Set):', 'class Mapping(Collection):', 'class MappingView(Sized):', 'class KeysView(MappingView, Set):', 'class ItemsView(MappingView, Set):', 'class ValuesView(MappingView, Collection):', 'class MutableMapping(Mapping):', 'class Sequence(Reversible, Collection):', 'class _DeprecateByteStringMeta(ABCMeta):', 'class ByteString(Sequence, metaclass=_DeprecateByteStringMeta):', 'class MutableSequence(Sequence):']
Functions: ['def _f(): pass', 'def _get_framelocalsproxy():', 'def _check_methods(C, *methods):', 'def __hash__(self):', 'def __subclasshook__(cls, C):', 'def __await__(self):', 'def __subclasshook__(cls, C):', 'def send(self, value):', 'def throw(self, typ, val=None, tb=None):', 'def close(self):', 'def __subclasshook__(cls, C):', 'def __aiter__(self):', 'def __subclasshook__(cls, C):', 'def __aiter__(self):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def __iter__(self):', 'def __subclasshook__(cls, C):', 'def __next__(self):', 'def __iter__(self):', 'def __subclasshook__(cls, C):', 'def __reversed__(self):', 'def __subclasshook__(cls, C):', 'def __next__(self):', 'def send(self, value):', 'def throw(self, typ, val=None, tb=None):', 'def close(self):', 'def __subclasshook__(cls, C):', 'def __len__(self):', 'def __subclasshook__(cls, C):', 'def __contains__(self, x):', 'def __subclasshook__(cls, C):', 'def __subclasshook__(cls, C):', 'def __buffer__(self, flags: int, /) -> memoryview:', 'def __subclasshook__(cls, C):', 'def __new__(cls, origin, args):', 'def __repr__(self):', 'def __reduce__(self):', 'def __getitem__(self, item):', 'def _is_param_expr(obj):', 'def _type_repr(obj):', 'def __call__(self, *args, **kwds):', 'def __subclasshook__(cls, C):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __gt__(self, other):', 'def __ge__(self, other):', 'def __eq__(self, other):', 'def _from_iterable(cls, it):', 'def __and__(self, other):', 'def isdisjoint(self, other):', 'def __or__(self, other):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __xor__(self, other):', 'def _hash(self):', 'def add(self, value):', 'def discard(self, value):', 'def remove(self, value):', 'def pop(self):', 'def clear(self):', 'def __ior__(self, it):', 'def __iand__(self, it):', 'def __ixor__(self, it):', 'def __isub__(self, it):', 'def __getitem__(self, key):', 'def get(self, key, default=None):', 'def __contains__(self, key):', 'def keys(self):', 'def items(self):', 'def values(self):', 'def __eq__(self, other):', 'def __init__(self, mapping):', 'def __len__(self):', 'def __repr__(self):', 'def _from_iterable(cls, it):', 'def __contains__(self, key):', 'def __iter__(self):', 'def _from_iterable(cls, it):', 'def __contains__(self, item):', 'def __iter__(self):', 'def __contains__(self, value):', 'def __iter__(self):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def pop(self, key, default=__marker):', 'def popitem(self):', 'def clear(self):', 'def update(self, other=(), /, **kwds):', 'def setdefault(self, key, default=None):', 'def __getitem__(self, index):', 'def __iter__(self):', 'def __contains__(self, value):', 'def __reversed__(self):', 'def index(self, value, start=0, stop=None):', 'def count(self, value):', 'def __new__(cls, name, bases, namespace, **kwargs):', 'def __instancecheck__(cls, instance):', 'def __setitem__(self, index, value):', 'def __delitem__(self, index):', 'def insert(self, index, value):', 'def append(self, value):', 'def clear(self):', 'def reverse(self):', 'def extend(self, values):', 'def pop(self, index=-1):', 'def remove(self, value):', 'def __iadd__(self, values):']

Analyzed C:\dev\adn_trash_code\python_libs\_colorize.py:
Classes: ['class ANSIColors:']
Functions: ['def get_colors(colorize: bool = False, *, file=None) -> ANSIColors:', 'def can_colorize(*, file=None) -> bool:']

Analyzed C:\dev\adn_trash_code\python_libs\_compat_pickle.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\_compression.py:
Classes: ['class BaseStream(io.BufferedIOBase):', 'class DecompressReader(io.RawIOBase):']
Functions: ['def _check_not_closed(self):', 'def _check_can_read(self):', 'def _check_can_write(self):', 'def _check_can_seek(self):', 'def readable(self):', 'def __init__(self, fp, decomp_factory, trailing_error=(), **decomp_args):', 'def close(self):', 'def seekable(self):', 'def readinto(self, b):', 'def read(self, size=-1):', 'def readall(self):', 'def _rewind(self):', 'def seek(self, offset, whence=io.SEEK_SET):', 'def tell(self):']

Analyzed C:\dev\adn_trash_code\python_libs\_ios_support.py:
Classes: []
Functions: ['def get_platform_ios():']

Analyzed C:\dev\adn_trash_code\python_libs\_markupbase.py:
Classes: ['class ParserBase:']
Functions: ['def __init__(self):', 'def reset(self):', 'def getpos(self):', 'def updatepos(self, i, j):', 'def parse_declaration(self, i):', 'def parse_marked_section(self, i, report=1):', 'def parse_comment(self, i, report=1):', 'def _parse_doctype_subset(self, i, declstartpos):', 'def _parse_doctype_element(self, i, declstartpos):', 'def _parse_doctype_attlist(self, i, declstartpos):', 'def _parse_doctype_notation(self, i, declstartpos):', 'def _parse_doctype_entity(self, i, declstartpos):', 'def _scan_name(self, i, declstartpos):', 'def unknown_decl(self, data):']

Analyzed C:\dev\adn_trash_code\python_libs\_opcode_metadata.py:
Classes: []
Functions: []

Analyzed C:\dev\adn_trash_code\python_libs\_osx_support.py:
Classes: []
Functions: ['def _find_executable(executable, path=None):', 'def _read_output(commandstring, capture_stderr=False):', 'def _find_build_tool(toolname):', 'def _get_system_version():', 'def _get_system_version_tuple():', 'def _remove_original_values(_config_vars):', 'def _save_modified_value(_config_vars, cv, newvalue):', 'def _default_sysroot(cc):', 'def _supports_universal_builds():', 'def _supports_arm64_builds():', 'def _find_appropriate_compiler(_config_vars):', 'def _remove_universal_flags(_config_vars):', 'def _remove_unsupported_archs(_config_vars):', 'def _override_all_archs(_config_vars):', 'def _check_for_unavailable_sdk(_config_vars):', 'def compiler_fixup(compiler_so, cc_args):', 'def customize_config_vars(_config_vars):', 'def customize_compiler(_config_vars):', 'def get_platform_osx(_config_vars, osname, release, machine):']

Analyzed C:\dev\adn_trash_code\python_libs\_pydatetime.py:
Classes: ['class timedelta:', 'class date:', 'class tzinfo:', 'class IsoCalendarDate(tuple):', 'class time:', 'class datetime(date):', 'class timezone(tzinfo):']
Functions: ['def _cmp(x, y):', 'def _get_class_module(self):', 'def _is_leap(year):', 'def _days_before_year(year):', 'def _days_in_month(year, month):', 'def _days_before_month(year, month):', 'def _ymd2ord(year, month, day):', 'def _ord2ymd(n):', 'def _build_struct_time(y, m, d, hh, mm, ss, dstflag):', "def _format_time(hh, mm, ss, us, timespec='auto'):", "def _format_offset(off, sep=':'):", 'def _wrap_strftime(object, format, timetuple):', 'def _is_ascii_digit(c):', 'def _find_isoformat_datetime_separator(dtstr):', 'def _parse_isoformat_date(dtstr):', 'def _parse_hh_mm_ss_ff(tstr):', 'def _parse_isoformat_time(tstr):', 'def _isoweek_to_gregorian(year, week, day):', 'def _check_tzname(name):', 'def _check_utc_offset(name, offset):', 'def _check_date_fields(year, month, day):', 'def _check_time_fields(hour, minute, second, microsecond, fold):', 'def _check_tzinfo_arg(tz):', 'def _divide_and_round(a, b):', 'def __new__(cls, days=0, seconds=0, microseconds=0,', 'def __repr__(self):', 'def __str__(self):', 'def plural(n):', 'def total_seconds(self):', 'def days(self):', 'def seconds(self):', 'def microseconds(self):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __rsub__(self, other):', 'def __neg__(self):', 'def __pos__(self):', 'def __abs__(self):', 'def __mul__(self, other):', 'def _to_microseconds(self):', 'def __floordiv__(self, other):', 'def __truediv__(self, other):', 'def __mod__(self, other):', 'def __divmod__(self, other):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other):', 'def __hash__(self):', 'def __bool__(self):', 'def _getstate(self):', 'def __reduce__(self):', 'def __new__(cls, year, month=None, day=None):', 'def fromtimestamp(cls, t):', 'def today(cls):', 'def fromordinal(cls, n):', 'def fromisoformat(cls, date_string):', 'def fromisocalendar(cls, year, week, day):', 'def __repr__(self):', 'def ctime(self):', 'def strftime(self, format):', 'def __format__(self, fmt):', 'def isoformat(self):', 'def year(self):', 'def month(self):', 'def day(self):', 'def timetuple(self):', 'def toordinal(self):', 'def replace(self, year=None, month=None, day=None):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other):', 'def __hash__(self):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def weekday(self):', 'def isoweekday(self):', 'def isocalendar(self):', 'def _getstate(self):', 'def __setstate(self, string):', 'def __reduce__(self):', 'def tzname(self, dt):', 'def utcoffset(self, dt):', 'def dst(self, dt):', 'def fromutc(self, dt):', 'def __reduce__(self):', 'def __new__(cls, year, week, weekday, /):', 'def year(self):', 'def week(self):', 'def weekday(self):', 'def __reduce__(self):', 'def __repr__(self):', 'def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0):', 'def hour(self):', 'def minute(self):', 'def second(self):', 'def microsecond(self):', 'def tzinfo(self):', 'def fold(self):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other, allow_mixed=False):', 'def __hash__(self):', 'def _tzstr(self):', 'def __repr__(self):', "def isoformat(self, timespec='auto'):", 'def fromisoformat(cls, time_string):', 'def strftime(self, format):', 'def __format__(self, fmt):', 'def utcoffset(self):', 'def tzname(self):', 'def dst(self):', 'def replace(self, hour=None, minute=None, second=None, microsecond=None,', 'def _getstate(self, protocol=3):', 'def __setstate(self, string, tzinfo):', 'def __reduce_ex__(self, protocol):', 'def __reduce__(self):', 'def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,', 'def hour(self):', 'def minute(self):', 'def second(self):', 'def microsecond(self):', 'def tzinfo(self):', 'def fold(self):', 'def _fromtimestamp(cls, t, utc, tz):', 'def fromtimestamp(cls, timestamp, tz=None):', 'def utcfromtimestamp(cls, t):', 'def now(cls, tz=None):', 'def utcnow(cls):', 'def combine(cls, date, time, tzinfo=True):', 'def fromisoformat(cls, date_string):', 'def timetuple(self):', 'def _mktime(self):', 'def local(u):', 'def timestamp(self):', 'def utctimetuple(self):', 'def date(self):', 'def time(self):', 'def timetz(self):', 'def replace(self, year=None, month=None, day=None, hour=None,', 'def _local_timezone(self):', 'def astimezone(self, tz=None):', 'def ctime(self):', "def isoformat(self, sep='T', timespec='auto'):", 'def __repr__(self):', 'def __str__(self):', 'def strptime(cls, date_string, format):', 'def utcoffset(self):', 'def tzname(self):', 'def dst(self):', 'def __eq__(self, other):', 'def __le__(self, other):', 'def __lt__(self, other):', 'def __ge__(self, other):', 'def __gt__(self, other):', 'def _cmp(self, other, allow_mixed=False):', 'def __add__(self, other):', 'def __sub__(self, other):', 'def __hash__(self):', 'def _getstate(self, protocol=3):', 'def __setstate(self, string, tzinfo):', 'def __reduce_ex__(self, protocol):', 'def __reduce__(self):', 'def _isoweek1monday(year):', 'def __new__(cls, offset, name=_Omitted):', 'def __init_subclass__(cls):', 'def _create(cls, offset, name=None):', 'def __getinitargs__(self):', 'def __eq__(self, other):', 'def __hash__(self):', 'def __repr__(self):', 'def __str__(self):', 'def utcoffset(self, dt):', 'def tzname(self, dt):', 'def dst(self, dt):', 'def fromutc(self, dt):', 'def _name_from_offset(delta):']

Analyzed C:\dev\adn_trash_code\python_libs\_pydecimal.py:
Classes: ['class DecimalException(ArithmeticError):', 'class Clamped(DecimalException):', 'class InvalidOperation(DecimalException):', 'class ConversionSyntax(InvalidOperation):', 'class DivisionByZero(DecimalException, ZeroDivisionError):', 'class DivisionImpossible(InvalidOperation):', 'class DivisionUndefined(InvalidOperation, ZeroDivisionError):', 'class Inexact(DecimalException):', 'class InvalidContext(InvalidOperation):', 'class Rounded(DecimalException):', 'class Subnormal(DecimalException):', 'class Overflow(Inexact, Rounded):', 'class Underflow(Inexact, Rounded, Subnormal):', 'class FloatOperation(DecimalException, TypeError):', 'class Decimal(object):', 'class _ContextManager(object):', 'class Context(object):', 'class _WorkRep(object):', 'class _Log10Memoize(object):']
Functions: ['def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, sign, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, *args):', 'def handle(self, context, sign, *args):', 'def getcontext():', 'def setcontext(context):', 'def localcontext(ctx=None, **kwargs):', 'def sin(x):', 'def sin(x):', 'def __new__(cls, value="0", context=None):', 'def from_float(cls, f):', 'def _isnan(self):', 'def _isinfinity(self):', 'def _check_nans(self, other=None, context=None):', 'def _compare_check_nans(self, other, context):', 'def __bool__(self):', 'def _cmp(self, other):', 'def __eq__(self, other, context=None):', 'def __lt__(self, other, context=None):', 'def __le__(self, other, context=None):', 'def __gt__(self, other, context=None):', 'def __ge__(self, other, context=None):', 'def compare(self, other, context=None):', 'def __hash__(self):', 'def as_tuple(self):', 'def as_integer_ratio(self):', 'def __repr__(self):', 'def __str__(self, eng=False, context=None):', 'def to_eng_string(self, context=None):', 'def __neg__(self, context=None):', 'def __pos__(self, context=None):', 'def __abs__(self, round=True, context=None):', 'def __add__(self, other, context=None):', 'def __sub__(self, other, context=None):', 'def __rsub__(self, other, context=None):', 'def __mul__(self, other, context=None):', 'def __truediv__(self, other, context=None):', 'def _divide(self, other, context):', 'def __rtruediv__(self, other, context=None):', 'def __divmod__(self, other, context=None):', 'def __rdivmod__(self, other, context=None):', 'def __mod__(self, other, context=None):', 'def __rmod__(self, other, context=None):', 'def remainder_near(self, other, context=None):', 'def __floordiv__(self, other, context=None):', 'def __rfloordiv__(self, other, context=None):', 'def __float__(self):', 'def __int__(self):', 'def real(self):', 'def imag(self):', 'def conjugate(self):', 'def __complex__(self):', 'def _fix_nan(self, context):', 'def _fix(self, context):', 'def _round_down(self, prec):', 'def _round_up(self, prec):', 'def _round_half_up(self, prec):', 'def _round_half_down(self, prec):', 'def _round_half_even(self, prec):', 'def _round_ceiling(self, prec):', 'def _round_floor(self, prec):', 'def _round_05up(self, prec):', 'def __round__(self, n=None):', 'def __floor__(self):', 'def __ceil__(self):', 'def fma(self, other, third, context=None):', 'def _power_modulo(self, other, modulo, context=None):', 'def _power_exact(self, other, p):', 'def __pow__(self, other, modulo=None, context=None):', 'def __rpow__(self, other, context=None):', 'def normalize(self, context=None):', 'def quantize(self, exp, rounding=None, context=None):', 'def same_quantum(self, other, context=None):', 'def _rescale(self, exp, rounding):', 'def _round(self, places, rounding):', 'def to_integral_exact(self, rounding=None, context=None):', 'def to_integral_value(self, rounding=None, context=None):', 'def sqrt(self, context=None):', 'def max(self, other, context=None):', 'def min(self, other, context=None):', 'def _isinteger(self):', 'def _iseven(self):', 'def adjusted(self):', 'def canonical(self):', 'def compare_signal(self, other, context=None):', 'def compare_total(self, other, context=None):', 'def compare_total_mag(self, other, context=None):', 'def copy_abs(self):', 'def copy_negate(self):', 'def copy_sign(self, other, context=None):', 'def exp(self, context=None):', 'def is_canonical(self):', 'def is_finite(self):', 'def is_infinite(self):', 'def is_nan(self):', 'def is_normal(self, context=None):', 'def is_qnan(self):', 'def is_signed(self):', 'def is_snan(self):', 'def is_subnormal(self, context=None):', 'def is_zero(self):', 'def _ln_exp_bound(self):', 'def ln(self, context=None):', 'def _log10_exp_bound(self):', 'def log10(self, context=None):', 'def logb(self, context=None):', 'def _islogical(self):', 'def _fill_logical(self, context, opa, opb):', 'def logical_and(self, other, context=None):', 'def logical_invert(self, context=None):', 'def logical_or(self, other, context=None):', 'def logical_xor(self, other, context=None):', 'def max_mag(self, other, context=None):', 'def min_mag(self, other, context=None):', 'def next_minus(self, context=None):', 'def next_plus(self, context=None):', 'def next_toward(self, other, context=None):', 'def number_class(self, context=None):', 'def radix(self):', 'def rotate(self, other, context=None):', 'def scaleb(self, other, context=None):', 'def shift(self, other, context=None):', 'def __reduce__(self):', 'def __copy__(self):', 'def __deepcopy__(self, memo):', 'def __format__(self, specifier, context=None, _localeconv=None):', 'def _dec_from_triple(sign, coefficient, exponent, special=False):', 'def __init__(self, new_context):', 'def __enter__(self):', 'def __exit__(self, t, v, tb):', 'def __init__(self, prec=None, rounding=None, Emin=None, Emax=None,', 'def _set_integer_check(self, name, value, vmin, vmax):', 'def _set_signal_dict(self, name, d):', 'def __setattr__(self, name, value):', 'def __delattr__(self, name):', 'def __reduce__(self):', 'def __repr__(self):', 'def clear_flags(self):', 'def clear_traps(self):', 'def _shallow_copy(self):', 'def copy(self):', 'def _raise_error(self, condition, explanation = None, *args):', 'def _ignore_all_flags(self):', 'def _ignore_flags(self, *flags):', 'def _regard_flags(self, *flags):', 'def Etiny(self):', 'def Etop(self):', 'def _set_rounding(self, type):', "def create_decimal(self, num='0'):", 'def create_decimal_from_float(self, f):', 'def abs(self, a):', 'def add(self, a, b):', 'def _apply(self, a):', 'def canonical(self, a):', 'def compare(self, a, b):', 'def compare_signal(self, a, b):', 'def compare_total(self, a, b):', 'def compare_total_mag(self, a, b):', 'def copy_abs(self, a):', 'def copy_decimal(self, a):', 'def copy_negate(self, a):', 'def copy_sign(self, a, b):', 'def divide(self, a, b):', 'def divide_int(self, a, b):', 'def divmod(self, a, b):', 'def exp(self, a):', 'def fma(self, a, b, c):', 'def is_canonical(self, a):', 'def is_finite(self, a):', 'def is_infinite(self, a):', 'def is_nan(self, a):', 'def is_normal(self, a):', 'def is_qnan(self, a):', 'def is_signed(self, a):', 'def is_snan(self, a):', 'def is_subnormal(self, a):', 'def is_zero(self, a):', 'def ln(self, a):', 'def log10(self, a):', 'def logb(self, a):', 'def logical_and(self, a, b):', 'def logical_invert(self, a):', 'def logical_or(self, a, b):', 'def logical_xor(self, a, b):', 'def max(self, a, b):', 'def max_mag(self, a, b):', 'def min(self, a, b):', 'def min_mag(self, a, b):', 'def minus(self, a):', 'def multiply(self, a, b):', 'def next_minus(self, a):', 'def next_plus(self, a):', 'def next_toward(self, a, b):', 'def normalize(self, a):', 'def number_class(self, a):', 'def plus(self, a):', 'def power(self, a, b, modulo=None):', 'def quantize(self, a, b):', 'def radix(self):', 'def remainder(self, a, b):', 'def remainder_near(self, a, b):', 'def rotate(self, a, b):', 'def same_quantum(self, a, b):', 'def scaleb (self, a, b):', 'def shift(self, a, b):', 'def sqrt(self, a):', 'def subtract(self, a, b):', 'def to_eng_string(self, a):', 'def to_sci_string(self, a):', 'def to_integral_exact(self, a):', 'def to_integral_value(self, a):', 'def __init__(self, value=None):', 'def __repr__(self):', 'def _normalize(op1, op2, prec = 0):', 'def _decimal_lshift_exact(n, e):', 'def _sqrt_nearest(n, a):', 'def _rshift_nearest(x, shift):', 'def _div_nearest(a, b):', 'def _ilog(x, M, L = 8):', 'def _dlog10(c, e, p):', 'def _dlog(c, e, p):', 'def __init__(self):', 'def getdigits(self, p):', 'def _iexp(x, M, L=8):', 'def _dexp(c, e, p):', 'def _dpower(xc, xe, yc, ye, p):', 'def _log10_lb(c, correction = {', 'def _convert_other(other, raiseit=False, allow_float=False):', 'def _convert_for_comparison(self, other, equality_op=False):', 'def _parse_format_specifier(format_spec, _localeconv=None):', 'def _format_align(sign, body, spec):', 'def _group_lengths(grouping):', 'def _insert_thousands_sep(digits, spec, min_width=1):', 'def _format_sign(is_negative, spec):', 'def _format_number(is_negative, intpart, fracpart, exp, spec):']

Analyzed C:\dev\adn_trash_code\python_libs\_pyio.py:
Classes: ['class UnsupportedOperation(OSError, ValueError):', 'class IOBase(metaclass=abc.ABCMeta):', 'class RawIOBase(IOBase):', 'class BufferedIOBase(IOBase):', 'class _BufferedIOMixin(BufferedIOBase):', 'class BytesIO(BufferedIOBase):', 'class BufferedReader(_BufferedIOMixin):', 'class BufferedWriter(_BufferedIOMixin):', 'class BufferedRWPair(BufferedIOBase):', 'class BufferedRandom(BufferedWriter, BufferedReader):', 'class FileIO(RawIOBase):', 'class TextIOBase(IOBase):', 'class IncrementalNewlineDecoder(codecs.IncrementalDecoder):', 'class TextIOWrapper(TextIOBase):', 'class StringIO(TextIOWrapper):']
Functions: ['def text_encoding(encoding, stacklevel=2):', 'def open(file, mode="r", buffering=-1, encoding=None, errors=None,', 'def _open_code_with_warning(path):', 'def _unsupported(self, name):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def flush(self):', 'def close(self):', 'def __del__(self):', 'def seekable(self):', 'def _checkSeekable(self, msg=None):', 'def readable(self):', 'def _checkReadable(self, msg=None):', 'def writable(self):', 'def _checkWritable(self, msg=None):', 'def closed(self):', 'def _checkClosed(self, msg=None):', "def __enter__(self):  # That's a forward reference", 'def __exit__(self, *args):', 'def fileno(self):', 'def isatty(self):', 'def readline(self, size=-1):', 'def nreadahead():', 'def nreadahead():', 'def __iter__(self):', 'def __next__(self):', 'def readlines(self, hint=None):', 'def writelines(self, lines):', 'def read(self, size=-1):', 'def readall(self):', 'def readinto(self, b):', 'def write(self, b):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def readinto(self, b):', 'def readinto1(self, b):', 'def _readinto(self, b, read1):', 'def write(self, b):', 'def detach(self):', 'def __init__(self, raw):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def flush(self):', 'def close(self):', 'def detach(self):', 'def seekable(self):', 'def raw(self):', 'def closed(self):', 'def name(self):', 'def mode(self):', 'def __getstate__(self):', 'def __repr__(self):', 'def fileno(self):', 'def isatty(self):', 'def __init__(self, initial_bytes=None):', 'def __getstate__(self):', 'def getvalue(self):', 'def getbuffer(self):', 'def close(self):', 'def read(self, size=-1):', 'def read1(self, size=-1):', 'def write(self, b):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def readable(self):', 'def writable(self):', 'def seekable(self):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def readable(self):', 'def _reset_read_buf(self):', 'def read(self, size=None):', 'def _read_unlocked(self, n=None):', 'def peek(self, size=0):', 'def _peek_unlocked(self, n=0):', 'def read1(self, size=-1):', 'def _readinto(self, buf, read1):', 'def tell(self):', 'def seek(self, pos, whence=0):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def writable(self):', 'def write(self, b):', 'def truncate(self, pos=None):', 'def flush(self):', 'def _flush_unlocked(self):', 'def tell(self):', 'def seek(self, pos, whence=0):', 'def close(self):', 'def __init__(self, reader, writer, buffer_size=DEFAULT_BUFFER_SIZE):', 'def read(self, size=-1):', 'def readinto(self, b):', 'def write(self, b):', 'def peek(self, size=0):', 'def read1(self, size=-1):', 'def readinto1(self, b):', 'def readable(self):', 'def writable(self):', 'def flush(self):', 'def close(self):', 'def isatty(self):', 'def closed(self):', 'def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):', 'def seek(self, pos, whence=0):', 'def tell(self):', 'def truncate(self, pos=None):', 'def read(self, size=None):', 'def readinto(self, b):', 'def peek(self, size=0):', 'def read1(self, size=-1):', 'def readinto1(self, b):', 'def write(self, b):', "def __init__(self, file, mode='r', closefd=True, opener=None):", 'def __del__(self):', 'def __getstate__(self):', 'def __repr__(self):', 'def _checkReadable(self):', 'def _checkWritable(self, msg=None):', 'def read(self, size=None):', 'def readall(self):', 'def readinto(self, b):', 'def write(self, b):', 'def seek(self, pos, whence=SEEK_SET):', 'def tell(self):', 'def truncate(self, size=None):', 'def close(self):', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def fileno(self):', 'def isatty(self):', 'def closefd(self):', 'def mode(self):', 'def read(self, size=-1):', 'def write(self, s):', 'def truncate(self, pos=None):', 'def readline(self):', 'def detach(self):', 'def encoding(self):', 'def newlines(self):', 'def errors(self):', "def __init__(self, decoder, translate, errors='strict'):", 'def decode(self, input, final=False):', 'def getstate(self):', 'def setstate(self, state):', 'def reset(self):', 'def newlines(self):', 'def __init__(self, buffer, encoding=None, errors=None, newline=None,', 'def _check_newline(self, newline):', 'def _configure(self, encoding=None, errors=None, newline=None,', 'def __repr__(self):', 'def encoding(self):', 'def errors(self):', 'def line_buffering(self):', 'def write_through(self):', 'def buffer(self):', 'def reconfigure(self, *,', 'def seekable(self):', 'def readable(self):', 'def writable(self):', 'def flush(self):', 'def close(self):', 'def closed(self):', 'def name(self):', 'def fileno(self):', 'def isatty(self):', 'def write(self, s):', 'def _get_encoder(self):', 'def _get_decoder(self):', 'def _set_decoded_chars(self, chars):', 'def _get_decoded_chars(self, n=None):', 'def _get_locale_encoding(self):', 'def _rewind_decoded_chars(self, n):', 'def _read_chunk(self):', 'def _pack_cookie(self, position, dec_flags=0,', 'def _unpack_cookie(self, bigint):', 'def tell(self):', 'def truncate(self, pos=None):', 'def detach(self):', 'def seek(self, cookie, whence=0):', 'def _reset_encoder(position):', 'def read(self, size=None):', 'def __next__(self):', 'def readline(self, size=None):', 'def newlines(self):', 'def __init__(self, initial_value="", newline="\\n"):', 'def getvalue(self):', 'def __repr__(self):', 'def errors(self):', 'def encoding(self):', 'def detach(self):']

Analyzed C:\dev\adn_trash_code\python_libs\_pylong.py:
Classes: []
Functions: ['def compute_powers(w, base, more_than, show=False):', 'def int_to_decimal(n):', 'def inner(n, w):', 'def int_to_decimal_string(n):', 'def inner(n, w):', 'def _str_to_int_inner(s):', 'def inner(a, b):', 'def int_from_string(s):', 'def str_to_int(s):', 'def _div2n1n(a, b, n):', 'def _div3n2n(a12, a3, b, b1, b2, n):', 'def _int2digits(a, n):', 'def inner(x, L, R):', 'def _digits2int(digits, n):', 'def inner(L, R):', 'def _divmod_pos(a, b):', 'def int_divmod(a, b):']

Analyzed C:\dev\adn_trash_code\python_libs\_py_abc.py:
Classes: ['class ABCMeta(type):']
Functions: ['def get_cache_token():', 'def __new__(mcls, name, bases, namespace, /, **kwargs):', 'def register(cls, subclass):', 'def _dump_registry(cls, file=None):', 'def _abc_registry_clear(cls):', 'def _abc_caches_clear(cls):', 'def __instancecheck__(cls, instance):', 'def __subclasscheck__(cls, subclass):']

Analyzed C:\dev\adn_trash_code\python_libs\_sitebuiltins.py:
Classes: ['class Quitter(object):', 'class _Printer(object):', 'class _Helper(object):']
Functions: ['def __init__(self, name, eof):', 'def __repr__(self):', 'def __call__(self, code=None):', 'def __init__(self, name, data, files=(), dirs=()):', 'def __setup(self):', 'def __repr__(self):', 'def __call__(self):', 'def __repr__(self):', 'def __call__(self, *args, **kwds):']

Analyzed C:\dev\adn_trash_code\python_libs\_strptime.py:
Classes: ['class LocaleTime(object):', 'class TimeRE(dict):']
Functions: ['def _getlang():', 'def _findall(haystack, needle):', 'def __init__(self):', 'def __calc_weekday(self):', 'def __calc_month(self):', 'def __calc_am_pm(self):', 'def __calc_date_time(self):', 'def __find_month_format(self, directive):', 'def __find_weekday_format(self, directive):', 'def __calc_timezone(self):', 'def __init__(self, locale_time=None):', 'def __seqToRE(self, to_convert, directive):', 'def pattern(self, format):', 'def repl(m):', 'def compile(self, format):', 'def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):', 'def _strptime(data_string, format="%a %b %d %H:%M:%S %Y"):', 'def _strptime_time(data_string, format="%a %b %d %H:%M:%S %Y"):', 'def _strptime_datetime(cls, data_string, format="%a %b %d %H:%M:%S %Y"):']

Analyzed C:\dev\adn_trash_code\python_libs\_threading_local.py:
Classes: ['class _localimpl:', 'class local:']
Functions: ['def __init__(self):', 'def get_dict(self):', 'def create_dict(self):', 'def local_deleted(_, key=key):', 'def thread_deleted(_, idt=idt):', 'def _patch(self):', 'def __new__(cls, /, *args, **kw):', 'def __getattribute__(self, name):', 'def __setattr__(self, name, value):', 'def __delattr__(self, name):']

Analyzed C:\dev\adn_trash_code\python_libs\_weakrefset.py:
Classes: ['class _IterationGuard:', 'class WeakSet:']
Functions: ['def __init__(self, weakcontainer):', 'def __enter__(self):', 'def __exit__(self, e, t, b):', 'def __init__(self, data=None):', 'def _remove(item, selfref=ref(self)):', 'def _commit_removals(self):', 'def __iter__(self):', 'def __len__(self):', 'def __contains__(self, item):', 'def __reduce__(self):', 'def add(self, item):', 'def clear(self):', 'def copy(self):', 'def pop(self):', 'def remove(self, item):', 'def discard(self, item):', 'def update(self, other):', 'def __ior__(self, other):', 'def difference(self, other):', 'def difference_update(self, other):', 'def __isub__(self, other):', 'def intersection(self, other):', 'def intersection_update(self, other):', 'def __iand__(self, other):', 'def issubset(self, other):', 'def __lt__(self, other):', 'def issuperset(self, other):', 'def __gt__(self, other):', 'def __eq__(self, other):', 'def symmetric_difference(self, other):', 'def symmetric_difference_update(self, other):', 'def __ixor__(self, other):', 'def union(self, other):', 'def isdisjoint(self, other):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\__future__.py:
Classes: ['class _Feature:']
Functions: ['def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):', 'def getOptionalRelease(self):', 'def getMandatoryRelease(self):', 'def __repr__(self):']

Analyzed C:\dev\adn_trash_code\python_libs\__hello__.py:
Classes: ['class TestFrozenUtf8_1:', 'class TestFrozenUtf8_2:', 'class TestFrozenUtf8_4:']
Functions: ['def main():']

Analyzed C:\dev\adn_trash_code\python_libs\os.py:
Classes: ['class _Environ(MutableMapping):', 'class _wrap_close:', 'class PathLike(abc.ABC):', 'class _AddedDllDirectory:']
Functions: ['def _exists(name):', 'def _get_exports_list(module):', 'def _add(str, fn):', 'def makedirs(name, mode=0o777, exist_ok=False):', 'def removedirs(name):', 'def renames(old, new):', 'def walk(top, topdown=True, onerror=None, followlinks=False):', 'def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):', 'def _fwalk(stack, isbytes, topdown, onerror, follow_symlinks):', 'def execl(file, *args):', 'def execle(file, *args):', 'def execlp(file, *args):', 'def execlpe(file, *args):', 'def execvp(file, args):', 'def execvpe(file, args, env):', 'def _execvpe(file, args, env=None):', 'def get_exec_path(env=None):', 'def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue):', 'def __getitem__(self, key):', 'def __setitem__(self, key, value):', 'def __delitem__(self, key):', 'def __iter__(self):', 'def __len__(self):', 'def __repr__(self):', 'def copy(self):', 'def setdefault(self, key, value):', 'def __ior__(self, other):', 'def __or__(self, other):', 'def __ror__(self, other):', 'def _createenviron():', 'def check_str(value):', 'def encodekey(key):', 'def encode(value):', 'def decode(value):', 'def getenv(key, default=None):', 'def _check_bytes(value):', 'def getenvb(key, default=None):', 'def _fscodec():', 'def fsencode(filename):', 'def fsdecode(filename):', 'def _spawnvef(mode, file, args, env, func):', 'def spawnv(mode, file, args):', 'def spawnve(mode, file, args, env):', 'def spawnvp(mode, file, args):', 'def spawnvpe(mode, file, args, env):', 'def spawnl(mode, file, *args):', 'def spawnle(mode, file, *args):', 'def spawnlp(mode, file, *args):', 'def spawnlpe(mode, file, *args):', 'def popen(cmd, mode="r", buffering=-1):', 'def __init__(self, stream, proc):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __getattr__(self, name):', 'def __iter__(self):', 'def fdopen(fd, mode="r", buffering=-1, encoding=None, *args, **kwargs):', 'def _fspath(path):', 'def __fspath__(self):', 'def __subclasshook__(cls, subclass):', 'def __init__(self, path, cookie, remove_dll_directory):', 'def close(self):', 'def __enter__(self):', 'def __exit__(self, *args):', 'def __repr__(self):', 'def add_dll_directory(path):', 'def process_cpu_count():']

