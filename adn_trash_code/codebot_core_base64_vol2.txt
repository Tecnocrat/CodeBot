gICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAidyIpIGFzIGY6DQogICAgICAgICAgICAgICAgZi53cml0ZShmIiMgUGxhY2Vob2xkZXIgZm9yIHtmaWxlfVxuIikNCiAgICAgICAgICAgIHByaW50KGYiQ3JlYXRlZCBmaWxlOiB7ZmlsZV9wYXRofSIpDQogICAgcHJpbnQoIlByb2plY3Qgc3RydWN0dXJlIHNldHVwIGNvbXBsZXRlISIpDQoNCmRlZiBtb2R1bGFyaXplX2Z1bmN0aW9ucyhtb2R1bGVzX2ZvbGRlcj0ibW9kdWxlcyIsIG1haW5fc2NyaXB0PU5vbmUpOg0KICAgIGlmIG1haW5fc2NyaXB0IGlzIE5vbmU6DQogICAgICAgIG1haW5fc2NyaXB0ID0gb3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKQ0KICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKG1vZHVsZXNfZm9sZGVyKToNCiAgICAgICAgYWx0ZXJuYXRpdmUgPSBvcy5wYXRoLmpvaW4oIkNvZGVCb3QiLCBtb2R1bGVzX2ZvbGRlcikNCiAgICAgICAgaWYgb3MucGF0aC5pc2RpcihhbHRlcm5hdGl2ZSk6DQogICAgICAgICAgICBtb2R1bGVzX2ZvbGRlciA9IGFsdGVybmF0aXZlDQogICAgbW9kdWxlX21hcHBpbmcgPSB7DQogICAgICAgICJnZW5lcmF0ZV9zeW1ib2xfbGlicmFyeSI6ICJmdW5jdGlvbnMucHkiLA0KICAgICAgICAic3VtbWFyaXplX3J1bnRpbWUiOiAic3VtbWFyaXphdGlvbi5weSIsDQogICAgICAgICJjb21wcmVzc19saWJyYXJpZXMiOiAiY29tcHJlc3Npb24ucHkiLA0KICAgICAgICAiZGVjb21wcmVzc19saWJyYXJ5IjogImNvbXByZXNzaW9uLnB5IiwNCiAgICAgICAgIm1vbml0b3JfcmVzb3VyY2VzIjogInJlc291cmNlcy5weSIsDQogICAgICAgICJzZXR1cF9wcm9qZWN0X3N0cnVjdHVyZSI6ICJmaWxlX21hbmFnZXIucHkiDQogICAgfQ0KICAgIHByaW50KCJcbk1vZHVsYXJpemluZyBmdW5jdGlvbnMgZnJvbSB0aGUgbWFpbiBzY3JpcHQuLi4iKQ0KICAgIHRyeToNCiAgICAgICAgd2l0aCBvcGVuKG1haW5fc2NyaXB0LCAiciIpIGFzIG1haW5fZmlsZToNCiAgICAgICAgICAgIG1haW5fbGluZXMgPSBtYWluX2ZpbGUucmVhZGxpbmVzKCkNCiAgICAgICAgZm9yIGZ1bmNfbmFtZSwgbW9kdWxlX2ZpbGUgaW4gbW9kdWxlX21hcHBpbmcuaXRlbXMoKToNCiAgICAgICAgICAgIG1vZHVsZV9wYXRoID0gb3MucGF0aC5qb2luKG1vZHVsZXNfZm9sZGVyLCBtb2R1bGVfZmlsZSkNCiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKG1vZHVsZV9wYXRoKToNCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4obW9kdWxlX3BhdGgsICJyIikgYXMgbW9kdWxlOg0KICAgICAgICAgICAgICAgICAgICBtb2R1bGVfY29udGVudCA9IG1vZHVsZS5yZWFkKCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgbW9kdWxlX2NvbnRlbnQgPSAiIg0KICAgICAgICAgICAgd2l0aCBvcGVuKG1vZHVsZV9wYXRoLCAiYSIpIGFzIG1vZHVsZToNCiAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiBtYWluX2xpbmVzOg0KICAgICAgICAgICAgICAgICAgICBpZiBmImRlZiB7ZnVuY19uYW1lfSIgaW4gbGluZSBhbmQgZiJkZWYge2Z1bmNfbmFtZX0iIG5vdCBpbiBtb2R1bGVfY29udGVudDoNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS53cml0ZShsaW5lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJNb3ZlZCB7ZnVuY19uYW1lfSB0byB7bW9kdWxlX2ZpbGV9IikNCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6DQogICAgICAgIHByaW50KGYiTWFpbiBzY3JpcHQgJ3ttYWluX3NjcmlwdH0nIG5vdCBmb3VuZC4gQ2Fubm90IG1vZHVsYXJpemUgZnVuY3Rpb25zLiIpDQoNCmRlZiBjb21wcmVzc19hbmRfZW5jb2RlX3NjcmlwdChzY3JpcHRfcGF0aD1Ob25lLCB6aXBfbmFtZT0iY29kZWJvdF9jb3JlLnppcCIsIG91dHB1dF9maWxlX2Jhc2U9ImNvZGVib3RfY29yZV9iYXNlNjRfdm9sIik6DQogICAgaWYgc2NyaXB0X3BhdGggaXMgTm9uZToNCiAgICAgICAgc2NyaXB0X3BhdGggPSBvcy5wYXRoLmFic3BhdGgoX19maWxlX18pDQogICAgemlwX3BhdGggPSBvcy5wYXRoLmpvaW4oQURCX0RJUiwgemlwX25hbWUpDQogICAgd2l0aCB6aXBmaWxlLlppcEZpbGUoemlwX3BhdGgsICJ3IikgYXMgemlwZjoNCiAgICAgICAgemlwZi53cml0ZShzY3JpcHRfcGF0aCwgYXJjbmFtZT0iY29kZWJvdF9jb3JlLnB5IikNCiAgICBwcmludChmIlNjcmlwdCBjb21wcmVzc2VkIGludG86IHt6aXBfbmFtZX0iKQ0KICAgIHdpdGggb3Blbih6aXBfcGF0aCwgInJiIikgYXMgemlwX2ZpbGU6DQogICAgICAgIGVuY29kZWQgPSBiYXNlNjQuYjY0ZW5jb2RlKHppcF9maWxlLnJlYWQoKSkuZGVjb2RlKCJ1dGYtOCIpDQogICAgdm9sdW1lX2ZpbGVzID0gc3BsaXRfYW5kX3NhdmVfYmFzZTY0KGVuY29kZWQsIHZvbHVtZV9iYXNlPW91dHB1dF9maWxlX2Jhc2UsIGNodW5rX3NpemU9OTk5OSkNCiAgICBwcmludCgiQmFzZTY0LWVuY29kZWQgc2NyaXB0IGhhcyBiZWVuIHNwbGl0IGludG8gdm9sdW1lcy4iKQ0KICAgIHJldHVybiB2b2x1bWVfZmlsZXMNCg0KZGVmIHNwbGl0X2FuZF9zYXZlX2Jhc2U2NChlbmNvZGVkX3RleHQsIHZvbHVtZV9iYXNlPSJjb2RlYm90X2NvcmVfYmFzZTY0X3ZvbCIsIGNodW5rX3NpemU9OTk5OSk6DQogICAgdm9sdW1lcyA9IFtlbmNvZGVkX3RleHRbaTppK2NodW5rX3NpemVdIGZvciBpIGluIHJhbmdlKDAsIGxlbihlbmNvZGVkX3RleHQpLCBjaHVua19zaXplKV0NCiAgICB2b2x1bWVfZmlsZXMgPSBbXQ0KICAgIGZvciBpbmRleCwgY2h1bmsgaW4gZW51bWVyYXRlKHZvbHVtZXMsIHN0YXJ0PTEpOg0KICAgICAgICBmaWxlbmFtZSA9IGYie3ZvbHVtZV9iYXNlfXtpbmRleH0udHh0Ig0KICAgICAgICBvdXRwdXRfcGF0aCA9IG9zLnBhdGguam9pbihBREJfRElSLCBmaWxlbmFtZSkNCiAgICAgICAgd2l0aCBvcGVuKG91dHB1dF9wYXRoLCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6DQogICAgICAgICAgICBmLndyaXRlKGNodW5rKQ0KICAgICAgICB2b2x1bWVfZmlsZXMuYXBwZW5kKGZpbGVuYW1lKQ0KICAgICAgICBwcmludChmIlNhdmVkIFZvbHVtZSB7aW5kZXh9IHRvIHtmaWxlbmFtZX0iKQ0KICAgIHJldHVybiB2b2x1bWVfZmlsZXMNCg0KIyAtLS0tLS0tLS0tLS0tLS0tLS0NCiMgTUFJTiBFWEVDVVRJT04NCiMgLS0tLS0tLS0tLS0tLS0tLS0tDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIHByaW50KCJcblN0ZXAgMTogU2V0dGluZyB1cCBwcm9qZWN0IHN0cnVjdHVyZS4uLiIpDQogICAgc2V0dXBfcHJvamVjdF9zdHJ1Y3R1cmUoKQ0KDQogICAgcHJpbnQoIlxuU3RlcCAyOiBNb2R1bGFyaXppbmcgZnVuY3Rpb25zLi4uIikNCiAgICBtb2R1bGFyaXplX2Z1bmN0aW9ucygpDQoNCiAgICByZXNvdXJjZV9tb25pdG9yX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PW1vbml0b3JfcmVzb3VyY2VzLCBkYWVtb249VHJ1ZSkNCiAgICByZXNvdXJjZV9tb25pdG9yX3RocmVhZC5zdGFydCgpDQoNCiAgICBwcmludCgiXG5TdGVwIDM6IFJ1bnRpbWUgZXhlY3V0aW9uLi4uIikNCiAgICBydW50aW1lX2V4ZWN1dGlvbigpDQoNCiAgICBwcmludCgiXG5TdGVwIDQ6IENvbXByZXNzaW5nIGxpYnJhcmllcy4uLiIpDQogICAgY29tcHJlc3NfbGlicmFyaWVzKCkNCg0KICAgIHByaW50KCJcblN0ZXAgNTogRW5jb2RpbmcgbWFpbiBzY3JpcHQgdG8gQmFzZTY0IGFuZCBzcGxpdHRpbmcgaW50byB2b2x1bWVzLi4uIikNCiAgICB2b2x1bWVzX2NyZWF0ZWQgPSBjb21wcmVzc19hbmRfZW5jb2RlX3NjcmlwdCgpDQogICAgcHJpbnQoIlZvbHVtZXMgY3JlYXRlZDoiLCB2b2x1bWVzX2NyZWF0ZWQpDQoNCiAgICBwcmludCgiXG5TdGVwIDY6IFRlc3RpbmcgZGVjb21wcmVzc2lvbiBvZiBydW50aW1lIGxpYnJhcnkuLi4iKQ0KICAgIGRlY29tcHJlc3NfbGlicmFyeShmaWxlX3RvX2V4dHJhY3Q9InJ1bnRpbWVfbGlicmFyeS50eHQiKQ0KDQogICAgcHJpbnQoIlxuQWxsIHRhc2tzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuIikNClBLAQIUABQAAAAAANKpdlptl86AvCwAALwsAAAPAAAAAAAAAAAAAAC2gQAAAABjb2RlYm90X2NvcmUucHlQSwUGAAAAAAEAAQA9AAAA6SwAAAAA