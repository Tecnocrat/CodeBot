from transformers import pipeline
from typing import Generator
import os
import json
from genetic.genetic_algorithm import evaluate_population

# Global variable for the text-generation model
generator = None

def preload_model():
    """
    Preloads the Hugging Face text-generation model to improve runtime performance.
    """
    global generator
    if generator is None:
        try:
            print("Loading AI model...")
            generator = pipeline("text-generation", model="EleutherAI/gpt-neo-125M")
            print("Model loaded successfully.")
        except Exception as e:
            print(f"Error loading AI model: {e}")

# Preload the model at the start of the program
preload_model()

def explain_python_code(code_snippet):
    """
    Explains the given Python code using the Hugging Face AI model.

    Args:
        code_snippet (str): The Python code snippet to explain.

    Returns:
        str: The explanation of the code or an error message.
    """
    global generator
    if generator is None:
        return "AI model is not loaded. Please preload the model."

    try:
        # Generate a response using the AI model
        response = generator(f"Explain this Python code: {code_snippet}", max_length=100, num_return_sequences=1)
        
        # Check if the response is valid
        if response is None:
            return "No response generated by the AI model."

        # If response is a generator, consume it
        if isinstance(response, Generator):
            response = list(response)

        # Ensure the response is a list and contains at least one item
        if isinstance(response, list) and len(response) > 0:
            first_item = response[0]  # Access the first item
            if isinstance(first_item, dict) and 'generated_text' in first_item:
                return first_item['generated_text']  # Return the explanation
            else:
                return "Unexpected response format from the AI model."
        else:
            return "No valid response generated by the AI model."
    except Exception as e:
        return f"Error generating explanation: {e}"

def suggest_code_improvements(code_snippet):
    """
    Suggests improvements for the given Python code using the AI model.

    Args:
        code_snippet (str): The Python code snippet to improve.

    Returns:
        str: Suggested improvements or an error message.
    """
    global generator
    if generator is None:
        return "AI model is not loaded. Please preload the model."

    try:
        response = generator(f"Suggest improvements for this Python code: {code_snippet}", max_length=100, num_return_sequences=1)
        if response and isinstance(response, list) and 'generated_text' in response[0]:
            return response[0]['generated_text']
        return "Unexpected response format from the AI model."
    except Exception as e:
        return f"Error generating suggestions: {e}"

def analyze_code(file_path):
    """
    Analyzes the given code file using an AI model.

    Args:
        file_path (str): Path to the code file.

    Returns:
        str: Analysis result or an error message.
    """
    global generator
    if generator is None:
        return "AI model is not loaded. Please preload the model."

    try:
        # Read the code from the file
        with open(file_path, 'r') as file:
            code_snippet = file.read()

        # Generate a response using the AI model
        response = generator(f"Analyze this Python code: {code_snippet}", max_length=100, num_return_sequences=1)

        # Check if the response is valid
        if response is None:
            return "No response generated by the AI model."

        # If response is a generator, consume it
        if isinstance(response, Generator):
            response = list(response)

        # Ensure the response is a list and contains at least one item
        if isinstance(response, list) and len(response) > 0:
            first_item = response[0]  # Access the first item
            if isinstance(first_item, dict) and 'generated_text' in first_item:
                return first_item['generated_text']  # Return the analysis result
            else:
                return "Unexpected response format from the AI model."
        else:
            return "No valid response generated by the AI model."
    except Exception as e:
        return f"Error analyzing code: {e}"

def parse_codebase(base_dir):
    """
    Analyzes the folder structure and parses high-level behaviors of genetic modules.

    Args:
        base_dir (str): Root directory of the CodeBot project.

    Returns:
        dict: JSON representation of the parsed codebase structure and behaviors.
    """
    code_structure = {}
    for root, dirs, files in os.walk(base_dir):
        folder = root.replace(base_dir, "").strip(os.sep)
        code_structure[folder] = {
            "files": files,
            "subfolders": dirs,
            "ai_behaviors": detect_ai_behaviors(root, files),
        }

    # Evaluate genetic populations for analysis
    genetic_dir = os.path.join(base_dir, "genetic")
    if os.path.exists(genetic_dir):
        populations_analysis = evaluate_population(os.path.join(genetic_dir, "populations"))
        code_structure["genetic"] = code_structure.get("genetic", {})
        code_structure["genetic"]["populations_analysis"] = populations_analysis

    return code_structure

def detect_ai_behaviors(folder, files):
    """
    Identifies AI-related logic or behaviors based on file patterns.

    Args:
        folder (str): The folder being analyzed.
        files (list): List of files in the folder.

    Returns:
        list: High-level behaviors detected in the folder.
    """
    behaviors = []
    patterns = {
        "genetic": "Genetic Algorithm Detected",
        "self_improvement": "Self-Improvement Logic Detected",
        "ai_engine": "AI Engine Logic Detected",
        "logging": "Logging Detected",
    }

    for file in files:
        if file.endswith(".py"):
            file_path = os.path.join(folder, file)
            try:
                with open(file_path, "r") as f:
                    content = f.read()
                    for keyword, behavior in patterns.items():
                        if keyword in content:
                            behaviors.append(behavior)
            except Exception as e:
                print(f"Error reading {file_path}: {e}")
    return behaviors

# Debugging
if __name__ == "__main__":
    print("DEBUG: Testing explain_python_code")
    sample_code = "def greet(name): return f'Hello, {name}!'"
    explanation = explain_python_code(sample_code)
    print(f"Input Code:\n{sample_code}\n")
    print(f"Generated Explanation:\n{explanation}")

    code_snippet = "def add(a, b): return a + b"
    explanation = explain_python_code(code_snippet)
    print(explanation)

    base_directory = "c:/dev/CodeBot"
    parsed_structure = parse_codebase(base_directory)
    with open("codebot_parsed_structure.json", "w") as f:
        json.dump(parsed_structure, f, indent=4)